[{"C:\\Users\\Thomas\\Github Repos\\GC_Mouse_Integration\\src\\index.tsx":"1","C:\\Users\\Thomas\\Github Repos\\GC_Mouse_Integration\\src\\reportWebVitals.ts":"2","C:\\Users\\Thomas\\Github Repos\\GC_Mouse_Integration\\src\\Home\\App.tsx":"3","C:\\Users\\Thomas\\Github Repos\\GC_Mouse_Integration\\src\\Home\\Home.js":"4","C:\\Users\\Thomas\\Github Repos\\GC_Mouse_Integration\\src\\PhenotypeSearch\\PhenotypeSearch.js":"5","C:\\Users\\Thomas\\Github Repos\\GC_Mouse_Integration\\src\\Home\\Components\\MainMenuItem.js":"6","C:\\Users\\Thomas\\Github Repos\\GC_Mouse_Integration\\src\\PhenotypeSearch\\Components\\PhenotypeResultBreakdown.js":"7","C:\\Users\\Thomas\\Github Repos\\GC_Mouse_Integration\\src\\UtilityComponents\\ResultTable.js":"8","C:\\Users\\Thomas\\Github Repos\\GC_Mouse_Integration\\src\\UtilityComponents\\LoadingSpinner\\LoadingSpinner.js":"9","C:\\Users\\Thomas\\Github Repos\\GC_Mouse_Integration\\src\\UtilityComponents\\ErrorBoundary.js":"10","C:\\Users\\Thomas\\Github Repos\\GC_Mouse_Integration\\src\\OntologyHierarchy\\OntologyHierarchy.js":"11","C:\\Users\\Thomas\\Github Repos\\GC_Mouse_Integration\\src\\OntologyHierarchy\\Components\\OntologyTree\\OntologyTree.js":"12","C:\\Users\\Thomas\\Github Repos\\GC_Mouse_Integration\\src\\OntologyHierarchy\\Components\\OntologyTree\\Components\\StyledTreeItem.js":"13","C:\\Users\\Thomas\\Github Repos\\GC_Mouse_Integration\\src\\Genome\\Genome.js":"14","C:\\Users\\Thomas\\Github Repos\\GC_Mouse_Integration\\src\\UtilityComponents\\TabPanel.js":"15","C:\\Users\\Thomas\\Github Repos\\GC_Mouse_Integration\\src\\UtilityComponents\\ConfigData.js":"16"},{"size":739,"mtime":1615395058086,"results":"17","hashOfConfig":"18"},{"size":440,"mtime":1612365407714,"results":"19","hashOfConfig":"18"},{"size":1209,"mtime":1615576633103,"results":"20","hashOfConfig":"18"},{"size":2534,"mtime":1615576633104,"results":"21","hashOfConfig":"18"},{"size":11937,"mtime":1618081126468,"results":"22","hashOfConfig":"18"},{"size":1574,"mtime":1617093985353,"results":"23","hashOfConfig":"18"},{"size":15853,"mtime":1618154289637,"results":"24","hashOfConfig":"18"},{"size":3577,"mtime":1618088033833,"results":"25","hashOfConfig":"18"},{"size":1288,"mtime":1612565100863,"results":"26","hashOfConfig":"18"},{"size":1016,"mtime":1614615374946,"results":"27","hashOfConfig":"18"},{"size":25379,"mtime":1618254715540,"results":"28","hashOfConfig":"18"},{"size":4411,"mtime":1617880234885,"results":"29","hashOfConfig":"18"},{"size":2917,"mtime":1617134905785,"results":"30","hashOfConfig":"18"},{"size":3851,"mtime":1617982082415,"results":"31","hashOfConfig":"18"},{"size":843,"mtime":1617037919169,"results":"32","hashOfConfig":"18"},{"size":93,"mtime":1618074128678,"results":"33","hashOfConfig":"18"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},"3xmwnr",{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"36"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"44"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"44"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"44"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"44"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"44"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"44"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"44"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},"C:\\Users\\Thomas\\Github Repos\\GC_Mouse_Integration\\src\\index.tsx",[],["78","79"],"C:\\Users\\Thomas\\Github Repos\\GC_Mouse_Integration\\src\\reportWebVitals.ts",[],"C:\\Users\\Thomas\\Github Repos\\GC_Mouse_Integration\\src\\Home\\App.tsx",["80","81"],"import React from 'react';\r\nimport './App.css';\r\n// @ts-ignore\r\nimport Home from \"./Home.js\";\r\n// @ts-ignore\r\nimport {TransitionGroup, CSSTransition} from \"react-transition-group\";\r\n// @ts-ignore\r\nimport {HashRouter, Route, Switch} from \"react-router-dom\";\r\nimport PhenotypeSearch from \"../PhenotypeSearch/PhenotypeSearch\";\r\nimport OntologyHierarchy from \"../OntologyHierarchy/OntologyHierarchy\";\r\nimport Genome from \"../Genome/Genome\";\r\n\r\nfunction App() {\r\n    return (<div className=\"App\">\r\n            <header className=\"App-header\">\r\n            </header>\r\n            <HashRouter>\r\n                <Switch>\r\n                    <Route exact path=\"/\">\r\n                        <Home/>\r\n                    </Route>\r\n                    <Route exact path=\"/PhenotypeSearch\">\r\n                        <PhenotypeSearch/>\r\n                    </Route>\r\n                    <Route exact path=\"/OntologyHierarchy\">\r\n                        <OntologyHierarchy/>\r\n                    </Route>\r\n                    <Route exact path=\"/Genome\">\r\n                        <Genome/>\r\n                    </Route>\r\n                </Switch>\r\n            </HashRouter>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","C:\\Users\\Thomas\\Github Repos\\GC_Mouse_Integration\\src\\Home\\Home.js",[],["82","83"],"C:\\Users\\Thomas\\Github Repos\\GC_Mouse_Integration\\src\\PhenotypeSearch\\PhenotypeSearch.js",["84","85","86"],"import React from 'react';\r\nimport './PhenotypeSearch.css';\r\nimport $ from 'jquery';\r\nimport {\r\n    Button,\r\n    Dialog,\r\n    DialogActions,\r\n    DialogContent,\r\n    DialogTitle,\r\n    FormControl,\r\n    FormControlLabel,\r\n    InputLabel,\r\n    MenuItem,\r\n    Radio,\r\n    RadioGroup,\r\n    Select,\r\n    TextField,\r\n    withStyles\r\n} from '@material-ui/core';\r\nimport Autocomplete from '@material-ui/lab/Autocomplete';\r\nimport CircularProgress from '@material-ui/core/CircularProgress'\r\nimport ResultTable from \"../UtilityComponents/ResultTable\";\r\nimport PhenotypeResultBreakdown from \"./Components/PhenotypeResultBreakdown\";\r\nimport axios from \"axios\";\r\nimport LoadingSpinner from \"../UtilityComponents/LoadingSpinner/LoadingSpinner\";\r\nimport api_server from \"../UtilityComponents/ConfigData\";\r\n\r\nconst useStyles = theme => ({\r\n    formControl: {\r\n        margin: theme.spacing(1),\r\n        minWidth: 120,\r\n    },\r\n    selectEmpty: {\r\n        marginTop: theme.spacing(2),\r\n    },\r\n    autoComplete: {\r\n        width: \"50%\",\r\n        marginLeft: \"auto\",\r\n        marginRight: \"auto\",\r\n    },\r\n    radio: {\r\n        width: \"50%\",\r\n        marginLeft: \"auto\",\r\n        marginRight: \"auto\"\r\n    },\r\n});\r\n\r\n\r\nclass PhenotypeSearch extends React.Component {\r\n\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            selectedSpecies: \"Mouse\",\r\n            loading: false,\r\n            tableData: null,\r\n            liveSearchResults: [],\r\n            selectedPhenotype: null,\r\n            searchOpen: true,\r\n            breakdownData: null,\r\n            humanPval: 0,\r\n            mousePval: 0,\r\n            searchInput: \"\",\r\n            configData: api_server,\r\n        };\r\n        this.page_num = 1;\r\n        this.liveCancelToken = null;\r\n    }\r\n\r\n    componentDidMount() {\r\n\r\n    }\r\n\r\n    getPreviousResults = () => {\r\n        if (this.page_num > 1) {\r\n            this.page_num -= 1;\r\n            this.search();\r\n        }\r\n    }\r\n\r\n    humanPValChanged = (e) => {\r\n        this.setState({humanPval: e.target.value});\r\n    }\r\n\r\n    mousePValChanged = (e) => {\r\n        this.setState({mousePval: e.target.value});\r\n    }\r\n\r\n    getNextResults = () => {\r\n        this.page_num += 1;\r\n        this.search();\r\n    }\r\n\r\n    searchRowClicked = (row) => {\r\n        let selection = $(row.target).attr(\"data-id\");\r\n        this.setState({selectedPhenotype: selection, searchOpen: false});\r\n    }\r\n\r\n    retrieveLiveSearch = (e, x) => {\r\n        let input = x;\r\n        if (this.liveCancelToken)\r\n            this.liveCancelToken.cancel();\r\n        this.setState({searchInput: input});\r\n        if (input.length < 1) {\r\n            $(\"#live-search\").hide();\r\n            this.setState({liveLoading: false, liveSearchResults: []});\r\n            return;\r\n        }\r\n        this.liveCancelToken = axios.CancelToken.source();\r\n        this.setState({liveLoading: true});\r\n        let url_string = this.state.configData.api_server + \"livesearch.php?entry=\" + encodeURIComponent(input) + \"&species=\" + this.state.selectedSpecies;\r\n        if (input.length > 0) {\r\n            axios.get(url_string, {cancelToken: this.liveCancelToken.token})\r\n                .then((response) => {\r\n                    if (response.status === 200) {\r\n                        if (response.data.length == 0) {\r\n                            this.setState({liveSearchResults: [], liveLoading: false});\r\n                        } else {\r\n                            this.setState({liveSearchResults: response.data, liveLoading: false});\r\n                        }\r\n                    }\r\n                })\r\n                .catch((error) => {\r\n                    console.log(\"An error occurred retrieving live search results.\");\r\n                });\r\n        }\r\n    }\r\n\r\n    search = () => {\r\n        this.setState({loading: true});\r\n        let search_input = this.state.searchInput;\r\n        let human_pval = this.state.humanPval;\r\n        let mouse_pval = this.state.mousePval;\r\n\r\n        let url_string = this.state.configData.api_server + \"/controller.php?type=study&search=\" + encodeURIComponent(search_input) + \"&page=\" + this.page_num + \"&human_pval=\" + human_pval + \"&mouse_pval=\" + mouse_pval + \"&species=\" + this.state.selectedSpecies;\r\n        axios.get(url_string)\r\n            .then((response) => {\r\n                if (response.status === 200) {\r\n                    if (response.data) {\r\n                        var result_total = response.data[1];\r\n                        if (result_total > 0) {\r\n                            this.setState({tableData: response.data[0], loading: false, searchOpen: true});\r\n                        } else {\r\n                            this.setState({tableData: \"No results found.\", loading: false, searchOpen: true});\r\n                        }\r\n                    } else {\r\n                        this.setState({loading: false, searchOpen: true, tableData: null});\r\n                    }\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                this.setState({loading: false, searchOpen: true, tableData: null});\r\n                console.log(\"An error occurred searching for phenotype results.\");\r\n            });\r\n    }\r\n\r\n    searchClick = () => {\r\n        this.page_num = 1;\r\n        this.search();\r\n    }\r\n\r\n    speciesRadioChanged = (e) => {\r\n        this.setState({selectedSpecies: e.target.value});\r\n    }\r\n\r\n    displayTable = (tableData) => {\r\n        if (tableData === \"No results found.\")\r\n            return <p className=\"center\"><br/>{tableData}</p>\r\n        else\r\n            return <ResultTable tableData={tableData} onRowClick={this.searchRowClicked}/>\r\n\r\n    }\r\n\r\n    render() {\r\n        const {tableData, liveSearchResults, liveLoading, loading, searchOpen, selectedSpecies} = this.state;\r\n        const {classes} = this.props;\r\n        return (<div className=\"PhenotypeSearch\">\r\n                <div className=\"searchResultsContainer\">\r\n                    {/* Orthology Selection */}\r\n                    <div className=\"orthology-menu\">\r\n                        <h4>Comparative data on human-mouse orthologues.</h4>\r\n                        <Autocomplete\r\n                            freeSolo\r\n                            className={classes.autoComplete}\r\n                            // getOptionSelected={(option, value) => option.FSN === value.FSN}\r\n                            // getOptionLabel={(option) => option.FSN}\r\n                            onInputChange={this.retrieveLiveSearch}\r\n                            renderInput={(params) => (\r\n                                <TextField\r\n                                    {...params}\r\n                                    label=\"Phenotype search\"\r\n                                    variant=\"outlined\"\r\n                                    // onChange={this.retrieveLiveSearch}\r\n                                    InputProps={{\r\n                                        ...params.InputProps,\r\n                                        endAdornment: (\r\n                                            <React.Fragment>\r\n                                                {liveLoading ? <CircularProgress color=\"inherit\" size={20}/> : null}\r\n                                                {params.InputProps.endAdornment}\r\n                                            </React.Fragment>\r\n                                        ),\r\n                                    }}\r\n                                />\r\n                            )}\r\n                            options={liveSearchResults.map((option) => option.FSN)}/>\r\n                        <RadioGroup row className={classes.radio} name=\"speciesRadio\" value={this.state.selectedSpecies}\r\n                                    onChange={this.speciesRadioChanged}>\r\n                            <FormControlLabel value=\"Human\" label=\"Human\" control={<Radio/>} id=\"human-radio\"/>\r\n                            <FormControlLabel value=\"Mouse\" label=\"Mouse\" control={<Radio/>} id=\"mouse-radio\"/>\r\n                        </RadioGroup>\r\n                        <FormControl className={classes.formControl} onchange={this.humanPValChanged}>\r\n                            <InputLabel shrink>Human P-value</InputLabel>\r\n                            <Select value={this.state.humanPval} className={classes.selectEmpty} id=\"human_pval_select\"\r\n                                    onChange={this.humanPValChanged}>\r\n                                <MenuItem value={0}>0</MenuItem>\r\n                                <MenuItem value={1}>1</MenuItem>\r\n                                <MenuItem value={2}>2</MenuItem>\r\n                                <MenuItem value={3}>3</MenuItem>\r\n                                <MenuItem value={4}>4</MenuItem>\r\n                                <MenuItem value={5}>5</MenuItem>\r\n                                <MenuItem value={6}>6</MenuItem>\r\n                                <MenuItem value={7}>7</MenuItem>\r\n                                <MenuItem value={8}>8</MenuItem>\r\n                                <MenuItem value={9}>9</MenuItem>\r\n                                <MenuItem value={10}>10</MenuItem>\r\n                            </Select>\r\n                        </FormControl>\r\n                        <FormControl className={classes.formControl}>\r\n                            <InputLabel shrink>Mouse P-value</InputLabel>\r\n                            <Select value={this.state.mousePval} className={classes.selectEmpty} id=\"select\"\r\n                                    onChange={this.mousePValChanged}>\r\n                                <MenuItem value={0}>0</MenuItem>\r\n                                <MenuItem value={1}>1</MenuItem>\r\n                                <MenuItem value={2}>2</MenuItem>\r\n                                <MenuItem value={3}>3</MenuItem>\r\n                                <MenuItem value={4}>4</MenuItem>\r\n                                <MenuItem value={5}>5</MenuItem>\r\n                                <MenuItem value={6}>6</MenuItem>\r\n                                <MenuItem value={7}>7</MenuItem>\r\n                                <MenuItem value={8}>8</MenuItem>\r\n                                <MenuItem value={9}>9</MenuItem>\r\n                                <MenuItem value={1}>10</MenuItem>\r\n                            </Select>\r\n                        </FormControl>\r\n                        <div className=\"input-group-inline\">\r\n                            <Button size=\"large\" color=\"primary\" variant=\"contained\" id=\"search_btn\"\r\n                                    onClick={this.searchClick}>Search</Button>\r\n                        </div>\r\n                        <LoadingSpinner loading={loading}/>\r\n                    </div>\r\n                    <div className=\"table-container\">\r\n                        {tableData ? this.displayTable(tableData) : null}\r\n                    </div>\r\n\r\n\r\n                </div>\r\n                {/*Phenotype selection results drill down*/\r\n                }\r\n                <Dialog\r\n                    fullWidth={true}\r\n                    maxWidth=\"lg\"\r\n                    open={!searchOpen}\r\n                    aria-labelledby=\"max-width-dialog-title\"\r\n                >\r\n                    <DialogContent>\r\n\r\n                        <div className=\"table-container\">\r\n                            <PhenotypeResultBreakdown selectedPhenotype={this.state.selectedPhenotype}\r\n                                                      breakdownData={this.state.breakdownData}/>\r\n                        </div>\r\n                    </DialogContent>\r\n                    <DialogActions>\r\n                        <Button onClick={() => this.setState({searchOpen: true})} color=\"primary\">\r\n                            Close\r\n                        </Button>\r\n                    </DialogActions>\r\n                </Dialog>\r\n            </div>\r\n        )\r\n            ;\r\n    }\r\n}\r\n\r\nexport default withStyles(useStyles)(PhenotypeSearch);","C:\\Users\\Thomas\\Github Repos\\GC_Mouse_Integration\\src\\Home\\Components\\MainMenuItem.js",["87","88"],"import React, {useCallback} from 'react';\r\nimport {Paper, withStyles} from \"@material-ui/core\";\r\nimport './MainMenuItem.css';\r\nimport Typography from \"@material-ui/core/Typography\";\r\n\r\nconst useStyles = theme => ({\r\n    paper: {\r\n        padding: theme.spacing(2),\r\n        textAlign: 'center',\r\n        color: theme.palette.text.secondary,\r\n        height: 500,\r\n        zIndex: 1,\r\n        position: 'relative'\r\n    },\r\n    img: {\r\n        width: 100,\r\n    },\r\n    text: {\r\n        textDecoration: 'none',\r\n    }\r\n});\r\n\r\nclass MainMenuItem extends React.Component {\r\n\r\n    state = {isZoomed: false};\r\n\r\n    toggle = () => {\r\n        this.setState({\r\n            isZoomed: !this.state.isZoomed\r\n        });\r\n    }\r\n\r\n    render() {\r\n        const {classes} = this.props;\r\n        const {isZoomed} = this.state;\r\n\r\n        return (\r\n            <Paper style={{transform: this.state.isZoomed ? 'scale(1.1)' : 'scale(1)',\r\n                transition: this.state.isZoomed ? '0.3s' :  '0.3s', zIndex: this.state.isZoomed ? 99 :  1}}\r\n                   onMouseEnter={() => this.toggle()}\r\n                   onMouseLeave={() => this.toggle()} className={classes.paper}>\r\n                <img className={classes.img} src={this.props.image} alt={this.props.alt}/>\r\n                <Typography className={classes.text} variant='h5' gutterBottom>{this.props.heading}</Typography>\r\n                <Typography className={classes.text} variant='body1' gutterBottom>{this.props.body}</Typography>\r\n            </Paper>);\r\n    }\r\n}\r\n\r\nexport default withStyles(useStyles)(MainMenuItem);","C:\\Users\\Thomas\\Github Repos\\GC_Mouse_Integration\\src\\PhenotypeSearch\\Components\\PhenotypeResultBreakdown.js",["89","90","91"],"import React from \"react\";\r\nimport './PhenotypeResultBreakdown.css';\r\nimport ResultTable from \"../../UtilityComponents/ResultTable\";\r\nimport $ from \"jquery\";\r\nimport axios from \"axios\";\r\nimport LoadingSpinner from \"../../UtilityComponents/LoadingSpinner/LoadingSpinner\";\r\nimport {AppBar, Button, Grid, Paper, Tab, Tabs} from \"@material-ui/core\";\r\nimport TabPanel from \"../../UtilityComponents/TabPanel\";\r\nimport api_server from \"../../UtilityComponents/ConfigData\";\r\nimport {Graph} from \"react-d3-graph\";\r\n\r\nclass PhenotypeResultBreakdown extends React.Component {\r\n// the graph configuration, just override the ones you need\r\n    const\r\n    myConfig = {\r\n        nodeHighlightBehavior: true,\r\n        directed: false,\r\n        staticGraphWithDragAndDrop: true,\r\n          d3: {\r\n                alphaTarget: 0.05,\r\n                disableLinkForce: true\r\n              },\r\n        node: {\r\n            color: \"blue\",\r\n            size: 300,\r\n            highlightStrokeColor: \"black\",\r\n            labelProperty: \"name\",\r\n            labelPosition: \"bottom\",\r\n        },\r\n        link: {\r\n            highlightColor: \"lightblue\",\r\n            renderLabel: true,\r\n            labelProperty: \"linkType\",\r\n            strokeWidth: 3,\r\n            fontSize: 10\r\n        },\r\n    };\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.gwasStudyClicked = this.gwasStudyClicked.bind(this);\r\n        this.experimentClicked = this.experimentClicked.bind(this);\r\n        this.state = {\r\n            selectedPhenotype: \"\",\r\n            breakdownData: null,\r\n            backBtnClick: null,\r\n            loading: true,\r\n            tabValue: 0,\r\n            dataTabValue: 0,\r\n            configData: api_server,\r\n            mappingGraphData: null,\r\n            mappingGraphConfig: null,\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.getBreakdownData();\r\n    }\r\n\r\n    gwasStudyClicked(row) {\r\n        let studyID = $(row.currentTarget).attr(\"data-id\");\r\n        var win = window.open(\"https://www.gwascentral.org/study/\" + studyID, \"_blank\");\r\n        if (win)\r\n            win.focus();\r\n    }\r\n\r\n    experimentClicked(row) {\r\n        let selection = $(row.target).attr(\"data-id\");\r\n    }\r\n\r\n    getBreakdownData() {\r\n        let url_string = this.state.configData.api_server + \"controller.php?type=study&phenotypeBreakdown=&term=\" + this.props.selectedPhenotype;\r\n        axios.get(url_string)\r\n            .then((response) => {\r\n                if (response.status === 200) {\r\n                    if (response.data) {\r\n                        // graph payload (with minimalist structure)\r\n                        let humanTermCoords = [50, 214];\r\n                        let mouseTermCoords = [750, 214];\r\n                        var data = {\r\n                            nodes: [\r\n                                {\r\n                                    id: response.data[\"Mappings\"][\"humanID\"],\r\n                                    name: response.data[\"Mappings\"][\"humanLabel\"],\r\n                                    x: humanTermCoords[0],\r\n                                    y: humanTermCoords[1],\r\n                                    color: \"red\"\r\n                                },\r\n                                {\r\n                                    id: response.data[\"Mappings\"][\"mouseID\"],\r\n                                    name: response.data[\"Mappings\"][\"mouseLabel\"],\r\n                                    x: mouseTermCoords[0],\r\n                                    y: mouseTermCoords[1],\r\n                                    color: \"blue\"\r\n                                }\r\n                            ],\r\n                            links: []\r\n                        };\r\n                        for (var i = 0; i < response.data[\"Mappings\"][\"mouseSynonyms\"].length; i++) {\r\n                            let mapping = response.data[\"Mappings\"][\"mouseSynonyms\"][i];\r\n                            let mouseNode = {\r\n                                id: mapping[\"synonymId\"],\r\n                                name: mapping[\"synonymLabel\"],\r\n                                x: mouseTermCoords[0] - 175,\r\n                                y: mouseTermCoords[1] - 105 + (i * 65),\r\n                                color: \"lightblue\"\r\n                            };\r\n                            let link = {\r\n                                source: mapping[\"synonymId\"],\r\n                                target: response.data[\"Mappings\"][\"mouseID\"],\r\n                                linkType: \"Synonym\"\r\n                            };\r\n                            if (!data.nodes.includes(mouseNode)) {\r\n                                data.nodes.push(mouseNode);\r\n                            }\r\n                            if (!data.links.includes(link)) {\r\n                                data.links.push(link);\r\n                            }\r\n                        }\r\n                        for (var i = 0; i < response.data[\"Mappings\"][\"humanSynonyms\"].length; i++) {\r\n                            let mapping = response.data[\"Mappings\"][\"humanSynonyms\"][i];\r\n                            let humanNode = {\r\n                                id: mapping[\"synonymId\"],\r\n                                name: mapping[\"synonymLabel\"],\r\n                                x: humanTermCoords[0] + 175,\r\n                                y: humanTermCoords[1] - 105 + (i * 65),\r\n                                color: \"orange\"\r\n                            };\r\n                            let link = {\r\n                                source: response.data[\"Mappings\"][\"humanID\"],\r\n                                target: mapping[\"synonymId\"],\r\n                                linkType: \"Synonym\"\r\n                            };\r\n                            if (!data.nodes.includes(humanNode)) {\r\n                                data.nodes.push(humanNode);\r\n                            }\r\n                            if (!data.links.includes(link)) {\r\n                                data.links.push(link);\r\n                            }\r\n                        }\r\n                        for (var i = 0; i < response.data[\"Mappings\"][\"matches\"].length; i++) {\r\n                            let match = response.data[\"Mappings\"][\"matches\"][i];\r\n                            let link = {\r\n                                source: match[\"humanNodeType\"] === \"term\" ? response.data[\"Mappings\"][\"humanID\"] : match[\"humanNodeId\"],\r\n                                target: match[\"mouseNodeType\"] === \"term\" ? response.data[\"Mappings\"][\"mouseID\"] : match[\"mouseNodeId\"],\r\n                                linkType: match[\"isExact\"] ? \"Exact Match\" : \"Partial Match\"\r\n                            }\r\n                            if (!data.links.includes(link)) {\r\n                                data.links.push(link);\r\n                            }\r\n                        }\r\n                        this.setState({breakdownData: response.data, loading: false, mappingGraphData: data});\r\n                    } else {\r\n\r\n                    }\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                console.log(\"An error occurred retrieving phenotype data.\");\r\n            });\r\n    }\r\n\r\n    getHumanTermID(breakdownData) {\r\n        if (breakdownData) {\r\n            if (breakdownData[\"Mappings\"]) {\r\n                return breakdownData[\"Mappings\"][\"humanID\"];\r\n            } else {\r\n                return \"No mapping found\";\r\n            }\r\n        }\r\n    }\r\n\r\n    getHumanTerm(breakdownData) {\r\n        if (breakdownData) {\r\n            if (breakdownData[\"Mappings\"]) {\r\n                return breakdownData[\"Mappings\"][\"humanLabel\"];\r\n            } else {\r\n                return \"No mapping found\";\r\n            }\r\n        }\r\n    }\r\n\r\n    getMouseTermID(breakdownData) {\r\n        if (breakdownData) {\r\n            if (breakdownData[\"Mappings\"]) {\r\n                return breakdownData[\"Mappings\"][\"mouseID\"];\r\n            } else {\r\n                return \"No mapping found\";\r\n            }\r\n        }\r\n    }\r\n\r\n    getMouseTerm(breakdownData) {\r\n        if (breakdownData) {\r\n            if (breakdownData[\"Mappings\"]) {\r\n                return breakdownData[\"Mappings\"][\"mouseLabel\"];\r\n            } else {\r\n                return \"No mapping found\";\r\n            }\r\n        }\r\n    }\r\n\r\n    getGWASStudies(breakdownData) {\r\n        if (breakdownData) {\r\n            if (breakdownData[\"GWAS Studies\"].length > 0) {\r\n\r\n            } else {\r\n                return \"0\";\r\n            }\r\n        }\r\n    }\r\n\r\n    getGeneKnockouts(breakdownData) {\r\n        if (breakdownData) {\r\n            if (breakdownData[\"Gene Knockouts\"].length > 0) {\r\n\r\n            } else {\r\n                return \"0\";\r\n            }\r\n        }\r\n    }\r\n\r\n    getHumanSynonyms(breakdownData) {\r\n        if (breakdownData) {\r\n            if (breakdownData[\"Mappings\"][\"humanSynonyms\"].length > 0) {\r\n                return breakdownData[\"Mappings\"][\"humanSynonyms\"].map((synonym, index) =>\r\n                    <li>{synonym[\"synonymLabel\"]}</li>);\r\n            } else {\r\n                return <li>None</li>;\r\n            }\r\n        }\r\n    }\r\n\r\n    getMouseSynonyms(breakdownData) {\r\n        if (breakdownData) {\r\n            if (breakdownData[\"Mappings\"][\"mouseSynonyms\"].length > 0) {\r\n                return breakdownData[\"Mappings\"][\"mouseSynonyms\"].map((synonym, index) =>\r\n                    <li>{synonym[\"synonymLabel\"]}</li>);\r\n            } else {\r\n                return <li>None</li>;\r\n            }\r\n        }\r\n    }\r\n\r\n    onClickLink = function (source, target) {\r\n        window.alert(`Clicked link between ${source} and ${target}`);\r\n    };\r\n\r\n    render() {\r\n        const {breakdownData, loading, tabValue, dataTabValue, mappingGraphData} = this.state;\r\n        return (\r\n            <Paper id=\"phenotypeResultsContainer\" className=\"container\">\r\n                <LoadingSpinner loading={loading}/>\r\n                {this.props.backBtnClick ?\r\n                    <Button variant=\"contained\" color=\"primary\" onClick={this.props.backBtnClick}>Back</Button> : null}\r\n                <div className=\"phenotype-breakdown-container\">\r\n                    <AppBar position=\"static\" color=\"default\">\r\n                        <Tabs\r\n                            value={tabValue}\r\n                            onChange={(e, val) => this.setState({tabValue: val})}\r\n                            indicatorColor=\"primary\"\r\n                            textColor=\"primary\"\r\n                            variant=\"fullWidth\"\r\n                            aria-label=\"full width tabs example\"\r\n                        >\r\n                            <Tab label=\"Data\"/>\r\n                            <Tab label=\"Mapping\"/>\r\n\r\n                        </Tabs>\r\n                    </AppBar>\r\n                    <TabPanel value={tabValue} index={0} className=\"subTabMenu\">\r\n                        <AppBar position=\"static\" color=\"default\">\r\n                            <Tabs\r\n                                value={dataTabValue}\r\n                                onChange={(e, val) => this.setState({dataTabValue: val})}\r\n                                indicatorColor=\"primary\"\r\n                                textColor=\"primary\"\r\n                                aria-label=\"full width tabs example\"\r\n                                variant=\"fullWidth\"\r\n                                centered\r\n                            >\r\n                                <Tab\r\n                                    label={(breakdownData ? breakdownData[\"GWAS Studies\"].length : 0) + \" Human GWAS Studies\"}\r\n                                    wrapped/>\r\n                                <Tab\r\n                                    label={(breakdownData ? breakdownData[\"Gene Knockouts\"].length : 0) + \" Mouse Gene Knockouts\"}\r\n                                    wrapped/>\r\n\r\n                            </Tabs>\r\n                        </AppBar>\r\n                        <TabPanel value={dataTabValue} index={0}>\r\n                            {breakdownData ? <ResultTable tableData={breakdownData[\"GWAS Studies\"]}\r\n                                                          onRowClick={this.gwasStudyClicked}/> : null}\r\n                        </TabPanel>\r\n                        <TabPanel value={dataTabValue} index={1}>\r\n                            {breakdownData ? <ResultTable tableData={breakdownData[\"Gene Knockouts\"]}\r\n                                                          onRowClick={this.experimentClicked}/> : null}\r\n                        </TabPanel>\r\n\r\n                    </TabPanel>\r\n                    <TabPanel value={tabValue} index={1}>\r\n                        <Grid container>\r\n                            <Grid item xs>\r\n                                <h4 className=\"center\">Homo Sapiens</h4>\r\n                            </Grid>\r\n                            <Grid item xs>\r\n                                <h4 className=\"center\">Mus Musculus</h4>\r\n                            </Grid>\r\n\r\n                        </Grid>\r\n                        <Grid container>\r\n                            <Grid item xs={3} className=\"col highlight\">\r\n                                <p>ID</p>\r\n                            </Grid>\r\n                            <Grid item xs={3}>\r\n                                <p id=\"HPO-Matched-Term\">{this.getHumanTermID(breakdownData)}</p>\r\n                            </Grid>\r\n                            <Grid item xs={3} className=\"col highlight\">\r\n                                <p>ID</p>\r\n                            </Grid>\r\n                            <Grid item xs={3}>\r\n                                <p id=\"MP-Matched-Term\">{this.getMouseTermID(breakdownData)}</p>\r\n                            </Grid>\r\n                            <Grid item xs={3} className=\"col highlight\">\r\n                                <p>Term</p>\r\n                            </Grid>\r\n                            <Grid item xs={3}>\r\n                                <p id=\"HPO-Matched-Term\">{this.getHumanTerm(breakdownData)}</p>\r\n                            </Grid>\r\n                            <Grid item xs={3} className=\"col highlight\">\r\n                                <p>Term</p>\r\n                            </Grid>\r\n                            <Grid item xs={3}>\r\n                                <p id=\"MP-Matched-Term\">{this.getMouseTerm(breakdownData)}</p>\r\n                            </Grid>\r\n\r\n                        </Grid>\r\n                        <Grid container>\r\n                            <Grid item xs={3} className=\"col highlight\">\r\n                                <p>Synonyms</p>\r\n                            </Grid>\r\n                            <Grid item xs={3} className=\"col\">\r\n                                <ul>\r\n                                    {this.getHumanSynonyms(breakdownData)}\r\n                                </ul>\r\n                            </Grid>\r\n                            <Grid item xs={3} className=\"col highlight\">\r\n                                <p>Synonyms</p>\r\n                            </Grid>\r\n                            <Grid item xs={3} className=\"col\">\r\n                                <ul>\r\n                                    {this.getMouseSynonyms(breakdownData)}\r\n                                </ul>\r\n                            </Grid>\r\n\r\n                        </Grid>\r\n                        <Graph\r\n                            id=\"graph-id\" // id is mandatory\r\n                            data={mappingGraphData}\r\n                            config={this.myConfig}\r\n                            onClickNode={this.onClickNode}\r\n                            onClickLink={this.onClickLink}\r\n                        />\r\n                    </TabPanel>\r\n                </div>\r\n            </Paper>\r\n        );\r\n    }\r\n}\r\n\r\nexport default PhenotypeResultBreakdown;","C:\\Users\\Thomas\\Github Repos\\GC_Mouse_Integration\\src\\UtilityComponents\\ResultTable.js",["92","93"],"import React, {useCallback} from 'react';\r\nimport './ResultTable.css';\r\nimport $ from 'jquery';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport {TablePagination} from \"@material-ui/core\";\r\n\r\nclass ResultTable extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {tableData: {}, onRowClick: null, rowsPerPage:5, page:0};\r\n    }\r\n\r\n    handleChangePage = (event, newPage) => {\r\n        this.setState({page: newPage});\r\n    }\r\n\r\n    handleChangeRowsPerPage = (event) => {\r\n        this.setState({rowsPerPage: parseInt(event.target.value, 10), page: 0});\r\n    }\r\n\r\n    render() {\r\n        if (typeof this.props.tableData != \"undefined\" && this.props.tableData !== null)\r\n            if (this.props.tableData.length > 0) {\r\n                return (<div className=\"container\">\r\n                        <TableContainer component={Paper} className=\"info\" id=\"searchResults\">\r\n                            <Table size=\"small\" aria-label=\"a dense table\">\r\n                                <TableHead>\r\n                                    <TableRow>\r\n                                        {Object.keys(this.props.tableData[0]).map((header, index) => {\r\n                                            return (<TableCell align=\"center\" key={index}>{header}</TableCell>)\r\n                                        })}\r\n                                    </TableRow>\r\n                                </TableHead>\r\n                                <TableBody>\r\n                                    {this.props.tableData.slice(this.state.page * this.state.rowsPerPage,\r\n                                        this.state.page * this.state.rowsPerPage + this.state.rowsPerPage).map((row, index) => {\r\n                                        return (\r\n                                            <TableRow data-id={row[\"ID\"]} key={index} onClick={this.props.onRowClick}>\r\n                                                {Object.keys(row).map((key) => {\r\n                                                    return (<TableCell align=\"left\"\r\n                                                                       data-id={row[\"MP ID\"]}>{row[key]}</TableCell>)\r\n                                                })}\r\n                                            </TableRow>)\r\n                                    })}\r\n                                </TableBody>\r\n                            </Table>\r\n                        </TableContainer>\r\n                        <TablePagination\r\n                            rowsPerPageOptions={[5, 10, 25]}\r\n                            component=\"div\"\r\n                            count={this.props.tableData.length}\r\n                            rowsPerPage={this.state.rowsPerPage}\r\n                            page={this.state.page}\r\n                            onChangePage={this.handleChangePage}\r\n                            onChangeRowsPerPage={this.handleChangeRowsPerPage}\r\n                        />\r\n                    </div>\r\n                );\r\n            } else {\r\n                return (\r\n                    <span className=\"center\">No results found.</span>\r\n                );\r\n            }\r\n        else\r\n            return null;\r\n\r\n    }\r\n}\r\n\r\n\r\nexport default ResultTable;","C:\\Users\\Thomas\\Github Repos\\GC_Mouse_Integration\\src\\UtilityComponents\\LoadingSpinner\\LoadingSpinner.js",["94"],"import React, {useCallback} from 'react';\r\nimport './LoadingSpinner.css';\r\n\r\nclass LoadingSpinner extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {loading: false};\r\n    }\r\n\r\n    render() {\r\n        if (this.props.loading)\r\n            return (\r\n                <div className=\"loading-container\">\r\n                    <div className=\"loading\">\r\n                        <div className=\"loader\">\r\n                            <div></div>\r\n                            <div></div>\r\n                            <div></div>\r\n                            <div></div>\r\n                            <div></div>\r\n                            <div></div>\r\n                            <div></div>\r\n                            <div></div>\r\n                            <div></div>\r\n                            <div></div>\r\n                            <div></div>\r\n                            <div></div>\r\n                            <div></div>\r\n                            <div></div>\r\n                            <div></div>\r\n                        </div>\r\n                        <h4>Loading...</h4>\r\n                    </div>\r\n                </div>\r\n            );\r\n        else\r\n            return (null);\r\n    }\r\n}\r\n\r\nexport default LoadingSpinner;","C:\\Users\\Thomas\\Github Repos\\GC_Mouse_Integration\\src\\UtilityComponents\\ErrorBoundary.js",[],"C:\\Users\\Thomas\\Github Repos\\GC_Mouse_Integration\\src\\OntologyHierarchy\\OntologyHierarchy.js",["95","96","97"],"import React from 'react';\r\nimport $ from 'jquery';\r\nimport axios from \"axios\";\r\nimport {Button, Grid, Paper, TextField, withStyles} from '@material-ui/core';\r\nimport LoadingSpinner from \"../UtilityComponents/LoadingSpinner/LoadingSpinner\";\r\nimport './OntologyHierarchy.css';\r\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\r\nimport ErrorBoundary from \"../UtilityComponents/ErrorBoundary\";\r\nimport OntologyTree from \"./Components/OntologyTree/OntologyTree\";\r\nimport _ from \"lodash\";\r\nimport PhenotypeResultBreakdown from \"../PhenotypeSearch/Components/PhenotypeResultBreakdown\";\r\nimport api_server from \"../UtilityComponents/ConfigData\";\r\n\r\nconst useStyles = theme => ({\r\n    formControl: {\r\n        margin: theme.spacing(1),\r\n        minWidth: 120,\r\n    },\r\n    selectEmpty: {\r\n        marginTop: theme.spacing(2),\r\n    },\r\n    autoComplete: {\r\n        width: \"75%\",\r\n        marginLeft: \"auto\",\r\n        marginRight: \"auto\",\r\n        paddingBottom: 5,\r\n    },\r\n    paper: {\r\n        padding: theme.spacing(1),\r\n        textAlign: 'center',\r\n        color: theme.palette.text.secondary,\r\n    },\r\n});\r\n\r\nclass OntologyHierarchy extends React.Component {\r\n\r\n    function\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            loading: true,\r\n            treeData: null,\r\n            mouseLiveSearchResults: [],\r\n            humanLiveSearchResults: [],\r\n            mouseLiveLoading: false,\r\n            humanLiveLoading: false,\r\n            expandedMouseNodes: [''],\r\n            expandedHumanNodes: [''],\r\n            selectedMouseNodes: [''],\r\n            selectedHumanNodes: [''],\r\n            selectedSpecies: \"Mouse\",\r\n            isMappingPresent: false,\r\n            conErrorStatus: false,\r\n            configData: api_server,\r\n        };\r\n        this.tempExpandedmouseIds = [];\r\n        this.tempExpandedhumanIds = [];\r\n        this.liveCancelToken = null;\r\n        this.testPaths = [];\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.getRootTree();\r\n    }\r\n\r\n    retrieveLiveSearch = (e, x) => {\r\n        let input = x;\r\n        let species = e.target.id === \"mouseSearchInput\" ? \"mouse\" : \"human\";\r\n        if (this.liveCancelToken)\r\n            this.liveCancelToken.cancel();\r\n        if (input.length < 1) {\r\n            $(\"#live-search\").hide();\r\n            if (species === \"mouse\")\r\n                this.setState({mouseLiveLoading: false, mouseLiveSearchResults: []});\r\n            else\r\n                this.setState({humanLiveLoading: false, humanLiveSearchResults: []});\r\n            return;\r\n        }\r\n        if (species === \"mouse\")\r\n            this.setState({mouseLiveLoading: true});\r\n        else\r\n            this.setState({humanLiveLoading: true});\r\n\r\n        this.setState({searchInput: input});\r\n        this.liveCancelToken = axios.CancelToken.source();\r\n        let url_string = this.state.configData.api_server + \"livesearch.php?entry=\" + encodeURIComponent(input) + \"&species=\" + species;\r\n\r\n        if (input.length > 0) {\r\n            axios.get(url_string, {cancelToken: this.liveCancelToken.token})\r\n                .then((response) => {\r\n                    if (response.status === 200) {\r\n                        if (response.data.length === 0) {\r\n                            if (species === \"mouse\") {\r\n                                this.setState({mouseLiveSearchResults: [], mouseLiveLoading: false});\r\n                            } else {\r\n                                this.setState({humanLiveSearchResults: [], humanLiveLoading: false});\r\n                            }\r\n                        } else {\r\n                            if (species === \"mouse\") {\r\n                                this.setState({mouseLiveSearchResults: response.data, mouseLiveLoading: false});\r\n                            } else {\r\n                                this.setState({humanLiveSearchResults: response.data, humanLiveLoading: false});\r\n                            }\r\n                        }\r\n                    }\r\n                })\r\n                .catch((error) => {\r\n                    console.log(\"An error occurred retrieving live search results.\");\r\n                    if (species === \"mouse\") {\r\n                        this.setState({mouseLiveSearchResults: [], mouseLiveLoading: false});\r\n                    } else {\r\n                        this.setState({humanLiveSearchResults: [], humanLiveLoading: false});\r\n                    }\r\n                });\r\n        }\r\n    }\r\n\r\n    appendSearchResult = (objValue, srcValue) => {\r\n        if (_.isArray(objValue)) {\r\n            for (var i = 0; i < objValue.length; i++) {\r\n                if (objValue[i].FSN === srcValue[0].FSN) {\r\n                    objValue[i] = _.merge(objValue[i], srcValue[0]);\r\n                    return objValue;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    isNodeDuplicate = (source, newItem) => {\r\n        for (var i = 0; i < source.length; i++) {\r\n            if (source[i].id === newItem.id) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    expandSiblings = (tree) => {\r\n        if (tree.hassibling) {\r\n            let newTree = tree.hassibling;\r\n            newTree.filter((node) => !this.isNodeDuplicate(tree, node));\r\n            delete tree.hassibling;\r\n            newTree.push(tree);\r\n            tree = newTree;\r\n            tree = _.sortBy(tree, o => o.FSN);\r\n        }\r\n        if (_.isArray(tree)) {\r\n            for (var i = 0; i < tree.length; i++) {\r\n                if (tree[i].isa) {\r\n                    tree[i].isa = tree[i].isa.map((node) => this.expandSiblings(node));\r\n                    if (Array.isArray(tree[i].isa[0]))\r\n                        tree[i].isa = tree[i].isa[0];\r\n                    tree[i].isa = _.sortBy(tree[i].isa, o => o.FSN);\r\n                }\r\n                if (tree[i].hassibling) {\r\n                    let newTree = tree[i].hassibling;\r\n                    newTree.filter((node) => !this.isNodeDuplicate(tree, node));\r\n                    delete tree[i].hassibling;\r\n                    tree.push(newTree);\r\n                }\r\n            }\r\n            tree = _.sortBy(tree, o => o.FSN);\r\n        } else if (tree.isa) {\r\n            tree.isa = tree.isa.map((node) => this.expandSiblings(node));\r\n            for (var k in tree.isa) {\r\n                if (Array.isArray(tree.isa[k])) {\r\n                    tree.isa[k].map((node) => tree.isa.push(node));\r\n                    tree.isa = tree.isa.splice(k, 1);\r\n                }\r\n            }\r\n            tree.isa = _.sortBy(tree.isa, o => o.FSN);\r\n        }\r\n        return tree;\r\n    }\r\n\r\n    findPath = (a, obj) => {\r\n        for (var key in obj) {                                         // for each key in the object obj\r\n            if (obj.hasOwnProperty(key)) {                             // if it's an owned key\r\n                if (a === obj[key]) return key;                        // if the item beign searched is at this key then return this key as the path\r\n                else if (obj[key] && typeof obj[key] === \"object\") {   // otherwise if the item at this key is also an object\r\n                    var path = this.findPath(a, obj[key]);                 // search for the item a in that object\r\n                    if (path) return key + \".\" + path;                 // if found then the path is this key followed by the result of the search\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    getAllPaths = (obj, key, prev = '') => {\r\n        const result = [];\r\n\r\n        for (let k in obj) {\r\n            let path = prev + (prev ? '.' : '') + k;\r\n\r\n            if (obj[k] === key) {\r\n                result.push(path);\r\n            } else if (typeof obj[k] == 'object') {\r\n                result.push(...this.getAllPaths(obj[k], key, path));\r\n            }\r\n        }\r\n\r\n        return result\r\n    }\r\n\r\n    pathToIdArray = (path, tree) => {\r\n        var result = [];\r\n        for (var i = 1; i < path.length; i += 2) {\r\n            result.push(tree.isa[path[i]].id);\r\n            tree = tree.isa[path[i]];\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Simple object check.\r\n     * @param item\r\n     * @returns {boolean}\r\n     */\r\n    isObject = (item) => {\r\n        return (item && typeof item === 'object' && !Array.isArray(item));\r\n    }\r\n\r\n    /**\r\n     * Deep merge two objects.\r\n     * @param target\r\n     * @param ...sources\r\n     */\r\n    mergeDeep = (target, ...sources) => {\r\n        if (!sources.length) return target;\r\n        const source = sources.shift();\r\n\r\n        if (this.isObject(target) && this.isObject(source)) {\r\n            for (const key in source) {\r\n                if (this.isObject(source[key])) {\r\n                    if (!target[key]) Object.assign(target, {[key]: {}});\r\n                    this.mergeDeep(target[key], source[key]);\r\n                } else {\r\n                    Object.assign(target, {[key]: source[key]});\r\n                }\r\n            }\r\n        }\r\n        return this.mergeDeep(target, ...sources);\r\n    }\r\n\r\n    objectToPaths = (data, target) => {\r\n        var result = [];\r\n        var matched_paths = [];\r\n        doIt(data, \"\");\r\n        return matched_paths;\r\n\r\n        function doIt(data, s) {\r\n            if (data && typeof data === \"object\") {\r\n                if (Array.isArray(data)) {\r\n                    for (var i = 0; i < data.length; i++) {\r\n                        if (data[i] === target) {\r\n                            matched_paths.push(s + \".\" + i);\r\n                        }\r\n                        doIt(data[i], s + \".\" + i);\r\n                    }\r\n                } else {\r\n                    for (var p in data) {\r\n                        if (data[p] === target) {\r\n                            matched_paths.push(s + \".\" + p);\r\n                        }\r\n                        doIt(data[p], s + \".\" + p);\r\n                    }\r\n                }\r\n            } else {\r\n                result.push(s);\r\n            }\r\n        }\r\n    }\r\n\r\n    search = (searchInput, ontology) => {\r\n        this.setState({loading: true, isMappingPresent: false});\r\n        if (searchInput === undefined || searchInput === \"\") {\r\n            this.getRootTree();\r\n            return;\r\n        }\r\n        let url_string = this.state.configData.api_server + \"controller.php?type=ontology&search&term=\" + searchInput + \"&ontology=\" + ontology;\r\n        axios.get(url_string)\r\n            .then((response) => {\r\n                if (response.status === 200) {\r\n                    if (response.data) {\r\n                        let tree = this.state.treeData;\r\n                        let expandedMouseNodes = [];\r\n                        let expandedHumanNodes = [];\r\n                        response.data.mouseTree = this.expandSiblings(response.data.mouseTree);\r\n                        response.data.humanTree = this.expandSiblings(response.data.humanTree);\r\n                        tree[\"humanID\"] = response.data.humanID;\r\n                        tree[\"mouseID\"] = response.data.mouseID;\r\n                        tree[\"isExactMatch\"] = response.data.isExactMatch;\r\n                        tree[\"mouseTree\"] = response.data.mouseTree; // _.mergeWith(response.data.mouseTree, tree[\"mouseTree\"], this.appendSearchResult);//this.mergeDeep(tree[\"mouseTree\"], response.data.mouseTree);\r\n                        var test = this.objectToPaths(tree[\"mouseTree\"], tree[\"mouseID\"]);\r\n                        expandedMouseNodes = this.pathToIdArray(this.findPath(tree[\"mouseID\"], tree[\"mouseTree\"]).split(\".\"), tree[\"mouseTree\"]);\r\n                        expandedMouseNodes.unshift(\"MP:0000001\");\r\n                        expandedMouseNodes.pop();\r\n                        tree[\"humanTree\"] = _.mergeWith(response.data.humanTree, tree[\"humanTree\"], this.appendSearchResult);//this.mergeDeep(tree[\"humanTree\"], response.data.humanTree);\r\n                        expandedHumanNodes = this.pathToIdArray(this.findPath(tree[\"humanID\"], tree[\"humanTree\"]).split(\".\"), tree[\"humanTree\"]);\r\n                        expandedHumanNodes.unshift(\"HP:0000001\");\r\n                        expandedHumanNodes.pop();\r\n                        this.setState({\r\n                            treeData: tree,\r\n                            loading: false,\r\n                            isMappingPresent: true,\r\n                            expandedMouseNodes: expandedMouseNodes,\r\n                            selectedMouseNodes: tree[\"mouseID\"],\r\n                            expandedHumanNodes: expandedHumanNodes,\r\n                            selectedHumanNodes: tree[\"humanID\"],\r\n                            mappedMousePhenotype: response.data.mouseID,\r\n                            mappedHumanPhenotype: response.data.humanID\r\n                        }, () => this.scrollTrees());\r\n                    } else {\r\n                        this.setState({loading: false, isMappingPresent: false});\r\n                    }\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                this.setState({loading: false, searchOpen: true});\r\n                console.log(\"An error occurred searching for ontology mappings.\");\r\n            });\r\n    }\r\n\r\n    updateTree = (id, isa) => obj => {\r\n        if (obj.id === id) {\r\n            obj.isa = isa.isa;\r\n            return true;\r\n        } else if (obj.isa)\r\n            return obj.isa.some(this.updateTree(id, isa));\r\n    }\r\n\r\n    getRootTree = () => {\r\n        this.setState({loading: true});\r\n        let url_string = this.state.configData.api_server + \"controller.php?type=ontology&search&term=GET_ROOT&ontology=mp\";\r\n        axios.get(url_string)\r\n            .then((response) => {\r\n                if (response.status === 200) {\r\n                    if (response.data) {\r\n                        let expandedMouseNodes = [];\r\n                        let expandedHumanNodes = [];\r\n                        expandedMouseNodes.push(response.data.mouseID);\r\n                        expandedHumanNodes.push(response.data.humanID);\r\n                        this.setState({\r\n                            treeData: response.data,\r\n                            loading: false,\r\n                            expandedMouseNodes: expandedMouseNodes,\r\n                            expandedHumanNodes: expandedHumanNodes,\r\n                        });\r\n                    } else {\r\n\r\n                    }\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                console.log(\"An error occurred retrieving root tree data.\");\r\n                this.setState({conErrorStatus: true, loading: false});\r\n            });\r\n    }\r\n    getTermChildren = (e, tree, ont) => {\r\n        let url_string = this.state.configData.api_server + \"/controller.php?type=ontology&childSearch&term=\" + e + \"&ontology=\" + ont;\r\n        axios.get(url_string)\r\n            .then((response) => {\r\n                if (response.status === 200) {\r\n                    if (response.data) {\r\n                        if (tree === \"mouse\") {\r\n                            let tree = this.state.treeData;\r\n                            [tree[\"mouseTree\"]].forEach(this.updateTree(e, response.data));\r\n                            this.setState({treeData: tree});\r\n                        } else {\r\n                            let tree = this.state.treeData;\r\n                            [tree[\"humanTree\"]].forEach(this.updateTree(e, response.data));\r\n                            this.setState({treeData: tree});\r\n                        }\r\n\r\n                    }\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                this.setState({loading: false, searchOpen: true, tableData: null});\r\n                console.log(\"An error occurred searching for ontology mappings.\");\r\n            });\r\n    }\r\n\r\n    termSearchBtnClick = (term) => {\r\n        this.setState({searchInput: term});\r\n        this.search();\r\n    }\r\n\r\n    mouseSearchBtnClick = (e) => {\r\n        let input = typeof e === \"string\" ? e : document.getElementById(\"mouseSearchInput\").value;\r\n        this.search(input, \"mp\");\r\n    }\r\n\r\n    humanSearchBtnClick = (e) => {\r\n        let input = typeof e === \"string\" ? e : document.getElementById(\"humanSearchInput\").value;\r\n        this.search(input, \"hpo\");\r\n    }\r\n\r\n    setexpandedMouseNodes = (nodes, ids) => {\r\n        if (Array.isArray(ids[0]))\r\n            ids = ids[0];\r\n        ids.push(nodes.id);\r\n        this.tempExpandedmouseIds = ids;\r\n        return Array.isArray(nodes.isa) ? nodes.isa.map((node) => this.setexpandedMouseNodes(node, ids)) : ids;\r\n    }\r\n    setexpandedHumanNodes = (nodes, ids) => {\r\n        if (Array.isArray(ids[0]))\r\n            ids = ids[0];\r\n        ids.push(nodes.id);\r\n        this.tempExpandedhumanIds = ids;\r\n        return Array.isArray(nodes.isa) ? nodes.isa.map((node) => this.setexpandedHumanNodes(node, ids)) : ids;\r\n    }\r\n\r\n    isLoadingRequired = (id, obj) => {\r\n        if (obj.id === id && !obj.isa) {\r\n            return true;\r\n        } else if (obj.isa) {\r\n            for (var i = 0; i < obj.isa.length; i++) {\r\n                if (this.isLoadingRequired(id, obj.isa[i]))\r\n                    return true;\r\n            }\r\n        }\r\n    }\r\n\r\n    handleMouseToggle = (event, nodeIds) => {\r\n        let tree = this.state.treeData.mouseTree;\r\n        var loadingRequired = this.isLoadingRequired(nodeIds[0], tree);\r\n        if (loadingRequired) {\r\n            this.getTermChildren(nodeIds[0], \"mouse\", \"mp\");\r\n        }\r\n        this.setState({expandedMouseNodes: nodeIds});\r\n    }\r\n\r\n    handleMouseSelect = (event, nodeIds) => {\r\n        this.setState({selectedMouseNodes: nodeIds});\r\n    }\r\n\r\n    handleHumanToggle = (event, nodeIds) => {\r\n        let tree = this.state.treeData.humanTree;\r\n        var loadingRequired = this.isLoadingRequired(nodeIds[0], tree);\r\n        if (loadingRequired) {\r\n            this.getTermChildren(nodeIds[0], \"human\", \"hpo\");\r\n        }\r\n        this.setState({expandedHumanNodes: nodeIds});\r\n    }\r\n\r\n    handleHumanSelect = (event, nodeIds) => {\r\n        this.setState({selectedHumanNodes: nodeIds});\r\n    }\r\n\r\n    scrollTrees = () => {\r\n        if (this.state.mappedMousePhenotype && this.state.isMappingPresent) {\r\n            $('#humanTree').animate({\r\n                scrollTop: $(\"#humanTree-\" + this.state.mappedHumanPhenotype.replace(\":\", \"-\")).offset().top - ($(\"#humanTree\").position().top + 90)\r\n            }, 1000);\r\n            $('#mouseTree').animate({\r\n                scrollTop: $(\"#mouseTree-\" + this.state.mappedMousePhenotype.replace(\":\", \"-\")).offset().top - ($(\"#mouseTree\").position().top + 90)\r\n            }, 1000);\r\n            this.setState({mappedMousePhenotype: null, mappedHumanPhenotype: null});\r\n        }\r\n\r\n    }\r\n\r\n    render() {\r\n        const {classes} = this.props;\r\n        const {\r\n            mouseLiveLoading,\r\n            humanLiveLoading,\r\n            loading,\r\n            mouseLiveSearchResults,\r\n            humanLiveSearchResults,\r\n            treeData,\r\n            conErrorStatus,\r\n            selectedMouseNodes,\r\n            selectedHumanNodes,\r\n            expandedMouseNodes,\r\n            expandedHumanNodes,\r\n            mappedMousePhenotype,\r\n            mappedHumanPhenotype,\r\n        } = this.state;\r\n        const mouseTree = treeData ? treeData.mouseTree : null;\r\n        const humanTree = treeData ? treeData.humanTree : null;\r\n\r\n        if (conErrorStatus)\r\n            throw new Error(\"A connection error occurred retrieving ontology trees.\");\r\n        return <div>\r\n            <ErrorBoundary>\r\n                <Grid container spacing={3}>\r\n                    <Grid item xs>\r\n                        <Paper id=\"humanTreeWrapper\" className={classes.paper}>\r\n                            <h3>Human Phenotype</h3>\r\n                            <Autocomplete\r\n                                freeSolo\r\n                                id=\"humanSearchInput\"\r\n                                className={classes.autoComplete}\r\n                                id=\"humanSearchInput\"\r\n                                onInputChange={this.retrieveLiveSearch}\r\n                                renderInput={(params) => (\r\n                                    <TextField\r\n                                        {...params}\r\n                                        label=\"Term search\"\r\n                                        variant=\"outlined\"\r\n                                        InputProps={{\r\n                                            ...params.InputProps,\r\n                                            endAdornment: (\r\n                                                <React.Fragment>\r\n                                                    {humanLiveLoading ?\r\n                                                        <CircularProgress color=\"inherit\" size={20}/> : null}\r\n                                                    {params.InputProps.endAdornment}\r\n                                                </React.Fragment>\r\n                                            ),\r\n                                        }}\r\n                                    />\r\n                                )}\r\n                                options={humanLiveSearchResults.map((option) => option.FSN)}/>\r\n\r\n                            <Button size=\"large\" color=\"primary\" variant=\"contained\" id=\"search_btn\"\r\n                                    onClick={this.humanSearchBtnClick}>Search</Button>\r\n                            {\r\n                                !humanTree ? null :\r\n                                    <OntologyTree treeID=\"humanTree\" selectedPhenotypeLabel={mappedHumanPhenotype}\r\n                                                  onBtnClick={this.humanSearchBtnClick} expanded={expandedHumanNodes}\r\n                                                  selected={selectedHumanNodes} onSelect={this.handleHumanSelect}\r\n                                                  onToggle={this.handleHumanToggle} treeData={humanTree}\r\n                                                  sourceOntology=\"HPO\" mappingOntology=\"MP\"/>\r\n                            }\r\n\r\n                        </Paper>\r\n                    </Grid>\r\n                    <Grid item xs>\r\n                        {\r\n                            this.state.isMappingPresent ?\r\n                                <PhenotypeResultBreakdown selectedPhenotype={this.state.treeData.mouseID}/>\r\n                                : null\r\n                        }\r\n                    </Grid>\r\n                    <Grid item xs>\r\n                        <Paper id=\"mouseTreeWrapper\" className={classes.paper}>\r\n                            <div className=\"ontologySearchWrapper\">\r\n                                <h3>Mammalian Phenotype</h3>\r\n                                <Autocomplete\r\n                                    freeSolo\r\n                                    className={classes.autoComplete}\r\n                                    id=\"mouseSearchInput\"\r\n                                    onInputChange={this.retrieveLiveSearch}\r\n                                    renderInput={(params) => (\r\n                                        <TextField\r\n                                            {...params}\r\n                                            label=\"Term search\"\r\n                                            variant=\"outlined\"\r\n                                            InputProps={{\r\n                                                ...params.InputProps,\r\n                                                endAdornment: (\r\n                                                    <React.Fragment>\r\n                                                        {mouseLiveLoading ?\r\n                                                            <CircularProgress color=\"inherit\" size={20}/> : null}\r\n                                                        {params.InputProps.endAdornment}\r\n                                                    </React.Fragment>\r\n                                                ),\r\n                                            }}\r\n                                        />\r\n                                    )}\r\n                                    options={mouseLiveSearchResults.map((option) => option.FSN)}/>\r\n\r\n                                <Button size=\"large\" color=\"primary\" variant=\"contained\" id=\"search_btn\"\r\n                                        onClick={this.mouseSearchBtnClick}>Search</Button>\r\n                            </div>\r\n                            <LoadingSpinner loading={loading}/>\r\n                            {!mouseTree ? null :\r\n                                <OntologyTree treeID=\"mouseTree\" selectedPhenotypeLabel={mappedMousePhenotype}\r\n                                              onBtnClick={this.mouseSearchBtnClick} expanded={expandedMouseNodes}\r\n                                              selected={selectedMouseNodes} onSelect={this.handleMouseSelect}\r\n                                              onToggle={this.handleMouseToggle} treeData={mouseTree}\r\n                                              sourceOntology=\"MP\" mappingOntology=\"HPO\"/>}\r\n                        </Paper>\r\n                    </Grid>\r\n\r\n\r\n                </Grid>\r\n            </ErrorBoundary>\r\n\r\n        </div>\r\n    }\r\n}\r\n\r\nexport default withStyles(useStyles)(OntologyHierarchy);","C:\\Users\\Thomas\\Github Repos\\GC_Mouse_Integration\\src\\OntologyHierarchy\\Components\\OntologyTree\\OntologyTree.js",["98","99","100","101"],"import {Button, Paper, withStyles} from \"@material-ui/core\";\r\nimport {fade} from \"@material-ui/core/styles\";\r\nimport {animated, useSpring} from \"react-spring/web.cjs\";\r\nimport Collapse from \"@material-ui/core/Collapse\";\r\nimport PropTypes from \"prop-types\";\r\nimport React from \"react\";\r\nimport TreeView from \"@material-ui/lab/TreeView\";\r\nimport ArrowDropDownIcon from \"@material-ui/icons/ArrowDropDown\";\r\nimport ArrowRightIcon from \"@material-ui/icons/ArrowRight\";\r\nimport LinearScaleIcon from '@material-ui/icons/LinearScale';\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\r\nimport StyledTreeItem from \"./Components/StyledTreeItem\";\r\nimport $ from \"jquery\";\r\n\r\nconst useStyles = theme => ({\r\n    root: {\r\n        marginTop: 20,\r\n        marginLeft: 5,\r\n        overflowY: \"scroll\",\r\n        height: \"70vh\",\r\n    },\r\n    highlight: {\r\n        backgroundColor: \"#a6a6ff\",\r\n    },\r\n    btn: {\r\n        marginRight: 20,\r\n    }\r\n});\r\n\r\nfunction TransitionComponent(props) {\r\n    const style = useSpring({\r\n        from: {opacity: 0, transform: 'translate3d(20px,0,0)'},\r\n        to: {opacity: props.in ? 1 : 0, transform: `translate3d(${props.in ? 0 : 20}px,0,0)`},\r\n    });\r\n    return (\r\n        <animated.div style={style}>\r\n            <Collapse {...props} />\r\n        </animated.div>\r\n    );\r\n}\r\n\r\nTransitionComponent.propTypes = {\r\n    /**\r\n     * Show the component; triggers the enter or exit states\r\n     */\r\n    in: PropTypes.bool,\r\n};\r\n\r\nclass OntologyTree extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            loading: false,\r\n            treeData: null,\r\n            expandedNodes: [''],\r\n            selectedNodes: [''],\r\n            selectedSpecies: \"Mouse\",\r\n            onToggle: null,\r\n            onSelect: null,\r\n            onBtnClick: null,\r\n            sourceOntology: \"\",\r\n            mappingOntology: \"\",\r\n            selectedPhenotypeLabel: \"\",\r\n            treeID: \"\",\r\n        };\r\n        this.tempExpandedIds = [];\r\n    }\r\n\r\n    getTreeNodes = (nodes) => {\r\n        const {classes} = this.props;\r\n        const mappingProperty = \"has\" + this.props.mappingOntology + \"Mapping\";\r\n        const btn = mappingProperty in nodes ?\r\n            <Button className={classes.btn} size=\"small\" onClick={() => this.props.onBtnClick(nodes.FSN)}\r\n                   style={{margin: 0}} color=\"primary\" variant=\"outlined\" id={nodes.id}\r\n            ><LinearScaleIcon fontSize=\"small\"/></Button> : null;\r\n        const tempChildNode = (\"hasChildren\" in nodes) && !(\"isa\" in nodes) ?\r\n            <StyledTreeItem labelText={<CircularProgress color=\"inherit\" size={15}/>}/> : null;\r\n        // let siblings = (nodes.hassibling) ? nodes.hassibling.map((node) => this.getTreeNodes(node)) : null;\r\n        return (\r\n            <StyledTreeItem id={this.props.treeID + \"-\" + nodes.id.replace(\":\", \"-\")} onLabelClick={(e) => e.preventDefault()} key={nodes.id} nodeId={nodes.id}\r\n                            labelText={nodes.FSN} labelIcon={btn}>\r\n                {Array.isArray(nodes.isa) ? nodes.isa.map((node) => this.getTreeNodes(node)) : tempChildNode}\r\n                {/*{siblings}*/}\r\n            </StyledTreeItem>\r\n        );\r\n    }\r\n\r\n    setExpandedSourceNodes = (nodes, ids) => {\r\n        if (Array.isArray(ids[0]))\r\n            ids = ids[0];\r\n        ids.push(nodes.id);\r\n        this.tempExpandedSourceIds = ids;\r\n        return Array.isArray(nodes.isa) ? nodes.isa.map((node) => this.setExpandedSourceNodes(node, ids)) : ids;\r\n    }\r\n\r\n\r\n    render() {\r\n        const {classes} = this.props;\r\n        const {\r\n            loading,\r\n        } = this.state;\r\n        if (this.props.treeData === null || this.props.treeData === undefined) {\r\n            throw new Error('No ontology data received.');\r\n        }\r\n        return (\r\n            <TreeView id={this.props.treeID} className={classes.root} expanded={this.props.expanded}\r\n                      selected={this.props.selected}\r\n                      defaultCollapseIcon={<ArrowDropDownIcon/>} defaultExpandIcon={<ArrowRightIcon/>}\r\n                      defaultEndIcon={<div style={{width: 24}}/>} onNodeToggle={this.props.onToggle}\r\n                      onNodeSelect={this.props.onSelect}>\r\n                {this.getTreeNodes(this.props.treeData)}\r\n            </TreeView>\r\n        );\r\n\r\n    }\r\n\r\n}\r\n\r\nexport default withStyles(useStyles)(OntologyTree);\r\n\r\n","C:\\Users\\Thomas\\Github Repos\\GC_Mouse_Integration\\src\\OntologyHierarchy\\Components\\OntologyTree\\Components\\StyledTreeItem.js",["102"],"import React from 'react';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport {withStyles} from '@material-ui/core';\r\nimport TreeItem from '@material-ui/lab/TreeItem';\r\nimport SearchIcon from '@material-ui/icons/Search';\r\n\r\nconst useTreeItemStyles = theme => ({\r\n  root: {\r\n    color: theme.palette.text.secondary,\r\n    '&:hover > $content': {\r\n      // backgroundColor: theme.palette.action.hover,\r\n    },\r\n    '&:focus > $content, &$selected > $content': {\r\n      // backgroundColor: `var(--tree-view-bg-color, ${theme.palette.grey[400]})`,\r\n      color: 'var(--tree-view-color)',\r\n    },\r\n    '&:focus > $content $label, &:hover > $content $label, &$selected > $content $label': {\r\n      // backgroundColor: theme.palette.action.hover,\r\n    },\r\n  },\r\n  content: {\r\n    color: theme.palette.text.secondary,\r\n    borderTopRightRadius: theme.spacing(2),\r\n    borderBottomRightRadius: theme.spacing(2),\r\n    paddingRight: theme.spacing(1),\r\n    fontWeight: theme.typography.fontWeightBold,\r\n    '$expanded > &': {\r\n      fontWeight: theme.typography.fontWeightRegular,\r\n    },\r\n  },\r\n  group: {\r\n    '& $content': {\r\n      // paddingLeft: theme.spacing(2),\r\n    },\r\n  },\r\n  expanded: {},\r\n  selected: {},\r\n  label: {\r\n    fontWeight: 'inherit',\r\n    color: 'inherit',\r\n      textAlign: 'left',\r\n  },\r\n});\r\n\r\nclass StyledTreeItem extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {label: \"\", color: \"\", bgColor: \"\",};\r\n    }\r\n\r\n\r\n\r\n    render() {\r\n        const {classes} = this.props;\r\n        const {labelText, labelIcon, labelInfo, color, bgColor,key, ...other} = this.props;\r\n\r\n        return (\r\n            <TreeItem\r\n                label={\r\n                    <div className={classes.label}>\r\n                        <Typography variant=\"body2\" className={classes.content} component=\"span\">\r\n                            {this.props.labelText}\r\n                        </Typography>\r\n                        <Typography variant=\"caption\" color=\"inherit\">\r\n                            {this.props.labelInfo}\r\n                        </Typography>\r\n                        <div className={classes.labelIcon} style={{float: 'right'}}>\r\n                            {labelIcon}\r\n                        </div>\r\n                    </div>\r\n                }\r\n                style={{\r\n                    '--tree-view-color': color,\r\n                    '--tree-view-bg-color': bgColor,\r\n                }}\r\n                key={this.props.key}\r\n             nodeId={this.props.nodeId}\r\n            classes={{\r\n        root: classes.root,\r\n        content: classes.content,\r\n        expanded: classes.expanded,\r\n        selected: classes.selected,\r\n        group: classes.group,\r\n        label: classes.label,\r\n            }}\r\n                {...other}\r\n            />\r\n        );\r\n    }\r\n}\r\nexport default withStyles(useTreeItemStyles)(StyledTreeItem);\r\n\r\n","C:\\Users\\Thomas\\Github Repos\\GC_Mouse_Integration\\src\\Genome\\Genome.js",[],"C:\\Users\\Thomas\\Github Repos\\GC_Mouse_Integration\\src\\UtilityComponents\\TabPanel.js",["103"],"import React, {useCallback} from 'react';\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport {Box} from \"@material-ui/core\";\r\n\r\nclass TabPanel extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {};\r\n    }\r\n\r\n\r\n    render() {\r\n        const {children, value, index, ...other} = this.props;\r\n        return (\r\n            <div role=\"tabpanel\"\r\n                 hidden={value !== index}\r\n                 id={`full-width-tabpanel-${index}`}\r\n                 aria-labelledby={`full-width-tab-${index}`}\r\n                 {...other}>\r\n                {value === index && (\r\n                    <Box p={3}>\r\n                        <Typography>{children}</Typography>\r\n                    </Box>\r\n                )}\r\n            </div>\r\n        );\r\n\r\n    }\r\n}\r\n\r\n\r\nexport default TabPanel;","C:\\Users\\Thomas\\Github Repos\\GC_Mouse_Integration\\src\\UtilityComponents\\ConfigData.js",[],{"ruleId":"104","replacedBy":"105"},{"ruleId":"106","replacedBy":"107"},{"ruleId":"108","severity":1,"message":"109","line":6,"column":9,"nodeType":"110","messageId":"111","endLine":6,"endColumn":24},{"ruleId":"108","severity":1,"message":"112","line":6,"column":26,"nodeType":"110","messageId":"111","endLine":6,"endColumn":39},{"ruleId":"104","replacedBy":"105"},{"ruleId":"106","replacedBy":"107"},{"ruleId":"113","severity":1,"message":"114","line":9,"column":5,"nodeType":"110","messageId":"111","endLine":9,"endColumn":16},{"ruleId":"115","severity":1,"message":"116","line":117,"column":50,"nodeType":"117","messageId":"118","endLine":117,"endColumn":52},{"ruleId":"113","severity":1,"message":"119","line":176,"column":80,"nodeType":"110","messageId":"111","endLine":176,"endColumn":95},{"ruleId":"113","severity":1,"message":"120","line":1,"column":16,"nodeType":"110","messageId":"111","endLine":1,"endColumn":27},{"ruleId":"113","severity":1,"message":"121","line":35,"column":16,"nodeType":"110","messageId":"111","endLine":35,"endColumn":24},{"ruleId":"113","severity":1,"message":"122","line":68,"column":13,"nodeType":"110","messageId":"111","endLine":68,"endColumn":22},{"ruleId":"123","severity":1,"message":"124","line":120,"column":34,"nodeType":"110","messageId":"125","endLine":120,"endColumn":35},{"ruleId":"123","severity":1,"message":"124","line":141,"column":34,"nodeType":"110","messageId":"125","endLine":141,"endColumn":35},{"ruleId":"113","severity":1,"message":"120","line":1,"column":16,"nodeType":"110","messageId":"111","endLine":1,"endColumn":27},{"ruleId":"113","severity":1,"message":"126","line":3,"column":8,"nodeType":"110","messageId":"111","endLine":3,"endColumn":9},{"ruleId":"113","severity":1,"message":"120","line":1,"column":16,"nodeType":"110","messageId":"111","endLine":1,"endColumn":27},{"ruleId":"127","severity":1,"message":"128","line":159,"column":36,"nodeType":"129","messageId":"130","endLine":159,"endColumn":79},{"ruleId":"113","severity":1,"message":"131","line":295,"column":29,"nodeType":"110","messageId":"111","endLine":295,"endColumn":33},{"ruleId":"132","severity":1,"message":"133","line":497,"column":33,"nodeType":"134","endLine":497,"endColumn":54},{"ruleId":"113","severity":1,"message":"135","line":1,"column":17,"nodeType":"110","messageId":"111","endLine":1,"endColumn":22},{"ruleId":"113","severity":1,"message":"136","line":2,"column":9,"nodeType":"110","messageId":"111","endLine":2,"endColumn":13},{"ruleId":"113","severity":1,"message":"126","line":13,"column":8,"nodeType":"110","messageId":"111","endLine":13,"endColumn":9},{"ruleId":"113","severity":1,"message":"137","line":101,"column":13,"nodeType":"110","messageId":"111","endLine":101,"endColumn":20},{"ruleId":"113","severity":1,"message":"138","line":5,"column":8,"nodeType":"110","messageId":"111","endLine":5,"endColumn":18},{"ruleId":"113","severity":1,"message":"120","line":1,"column":16,"nodeType":"110","messageId":"111","endLine":1,"endColumn":27},"no-native-reassign",["139"],"no-negated-in-lhs",["140"],"@typescript-eslint/no-unused-vars","'TransitionGroup' is defined but never used.","Identifier","unusedVar","'CSSTransition' is defined but never used.","no-unused-vars","'DialogTitle' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'selectedSpecies' is assigned a value but never used.","'useCallback' is defined but never used.","'isZoomed' is assigned a value but never used.","'selection' is assigned a value but never used.","no-redeclare","'i' is already defined.","redeclared","'$' is defined but never used.","no-loop-func","Function declared in a loop contains unsafe references to variable(s) 'tree'.","ArrowFunctionExpression","unsafeRefs","'test' is assigned a value but never used.","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","'Paper' is defined but never used.","'fade' is defined but never used.","'loading' is assigned a value but never used.","'SearchIcon' is defined but never used.","no-global-assign","no-unsafe-negation"]