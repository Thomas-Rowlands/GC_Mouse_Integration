[{"/var/www/testing/GC_Mouse_Integration/src/index.tsx":"1","/var/www/testing/GC_Mouse_Integration/src/UtilityComponents/ErrorBoundary.js":"2","/var/www/testing/GC_Mouse_Integration/src/reportWebVitals.ts":"3","/var/www/testing/GC_Mouse_Integration/src/Home/App.tsx":"4","/var/www/testing/GC_Mouse_Integration/src/Home/Home.js":"5","/var/www/testing/GC_Mouse_Integration/src/Genome/Genome.js":"6","/var/www/testing/GC_Mouse_Integration/src/PhenotypeSearch/PhenotypeSearch.js":"7","/var/www/testing/GC_Mouse_Integration/src/OntologyHierarchy/OntologyHierarchy.js":"8","/var/www/testing/GC_Mouse_Integration/src/Home/Components/MainMenuItem.js":"9","/var/www/testing/GC_Mouse_Integration/src/UtilityComponents/ConfigData.js":"10","/var/www/testing/GC_Mouse_Integration/src/UtilityComponents/ResultTable.js":"11","/var/www/testing/GC_Mouse_Integration/src/UtilityComponents/LoadingSpinner/LoadingSpinner.js":"12","/var/www/testing/GC_Mouse_Integration/src/PhenotypeSearch/Components/PhenotypeResultBreakdown.js":"13","/var/www/testing/GC_Mouse_Integration/src/OntologyHierarchy/Components/OntologyTree/OntologyTree.js":"14","/var/www/testing/GC_Mouse_Integration/src/UtilityComponents/TabPanel.js":"15","/var/www/testing/GC_Mouse_Integration/src/OntologyHierarchy/Components/OntologyTree/Components/StyledTreeItem.js":"16"},{"size":716,"mtime":1615368326644,"results":"17","hashOfConfig":"18"},{"size":982,"mtime":1614770802348,"results":"19","hashOfConfig":"18"},{"size":425,"mtime":1611918828934,"results":"20","hashOfConfig":"18"},{"size":1172,"mtime":1615561689341,"results":"21","hashOfConfig":"18"},{"size":2306,"mtime":1618576363660,"results":"22","hashOfConfig":"18"},{"size":3701,"mtime":1617958498783,"results":"23","hashOfConfig":"18"},{"size":11503,"mtime":1618563250164,"results":"24","hashOfConfig":"18"},{"size":27507,"mtime":1619773899228,"results":"25","hashOfConfig":"18"},{"size":1526,"mtime":1617194213941,"results":"26","hashOfConfig":"18"},{"size":91,"mtime":1617194213969,"results":"27","hashOfConfig":"18"},{"size":3501,"mtime":1618399521382,"results":"28","hashOfConfig":"18"},{"size":1248,"mtime":1614770802348,"results":"29","hashOfConfig":"18"},{"size":17655,"mtime":1619788820200,"results":"30","hashOfConfig":"18"},{"size":4369,"mtime":1619176556728,"results":"31","hashOfConfig":"18"},{"size":812,"mtime":1617194213973,"results":"32","hashOfConfig":"18"},{"size":2825,"mtime":1617194213941,"results":"33","hashOfConfig":"18"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},"751hkj",{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"36"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"39"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"54","messages":"55","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"39"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"39"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"39"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"67","messages":"68","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"39"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"39"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"39"},"/var/www/testing/GC_Mouse_Integration/src/index.tsx",[],["76","77"],"/var/www/testing/GC_Mouse_Integration/src/UtilityComponents/ErrorBoundary.js",[],["78","79"],"/var/www/testing/GC_Mouse_Integration/src/reportWebVitals.ts",[],"/var/www/testing/GC_Mouse_Integration/src/Home/App.tsx",["80","81"],"import React from 'react';\nimport './App.css';\n// @ts-ignore\nimport Home from \"./Home.js\";\n// @ts-ignore\nimport {TransitionGroup, CSSTransition} from \"react-transition-group\";\n// @ts-ignore\nimport {HashRouter, Route, Switch} from \"react-router-dom\";\nimport PhenotypeSearch from \"../PhenotypeSearch/PhenotypeSearch\";\nimport OntologyHierarchy from \"../OntologyHierarchy/OntologyHierarchy\";\nimport Genome from \"../Genome/Genome\";\n\nfunction App() {\n    return (<div className=\"App\">\n            <header className=\"App-header\">\n            </header>\n            <HashRouter>\n                <Switch>\n                    <Route exact path=\"/\">\n                        <Home/>\n                    </Route>\n                    <Route exact path=\"/PhenotypeSearch\">\n                        <PhenotypeSearch/>\n                    </Route>\n                    <Route exact path=\"/OntologyHierarchy\">\n                        <OntologyHierarchy/>\n                    </Route>\n                    <Route exact path=\"/Genome\">\n                        <Genome/>\n                    </Route>\n                </Switch>\n            </HashRouter>\n        </div>\n    );\n}\n\nexport default App;\n","/var/www/testing/GC_Mouse_Integration/src/Home/Home.js",[],"/var/www/testing/GC_Mouse_Integration/src/Genome/Genome.js",[],"/var/www/testing/GC_Mouse_Integration/src/PhenotypeSearch/PhenotypeSearch.js",["82","83"],"import React from 'react';\nimport './PhenotypeSearch.css';\nimport $ from 'jquery';\nimport {\n    Button,\n    Dialog,\n    DialogActions,\n    DialogContent,\n    FormControl,\n    FormControlLabel,\n    InputLabel,\n    MenuItem,\n    Radio,\n    RadioGroup,\n    Select,\n    TextField,\n    withStyles\n} from '@material-ui/core';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport CircularProgress from '@material-ui/core/CircularProgress'\nimport ResultTable from \"../UtilityComponents/ResultTable\";\nimport PhenotypeResultBreakdown from \"./Components/PhenotypeResultBreakdown\";\nimport axios from \"axios\";\nimport LoadingSpinner from \"../UtilityComponents/LoadingSpinner/LoadingSpinner\";\nimport api_server from \"../UtilityComponents/ConfigData\";\n\nconst useStyles = theme => ({\n    formControl: {\n        margin: theme.spacing(1),\n        minWidth: 120,\n    },\n    selectEmpty: {\n        marginTop: theme.spacing(2),\n    },\n    autoComplete: {\n        width: \"50%\",\n        marginLeft: \"auto\",\n        marginRight: \"auto\",\n    },\n    radio: {\n        width: \"50%\",\n        marginLeft: \"auto\",\n        marginRight: \"auto\"\n    },\n});\n\n\nclass PhenotypeSearch extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            selectedSpecies: \"Mouse\",\n            loading: false,\n            tableData: null,\n            liveSearchResults: [],\n            selectedPhenotype: null,\n            searchOpen: true,\n            breakdownData: null,\n            humanPval: 0,\n            mousePval: 0,\n            searchInput: \"\",\n            configData: api_server,\n        };\n        this.page_num = 1;\n        this.liveCancelToken = null;\n    }\n\n    componentDidMount() {\n\n    }\n\n    getPreviousResults = () => {\n        if (this.page_num > 1) {\n            this.page_num -= 1;\n            this.search();\n        }\n    }\n\n    humanPValChanged = (e) => {\n        this.setState({humanPval: e.target.value});\n    }\n\n    mousePValChanged = (e) => {\n        this.setState({mousePval: e.target.value});\n    }\n\n    getNextResults = () => {\n        this.page_num += 1;\n        this.search();\n    }\n\n    searchRowClicked = (row) => {\n        let selection = $(row.target).attr(\"data-id\");\n        this.setState({selectedPhenotype: selection, searchOpen: false});\n    }\n\n    retrieveLiveSearch = (e, x) => {\n        let input = x;\n        if (this.liveCancelToken)\n            this.liveCancelToken.cancel();\n        this.setState({searchInput: input});\n        if (input.length < 1) {\n            $(\"#live-search\").hide();\n            this.setState({liveLoading: false, liveSearchResults: [], inputErrorText: \"Input cannot be empty.\"});\n            return;\n        }\n        this.liveCancelToken = axios.CancelToken.source();\n        this.setState({liveLoading: true});\n        let url_string = this.state.configData.api_server + \"livesearch.php?entry=\" + encodeURIComponent(input) + \"&species=\" + this.state.selectedSpecies;\n        if (input.length > 0) {\n            axios.get(url_string, {cancelToken: this.liveCancelToken.token})\n                .then((response) => {\n                    if (response.status === 200) {\n                        if (response.data.length == 0) {\n                            this.setState({liveSearchResults: [], liveLoading: false});\n                        } else {\n                            this.setState({liveSearchResults: response.data, liveLoading: false});\n                        }\n                    }\n                })\n                .catch((error) => {\n                    console.log(\"An error occurred retrieving live search results.\");\n                });\n        }\n    }\n\n    search = () => {\n        this.setState({loading: true});\n        let search_input = this.state.searchInput;\n        let human_pval = this.state.humanPval;\n        let mouse_pval = this.state.mousePval;\n\n        let url_string = this.state.configData.api_server + \"/controller.php?type=study&search=\" + encodeURIComponent(search_input) + \"&page=\" + this.page_num + \"&human_pval=\" + human_pval + \"&mouse_pval=\" + mouse_pval + \"&species=\" + this.state.selectedSpecies;\n        axios.get(url_string)\n            .then((response) => {\n                if (response.status === 200) {\n                    if (response.data) {\n                        var result_total = response.data[1];\n                        if (result_total > 0) {\n                            this.setState({tableData: response.data[0], loading: false, searchOpen: true});\n                        } else {\n                            this.setState({tableData: \"No results found.\", loading: false, searchOpen: true});\n                        }\n                    } else {\n                        this.setState({loading: false, searchOpen: true, tableData: null});\n                    }\n                }\n            })\n            .catch((error) => {\n                this.setState({loading: false, searchOpen: true, tableData: null});\n                console.log(\"An error occurred searching for phenotype results.\");\n            });\n    }\n\n    searchClick = () => {\n        this.page_num = 1;\n        this.search();\n    }\n\n    speciesRadioChanged = (e) => {\n        this.setState({selectedSpecies: e.target.value});\n    }\n\n    displayTable = (tableData) => {\n        if (tableData === \"No results found.\")\n            return <p className=\"center\"><br/>{tableData}</p>\n        else\n            return <ResultTable tableData={tableData} onRowClick={this.searchRowClicked}/>\n\n    }\n\n    render() {\n        const {tableData, liveSearchResults, liveLoading, loading, searchOpen, selectedSpecies} = this.state;\n        const {classes} = this.props;\n        return (<div className=\"PhenotypeSearch\">\n                <LoadingSpinner loading={loading}/>\n                <div className=\"searchResultsContainer\">\n                    {/* Orthology Selection */}\n                    <div className=\"orthology-menu\">\n                        <h4>Comparative data on human-mouse orthologues.</h4>\n                        <Autocomplete\n                            freeSolo\n                            className={classes.autoComplete}\n                            onInputChange={this.retrieveLiveSearch}\n                            renderInput={(params) => (\n                                <TextField\n                                    {...params}\n                                    label=\"Phenotype search\"\n                                    variant=\"outlined\"\n                                    errorText={this.state.inputErrorText}\n                                    InputProps={{\n                                        ...params.InputProps,\n                                        endAdornment: (\n                                            <React.Fragment>\n                                                {liveLoading ? <CircularProgress color=\"inherit\" size={20}/> : null}\n                                                {params.InputProps.endAdornment}\n                                            </React.Fragment>\n                                        ),\n                                    }}\n                                />\n                            )}\n                            options={liveSearchResults.map((option) => option.FSN)}/>\n                        <RadioGroup row className={classes.radio} name=\"speciesRadio\" value={this.state.selectedSpecies}\n                                    onChange={this.speciesRadioChanged}>\n                            <FormControlLabel value=\"Human\" label=\"Human\" control={<Radio/>} id=\"human-radio\"/>\n                            <FormControlLabel value=\"Mouse\" label=\"Mouse\" control={<Radio/>} id=\"mouse-radio\"/>\n                        </RadioGroup>\n                        <FormControl className={classes.formControl} onchange={this.humanPValChanged}>\n                            <InputLabel shrink>Human P-value</InputLabel>\n                            <Select value={this.state.humanPval} className={classes.selectEmpty} id=\"human_pval_select\"\n                                    onChange={this.humanPValChanged}>\n                                <MenuItem value={0}>0</MenuItem>\n                                <MenuItem value={1}>1</MenuItem>\n                                <MenuItem value={2}>2</MenuItem>\n                                <MenuItem value={3}>3</MenuItem>\n                                <MenuItem value={4}>4</MenuItem>\n                                <MenuItem value={5}>5</MenuItem>\n                                <MenuItem value={6}>6</MenuItem>\n                                <MenuItem value={7}>7</MenuItem>\n                                <MenuItem value={8}>8</MenuItem>\n                                <MenuItem value={9}>9</MenuItem>\n                                <MenuItem value={10}>10</MenuItem>\n                            </Select>\n                        </FormControl>\n                        <FormControl className={classes.formControl}>\n                            <InputLabel shrink>Mouse P-value</InputLabel>\n                            <Select value={this.state.mousePval} className={classes.selectEmpty} id=\"select\"\n                                    onChange={this.mousePValChanged}>\n                                <MenuItem value={0}>0</MenuItem>\n                                <MenuItem value={1}>1</MenuItem>\n                                <MenuItem value={2}>2</MenuItem>\n                                <MenuItem value={3}>3</MenuItem>\n                                <MenuItem value={4}>4</MenuItem>\n                                <MenuItem value={5}>5</MenuItem>\n                                <MenuItem value={6}>6</MenuItem>\n                                <MenuItem value={7}>7</MenuItem>\n                                <MenuItem value={8}>8</MenuItem>\n                                <MenuItem value={9}>9</MenuItem>\n                                <MenuItem value={1}>10</MenuItem>\n                            </Select>\n                        </FormControl>\n                        <div className=\"input-group-inline\">\n                            <Button size=\"large\" color=\"primary\" variant=\"contained\" id=\"search_btn\"\n                                    onClick={this.searchClick}>Search</Button>\n                        </div>\n                    </div>\n                    <div className=\"table-container\">\n                        {tableData ? this.displayTable(tableData) : null}\n                    </div>\n\n\n                </div>\n                {/*Phenotype selection results drill down*/\n                }\n                <Dialog\n                    fullWidth={true}\n                    maxWidth=\"lg\"\n                    open={!searchOpen}\n                    aria-labelledby=\"max-width-dialog-title\"\n                >\n                    <DialogContent>\n\n                        <div className=\"table-container\">\n                            <PhenotypeResultBreakdown selectedPhenotype={this.state.selectedPhenotype}\n                                                      breakdownData={this.state.breakdownData}/>\n                        </div>\n                    </DialogContent>\n                    <DialogActions>\n                        <Button onClick={() => this.setState({searchOpen: true})} color=\"primary\">\n                            Close\n                        </Button>\n                    </DialogActions>\n                </Dialog>\n            </div>\n        )\n            ;\n    }\n}\n\nexport default withStyles(useStyles)(PhenotypeSearch);","/var/www/testing/GC_Mouse_Integration/src/OntologyHierarchy/OntologyHierarchy.js",["84","85"],"/var/www/testing/GC_Mouse_Integration/src/Home/Components/MainMenuItem.js",["86","87"],"import React, {useCallback} from 'react';\nimport {Paper, withStyles} from \"@material-ui/core\";\nimport './MainMenuItem.css';\nimport Typography from \"@material-ui/core/Typography\";\n\nconst useStyles = theme => ({\n    paper: {\n        padding: theme.spacing(2),\n        textAlign: 'center',\n        color: theme.palette.text.secondary,\n        height: 500,\n        zIndex: 1,\n        position: 'relative'\n    },\n    img: {\n        width: 100,\n    },\n    text: {\n        textDecoration: 'none',\n    }\n});\n\nclass MainMenuItem extends React.Component {\n\n    state = {isZoomed: false};\n\n    toggle = () => {\n        this.setState({\n            isZoomed: !this.state.isZoomed\n        });\n    }\n\n    render() {\n        const {classes} = this.props;\n        const {isZoomed} = this.state;\n\n        return (\n            <Paper style={{transform: this.state.isZoomed ? 'scale(1.1)' : 'scale(1)',\n                transition: this.state.isZoomed ? '0.3s' :  '0.3s', zIndex: this.state.isZoomed ? 99 :  1}}\n                   onMouseEnter={() => this.toggle()}\n                   onMouseLeave={() => this.toggle()} className={classes.paper}>\n                <img className={classes.img} src={this.props.image} alt={this.props.alt}/>\n                <Typography className={classes.text} variant='h5' gutterBottom>{this.props.heading}</Typography>\n                <Typography className={classes.text} variant='body1' gutterBottom>{this.props.body}</Typography>\n            </Paper>);\n    }\n}\n\nexport default withStyles(useStyles)(MainMenuItem);","/var/www/testing/GC_Mouse_Integration/src/UtilityComponents/ConfigData.js",[],"/var/www/testing/GC_Mouse_Integration/src/UtilityComponents/ResultTable.js",["88","89"],"import React, {useCallback} from 'react';\nimport './ResultTable.css';\nimport $ from 'jquery';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\nimport {TablePagination} from \"@material-ui/core\";\n\nclass ResultTable extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {tableData: {}, onRowClick: null, rowsPerPage:5, page:0};\n    }\n\n    handleChangePage = (event, newPage) => {\n        this.setState({page: newPage});\n    }\n\n    handleChangeRowsPerPage = (event) => {\n        this.setState({rowsPerPage: parseInt(event.target.value, 10), page: 0});\n    }\n\n    render() {\n        if (typeof this.props.tableData != \"undefined\" && this.props.tableData !== null)\n            if (this.props.tableData.length > 0) {\n                return (<div className=\"container\">\n                        <TableContainer component={Paper} className=\"info\" id=\"searchResults\">\n                            <Table size=\"small\" aria-label=\"a dense table\">\n                                <TableHead>\n                                    <TableRow>\n                                        {Object.keys(this.props.tableData[0]).map((header, index) => {\n                                            return (<TableCell align=\"center\" key={index}>{header}</TableCell>)\n                                        })}\n                                    </TableRow>\n                                </TableHead>\n                                <TableBody>\n                                    {this.props.tableData.slice(this.state.page * this.state.rowsPerPage,\n                                        this.state.page * this.state.rowsPerPage + this.state.rowsPerPage).map((row, index) => {\n                                        return (\n                                            <TableRow data-id={row[\"ID\"]} key={index} onClick={this.props.onRowClick}>\n                                                {Object.keys(row).map((key) => {\n                                                    return (<TableCell align=\"left\"\n                                                                       data-id={row[\"MP ID\"]}>{row[key]}</TableCell>)\n                                                })}\n                                            </TableRow>)\n                                    })}\n                                </TableBody>\n                            </Table>\n                        </TableContainer>\n                        <TablePagination\n                            rowsPerPageOptions={[5, 10, 25]}\n                            component=\"div\"\n                            count={this.props.tableData.length}\n                            rowsPerPage={this.state.rowsPerPage}\n                            page={this.state.page}\n                            onChangePage={this.handleChangePage}\n                            onChangeRowsPerPage={this.handleChangeRowsPerPage}\n                        />\n                    </div>\n                );\n            } else {\n                return (\n                    <span className=\"center\">No results found.</span>\n                );\n            }\n        else\n            return null;\n\n    }\n}\n\n\nexport default ResultTable;","/var/www/testing/GC_Mouse_Integration/src/UtilityComponents/LoadingSpinner/LoadingSpinner.js",["90"],"import React, {useCallback} from 'react';\nimport './LoadingSpinner.css';\n\nclass LoadingSpinner extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {loading: false};\n    }\n\n    render() {\n        if (this.props.loading)\n            return (\n                <div className=\"loading-container\">\n                    <div className=\"loading\">\n                        <div className=\"loader\">\n                            <div></div>\n                            <div></div>\n                            <div></div>\n                            <div></div>\n                            <div></div>\n                            <div></div>\n                            <div></div>\n                            <div></div>\n                            <div></div>\n                            <div></div>\n                            <div></div>\n                            <div></div>\n                            <div></div>\n                            <div></div>\n                            <div></div>\n                        </div>\n                        <h4>Loading...</h4>\n                    </div>\n                </div>\n            );\n        else\n            return (null);\n    }\n}\n\nexport default LoadingSpinner;","/var/www/testing/GC_Mouse_Integration/src/PhenotypeSearch/Components/PhenotypeResultBreakdown.js",["91","92","93"],"/var/www/testing/GC_Mouse_Integration/src/OntologyHierarchy/Components/OntologyTree/OntologyTree.js",["94","95","96"],"import {Button, Paper, withStyles} from \"@material-ui/core\";\nimport {fade} from \"@material-ui/core/styles\";\nimport {animated, useSpring} from \"react-spring/web.cjs\";\nimport Collapse from \"@material-ui/core/Collapse\";\nimport PropTypes from \"prop-types\";\nimport React from \"react\";\nimport TreeView from \"@material-ui/lab/TreeView\";\nimport ArrowDropDownIcon from \"@material-ui/icons/ArrowDropDown\";\nimport ArrowRightIcon from \"@material-ui/icons/ArrowRight\";\nimport LinearScaleIcon from '@material-ui/icons/LinearScale';\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\nimport StyledTreeItem from \"./Components/StyledTreeItem\";\nimport _ from 'lodash';\n\nconst useStyles = theme => ({\n    root: {\n        marginTop: 20,\n        marginLeft: 5,\n        overflowY: \"scroll\",\n        height: \"75vh\",\n    },\n    highlight: {\n        backgroundColor: \"#a6a6ff\",\n    },\n    btn: {\n        marginRight: 20,\n    }\n});\n\nfunction TransitionComponent(props) {\n    const style = useSpring({\n        from: {opacity: 0, transform: 'translate3d(20px,0,0)'},\n        to: {opacity: props.in ? 1 : 0, transform: `translate3d(${props.in ? 0 : 20}px,0,0)`},\n    });\n    return (\n        <animated.div style={style}>\n            <Collapse {...props} />\n        </animated.div>\n    );\n}\n\nTransitionComponent.propTypes = {\n    /**\n     * Show the component; triggers the enter or exit states\n     */\n    in: PropTypes.bool,\n};\n\nclass OntologyTree extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            loading: false,\n            treeData: null,\n            expandedNodes: [''],\n            selectedNodes: [''],\n            selectedSpecies: \"Mouse\",\n            nodes: [],\n            treeOntology: \"\",\n            onToggle: null,\n            onSelect: null,\n            onBtnClick: null,\n            sourceOntology: \"\",\n            mappingOntology: \"\",\n            selectedPhenotypeLabel: \"\",\n            treeID: \"\",\n        };\n        this.tempExpandedIds = [];\n        this.usedIDs = [];\n    }\n\n    getTreeNodes = (nodes) => {\n        const {classes} = this.props;\n        const btn = nodes.hasMapping ?\n            <Button className={classes.btn} size=\"small\" onClick={() => this.props.onBtnClick(nodes.label)}\n                   style={{margin: 0}} color=\"primary\" variant=\"outlined\" id={nodes.id}\n            ><LinearScaleIcon fontSize=\"small\"/></Button> : null;\n        const tempChildNode = (nodes.hasChildren === true) && (_.isEmpty(nodes.children)) ?\n            <StyledTreeItem labelText={<CircularProgress color=\"inherit\" size={15}/>}/> : null;\n        if (!_.isEmpty(nodes.children)) {\n            nodes.children = _.orderBy(nodes.children, ['label'], ['asc']); // all nodes must be sorted alphabetically!\n        }\n        return (\n            <StyledTreeItem id={this.props.treeID + \"-\" + nodes.id.replace(\":\", \"-\")} onLabelClick={(e) => e.preventDefault()} key={nodes.id} nodeId={nodes.id}\n                            labelText={nodes.label} labelIcon={btn}>\n                {!_.isEmpty(nodes.children) ? Object.keys(nodes.children).map((key, index) => this.getTreeNodes(nodes.children[key])) : tempChildNode}\n            </StyledTreeItem>\n        );\n    }\n\n    setExpandedSourceNodes = (nodes, ids) => {\n        if (Array.isArray(ids[0]))\n            ids = ids[0];\n        ids.push(nodes.id);\n        this.tempExpandedSourceIds = ids;\n        return Array.isArray(nodes.isa) ? nodes.isa.map((node) => this.setExpandedSourceNodes(node, ids)) : ids;\n    }\n\n\n    render() {\n        const {classes} = this.props;\n        const {\n            loading,\n        } = this.state;\n        if (this.props.treeData === null || this.props.treeData === undefined) {\n            throw new Error('No ontology data received.');\n        }\n        return (\n            <TreeView id={this.props.treeID} className={classes.root} expanded={this.props.expanded}\n                      selected={this.props.selected}\n                      defaultCollapseIcon={<ArrowDropDownIcon/>} defaultExpandIcon={<ArrowRightIcon/>}\n                      defaultEndIcon={<div style={{width: 24}}/>} onNodeToggle={this.props.onToggle}\n                      onNodeSelect={this.props.onSelect}>\n                {this.getTreeNodes(this.props.treeData)}\n            </TreeView>\n        );\n\n    }\n\n}\n\nexport default withStyles(useStyles)(OntologyTree);\n\n","/var/www/testing/GC_Mouse_Integration/src/UtilityComponents/TabPanel.js",["97"],"import React, {useCallback} from 'react';\nimport Typography from \"@material-ui/core/Typography\";\nimport {Box} from \"@material-ui/core\";\n\nclass TabPanel extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {};\n    }\n\n\n    render() {\n        const {children, value, index, ...other} = this.props;\n        return (\n            <div role=\"tabpanel\"\n                 hidden={value !== index}\n                 id={`full-width-tabpanel-${index}`}\n                 aria-labelledby={`full-width-tab-${index}`}\n                 {...other}>\n                {value === index && (\n                    <Box p={3}>\n                        <Typography>{children}</Typography>\n                    </Box>\n                )}\n            </div>\n        );\n\n    }\n}\n\n\nexport default TabPanel;","/var/www/testing/GC_Mouse_Integration/src/OntologyHierarchy/Components/OntologyTree/Components/StyledTreeItem.js",["98"],"import React from 'react';\nimport Typography from '@material-ui/core/Typography';\nimport {withStyles} from '@material-ui/core';\nimport TreeItem from '@material-ui/lab/TreeItem';\nimport SearchIcon from '@material-ui/icons/Search';\n\nconst useTreeItemStyles = theme => ({\n  root: {\n    color: theme.palette.text.secondary,\n    '&:hover > $content': {\n      // backgroundColor: theme.palette.action.hover,\n    },\n    '&:focus > $content, &$selected > $content': {\n      // backgroundColor: `var(--tree-view-bg-color, ${theme.palette.grey[400]})`,\n      color: 'var(--tree-view-color)',\n    },\n    '&:focus > $content $label, &:hover > $content $label, &$selected > $content $label': {\n      // backgroundColor: theme.palette.action.hover,\n    },\n  },\n  content: {\n    color: theme.palette.text.secondary,\n    borderTopRightRadius: theme.spacing(2),\n    borderBottomRightRadius: theme.spacing(2),\n    paddingRight: theme.spacing(1),\n    fontWeight: theme.typography.fontWeightBold,\n    '$expanded > &': {\n      fontWeight: theme.typography.fontWeightRegular,\n    },\n  },\n  group: {\n    '& $content': {\n      // paddingLeft: theme.spacing(2),\n    },\n  },\n  expanded: {},\n  selected: {},\n  label: {\n    fontWeight: 'inherit',\n    color: 'inherit',\n      textAlign: 'left',\n  },\n});\n\nclass StyledTreeItem extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {label: \"\", color: \"\", bgColor: \"\",};\n    }\n\n\n\n    render() {\n        const {classes} = this.props;\n        const {labelText, labelIcon, labelInfo, color, bgColor,key, ...other} = this.props;\n\n        return (\n            <TreeItem\n                label={\n                    <div className={classes.label}>\n                        <Typography variant=\"body2\" className={classes.content} component=\"span\">\n                            {this.props.labelText}\n                        </Typography>\n                        <Typography variant=\"caption\" color=\"inherit\">\n                            {this.props.labelInfo}\n                        </Typography>\n                        <div className={classes.labelIcon} style={{float: 'right'}}>\n                            {labelIcon}\n                        </div>\n                    </div>\n                }\n                style={{\n                    '--tree-view-color': color,\n                    '--tree-view-bg-color': bgColor,\n                }}\n                key={this.props.key}\n             nodeId={this.props.nodeId}\n            classes={{\n        root: classes.root,\n        content: classes.content,\n        expanded: classes.expanded,\n        selected: classes.selected,\n        group: classes.group,\n        label: classes.label,\n            }}\n                {...other}\n            />\n        );\n    }\n}\nexport default withStyles(useTreeItemStyles)(StyledTreeItem);\n\n",{"ruleId":"99","replacedBy":"100"},{"ruleId":"101","replacedBy":"102"},{"ruleId":"99","replacedBy":"100"},{"ruleId":"101","replacedBy":"102"},{"ruleId":"103","severity":1,"message":"104","line":6,"column":9,"nodeType":"105","messageId":"106","endLine":6,"endColumn":24},{"ruleId":"103","severity":1,"message":"107","line":6,"column":26,"nodeType":"105","messageId":"106","endLine":6,"endColumn":39},{"ruleId":"108","severity":1,"message":"109","line":115,"column":50,"nodeType":"110","messageId":"111","endLine":115,"endColumn":52},{"ruleId":"112","severity":1,"message":"113","line":174,"column":80,"nodeType":"105","messageId":"106","endLine":174,"endColumn":95},{"ruleId":"112","severity":1,"message":"114","line":519,"column":13,"nodeType":"105","messageId":"106","endLine":519,"endColumn":35},{"ruleId":"115","severity":1,"message":"116","line":548,"column":33,"nodeType":"117","endLine":548,"endColumn":54},{"ruleId":"112","severity":1,"message":"118","line":1,"column":16,"nodeType":"105","messageId":"106","endLine":1,"endColumn":27},{"ruleId":"112","severity":1,"message":"119","line":35,"column":16,"nodeType":"105","messageId":"106","endLine":35,"endColumn":24},{"ruleId":"112","severity":1,"message":"118","line":1,"column":16,"nodeType":"105","messageId":"106","endLine":1,"endColumn":27},{"ruleId":"112","severity":1,"message":"120","line":3,"column":8,"nodeType":"105","messageId":"106","endLine":3,"endColumn":9},{"ruleId":"112","severity":1,"message":"118","line":1,"column":16,"nodeType":"105","messageId":"106","endLine":1,"endColumn":27},{"ruleId":"112","severity":1,"message":"121","line":71,"column":13,"nodeType":"105","messageId":"106","endLine":71,"endColumn":22},{"ruleId":"122","severity":1,"message":"123","line":126,"column":34,"nodeType":"105","messageId":"124","endLine":126,"endColumn":35},{"ruleId":"122","severity":1,"message":"123","line":147,"column":34,"nodeType":"105","messageId":"124","endLine":147,"endColumn":35},{"ruleId":"112","severity":1,"message":"125","line":1,"column":17,"nodeType":"105","messageId":"106","endLine":1,"endColumn":22},{"ruleId":"112","severity":1,"message":"126","line":2,"column":9,"nodeType":"105","messageId":"106","endLine":2,"endColumn":13},{"ruleId":"112","severity":1,"message":"127","line":104,"column":13,"nodeType":"105","messageId":"106","endLine":104,"endColumn":20},{"ruleId":"112","severity":1,"message":"118","line":1,"column":16,"nodeType":"105","messageId":"106","endLine":1,"endColumn":27},{"ruleId":"112","severity":1,"message":"128","line":5,"column":8,"nodeType":"105","messageId":"106","endLine":5,"endColumn":18},"no-native-reassign",["129"],"no-negated-in-lhs",["130"],"@typescript-eslint/no-unused-vars","'TransitionGroup' is defined but never used.","Identifier","unusedVar","'CSSTransition' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-unused-vars","'selectedSpecies' is assigned a value but never used.","'humanLiveSearchResults' is assigned a value but never used.","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","'useCallback' is defined but never used.","'isZoomed' is assigned a value but never used.","'$' is defined but never used.","'selection' is assigned a value but never used.","no-redeclare","'i' is already defined.","redeclared","'Paper' is defined but never used.","'fade' is defined but never used.","'loading' is assigned a value but never used.","'SearchIcon' is defined but never used.","no-global-assign","no-unsafe-negation"]