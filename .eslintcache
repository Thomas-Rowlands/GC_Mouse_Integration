[{"/var/www/testing/GC_Mouse_Integration/src/index.tsx":"1","/var/www/testing/GC_Mouse_Integration/src/UtilityComponents/ErrorBoundary.js":"2","/var/www/testing/GC_Mouse_Integration/src/reportWebVitals.ts":"3","/var/www/testing/GC_Mouse_Integration/src/Home/App.tsx":"4","/var/www/testing/GC_Mouse_Integration/src/Home/Home.js":"5","/var/www/testing/GC_Mouse_Integration/src/Genome/Genome.js":"6","/var/www/testing/GC_Mouse_Integration/src/OntologyHierarchy/OntologyHierarchy.js":"7","/var/www/testing/GC_Mouse_Integration/src/PhenotypeSearch/PhenotypeSearch.js":"8","/var/www/testing/GC_Mouse_Integration/src/Home/Components/MainMenuItem.js":"9","/var/www/testing/GC_Mouse_Integration/src/UtilityComponents/ResultTable.js":"10","/var/www/testing/GC_Mouse_Integration/src/UtilityComponents/LoadingSpinner/LoadingSpinner.js":"11","/var/www/testing/GC_Mouse_Integration/src/OntologyHierarchy/Components/OntologyTree/OntologyTree.js":"12","/var/www/testing/GC_Mouse_Integration/src/OntologyHierarchy/Components/OntologyTree/Components/StyledTreeItem.js":"13","/var/www/testing/GC_Mouse_Integration/src/PhenotypeSearch/Components/PhenotypeResultBreakdown.js":"14","/var/www/testing/GC_Mouse_Integration/src/UtilityComponents/ConfigData.js":"15","/var/www/testing/GC_Mouse_Integration/src/UtilityComponents/TabPanel.js":"16"},{"size":716,"mtime":1615368326644,"results":"17","hashOfConfig":"18"},{"size":982,"mtime":1614770802348,"results":"19","hashOfConfig":"18"},{"size":425,"mtime":1611918828934,"results":"20","hashOfConfig":"18"},{"size":1172,"mtime":1615561689341,"results":"21","hashOfConfig":"18"},{"size":2306,"mtime":1618576363660,"results":"22","hashOfConfig":"18"},{"size":3701,"mtime":1617958498783,"results":"23","hashOfConfig":"18"},{"size":24200,"mtime":1618575737589,"results":"24","hashOfConfig":"18"},{"size":11503,"mtime":1618563250164,"results":"25","hashOfConfig":"18"},{"size":1526,"mtime":1617194213941,"results":"26","hashOfConfig":"18"},{"size":3501,"mtime":1618399521382,"results":"27","hashOfConfig":"18"},{"size":1248,"mtime":1614770802348,"results":"28","hashOfConfig":"18"},{"size":4324,"mtime":1618582423465,"results":"29","hashOfConfig":"18"},{"size":2825,"mtime":1617194213941,"results":"30","hashOfConfig":"18"},{"size":15483,"mtime":1618399521354,"results":"31","hashOfConfig":"18"},{"size":91,"mtime":1617194213969,"results":"32","hashOfConfig":"18"},{"size":812,"mtime":1617194213973,"results":"33","hashOfConfig":"18"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},"751hkj",{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"36"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"51","messages":"52","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"53","messages":"54","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"39"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"39"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"39"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"64","messages":"65","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"39"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"39"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"39"},"/var/www/testing/GC_Mouse_Integration/src/index.tsx",[],["75","76"],"/var/www/testing/GC_Mouse_Integration/src/UtilityComponents/ErrorBoundary.js",[],["77","78"],"/var/www/testing/GC_Mouse_Integration/src/reportWebVitals.ts",[],"/var/www/testing/GC_Mouse_Integration/src/Home/App.tsx",["79","80"],"import React from 'react';\nimport './App.css';\n// @ts-ignore\nimport Home from \"./Home.js\";\n// @ts-ignore\nimport {TransitionGroup, CSSTransition} from \"react-transition-group\";\n// @ts-ignore\nimport {HashRouter, Route, Switch} from \"react-router-dom\";\nimport PhenotypeSearch from \"../PhenotypeSearch/PhenotypeSearch\";\nimport OntologyHierarchy from \"../OntologyHierarchy/OntologyHierarchy\";\nimport Genome from \"../Genome/Genome\";\n\nfunction App() {\n    return (<div className=\"App\">\n            <header className=\"App-header\">\n            </header>\n            <HashRouter>\n                <Switch>\n                    <Route exact path=\"/\">\n                        <Home/>\n                    </Route>\n                    <Route exact path=\"/PhenotypeSearch\">\n                        <PhenotypeSearch/>\n                    </Route>\n                    <Route exact path=\"/OntologyHierarchy\">\n                        <OntologyHierarchy/>\n                    </Route>\n                    <Route exact path=\"/Genome\">\n                        <Genome/>\n                    </Route>\n                </Switch>\n            </HashRouter>\n        </div>\n    );\n}\n\nexport default App;\n","/var/www/testing/GC_Mouse_Integration/src/Home/Home.js",[],"/var/www/testing/GC_Mouse_Integration/src/Genome/Genome.js",[],"/var/www/testing/GC_Mouse_Integration/src/OntologyHierarchy/OntologyHierarchy.js",["81","82"],"/var/www/testing/GC_Mouse_Integration/src/PhenotypeSearch/PhenotypeSearch.js",["83","84"],"/var/www/testing/GC_Mouse_Integration/src/Home/Components/MainMenuItem.js",["85","86"],"import React, {useCallback} from 'react';\nimport {Paper, withStyles} from \"@material-ui/core\";\nimport './MainMenuItem.css';\nimport Typography from \"@material-ui/core/Typography\";\n\nconst useStyles = theme => ({\n    paper: {\n        padding: theme.spacing(2),\n        textAlign: 'center',\n        color: theme.palette.text.secondary,\n        height: 500,\n        zIndex: 1,\n        position: 'relative'\n    },\n    img: {\n        width: 100,\n    },\n    text: {\n        textDecoration: 'none',\n    }\n});\n\nclass MainMenuItem extends React.Component {\n\n    state = {isZoomed: false};\n\n    toggle = () => {\n        this.setState({\n            isZoomed: !this.state.isZoomed\n        });\n    }\n\n    render() {\n        const {classes} = this.props;\n        const {isZoomed} = this.state;\n\n        return (\n            <Paper style={{transform: this.state.isZoomed ? 'scale(1.1)' : 'scale(1)',\n                transition: this.state.isZoomed ? '0.3s' :  '0.3s', zIndex: this.state.isZoomed ? 99 :  1}}\n                   onMouseEnter={() => this.toggle()}\n                   onMouseLeave={() => this.toggle()} className={classes.paper}>\n                <img className={classes.img} src={this.props.image} alt={this.props.alt}/>\n                <Typography className={classes.text} variant='h5' gutterBottom>{this.props.heading}</Typography>\n                <Typography className={classes.text} variant='body1' gutterBottom>{this.props.body}</Typography>\n            </Paper>);\n    }\n}\n\nexport default withStyles(useStyles)(MainMenuItem);","/var/www/testing/GC_Mouse_Integration/src/UtilityComponents/ResultTable.js",["87","88"],"import React, {useCallback} from 'react';\nimport './ResultTable.css';\nimport $ from 'jquery';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\nimport {TablePagination} from \"@material-ui/core\";\n\nclass ResultTable extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {tableData: {}, onRowClick: null, rowsPerPage:5, page:0};\n    }\n\n    handleChangePage = (event, newPage) => {\n        this.setState({page: newPage});\n    }\n\n    handleChangeRowsPerPage = (event) => {\n        this.setState({rowsPerPage: parseInt(event.target.value, 10), page: 0});\n    }\n\n    render() {\n        if (typeof this.props.tableData != \"undefined\" && this.props.tableData !== null)\n            if (this.props.tableData.length > 0) {\n                return (<div className=\"container\">\n                        <TableContainer component={Paper} className=\"info\" id=\"searchResults\">\n                            <Table size=\"small\" aria-label=\"a dense table\">\n                                <TableHead>\n                                    <TableRow>\n                                        {Object.keys(this.props.tableData[0]).map((header, index) => {\n                                            return (<TableCell align=\"center\" key={index}>{header}</TableCell>)\n                                        })}\n                                    </TableRow>\n                                </TableHead>\n                                <TableBody>\n                                    {this.props.tableData.slice(this.state.page * this.state.rowsPerPage,\n                                        this.state.page * this.state.rowsPerPage + this.state.rowsPerPage).map((row, index) => {\n                                        return (\n                                            <TableRow data-id={row[\"ID\"]} key={index} onClick={this.props.onRowClick}>\n                                                {Object.keys(row).map((key) => {\n                                                    return (<TableCell align=\"left\"\n                                                                       data-id={row[\"MP ID\"]}>{row[key]}</TableCell>)\n                                                })}\n                                            </TableRow>)\n                                    })}\n                                </TableBody>\n                            </Table>\n                        </TableContainer>\n                        <TablePagination\n                            rowsPerPageOptions={[5, 10, 25]}\n                            component=\"div\"\n                            count={this.props.tableData.length}\n                            rowsPerPage={this.state.rowsPerPage}\n                            page={this.state.page}\n                            onChangePage={this.handleChangePage}\n                            onChangeRowsPerPage={this.handleChangeRowsPerPage}\n                        />\n                    </div>\n                );\n            } else {\n                return (\n                    <span className=\"center\">No results found.</span>\n                );\n            }\n        else\n            return null;\n\n    }\n}\n\n\nexport default ResultTable;","/var/www/testing/GC_Mouse_Integration/src/UtilityComponents/LoadingSpinner/LoadingSpinner.js",["89"],"import React, {useCallback} from 'react';\nimport './LoadingSpinner.css';\n\nclass LoadingSpinner extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {loading: false};\n    }\n\n    render() {\n        if (this.props.loading)\n            return (\n                <div className=\"loading-container\">\n                    <div className=\"loading\">\n                        <div className=\"loader\">\n                            <div></div>\n                            <div></div>\n                            <div></div>\n                            <div></div>\n                            <div></div>\n                            <div></div>\n                            <div></div>\n                            <div></div>\n                            <div></div>\n                            <div></div>\n                            <div></div>\n                            <div></div>\n                            <div></div>\n                            <div></div>\n                            <div></div>\n                        </div>\n                        <h4>Loading...</h4>\n                    </div>\n                </div>\n            );\n        else\n            return (null);\n    }\n}\n\nexport default LoadingSpinner;","/var/www/testing/GC_Mouse_Integration/src/OntologyHierarchy/Components/OntologyTree/OntologyTree.js",["90","91","92"],"/var/www/testing/GC_Mouse_Integration/src/OntologyHierarchy/Components/OntologyTree/Components/StyledTreeItem.js",["93"],"import React from 'react';\nimport Typography from '@material-ui/core/Typography';\nimport {withStyles} from '@material-ui/core';\nimport TreeItem from '@material-ui/lab/TreeItem';\nimport SearchIcon from '@material-ui/icons/Search';\n\nconst useTreeItemStyles = theme => ({\n  root: {\n    color: theme.palette.text.secondary,\n    '&:hover > $content': {\n      // backgroundColor: theme.palette.action.hover,\n    },\n    '&:focus > $content, &$selected > $content': {\n      // backgroundColor: `var(--tree-view-bg-color, ${theme.palette.grey[400]})`,\n      color: 'var(--tree-view-color)',\n    },\n    '&:focus > $content $label, &:hover > $content $label, &$selected > $content $label': {\n      // backgroundColor: theme.palette.action.hover,\n    },\n  },\n  content: {\n    color: theme.palette.text.secondary,\n    borderTopRightRadius: theme.spacing(2),\n    borderBottomRightRadius: theme.spacing(2),\n    paddingRight: theme.spacing(1),\n    fontWeight: theme.typography.fontWeightBold,\n    '$expanded > &': {\n      fontWeight: theme.typography.fontWeightRegular,\n    },\n  },\n  group: {\n    '& $content': {\n      // paddingLeft: theme.spacing(2),\n    },\n  },\n  expanded: {},\n  selected: {},\n  label: {\n    fontWeight: 'inherit',\n    color: 'inherit',\n      textAlign: 'left',\n  },\n});\n\nclass StyledTreeItem extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {label: \"\", color: \"\", bgColor: \"\",};\n    }\n\n\n\n    render() {\n        const {classes} = this.props;\n        const {labelText, labelIcon, labelInfo, color, bgColor,key, ...other} = this.props;\n\n        return (\n            <TreeItem\n                label={\n                    <div className={classes.label}>\n                        <Typography variant=\"body2\" className={classes.content} component=\"span\">\n                            {this.props.labelText}\n                        </Typography>\n                        <Typography variant=\"caption\" color=\"inherit\">\n                            {this.props.labelInfo}\n                        </Typography>\n                        <div className={classes.labelIcon} style={{float: 'right'}}>\n                            {labelIcon}\n                        </div>\n                    </div>\n                }\n                style={{\n                    '--tree-view-color': color,\n                    '--tree-view-bg-color': bgColor,\n                }}\n                key={this.props.key}\n             nodeId={this.props.nodeId}\n            classes={{\n        root: classes.root,\n        content: classes.content,\n        expanded: classes.expanded,\n        selected: classes.selected,\n        group: classes.group,\n        label: classes.label,\n            }}\n                {...other}\n            />\n        );\n    }\n}\nexport default withStyles(useTreeItemStyles)(StyledTreeItem);\n\n","/var/www/testing/GC_Mouse_Integration/src/PhenotypeSearch/Components/PhenotypeResultBreakdown.js",["94","95","96"],"import React from \"react\";\nimport './PhenotypeResultBreakdown.css';\nimport ResultTable from \"../../UtilityComponents/ResultTable\";\nimport $ from \"jquery\";\nimport axios from \"axios\";\nimport LoadingSpinner from \"../../UtilityComponents/LoadingSpinner/LoadingSpinner\";\nimport {AppBar, Button, Grid, Paper, Tab, Tabs} from \"@material-ui/core\";\nimport TabPanel from \"../../UtilityComponents/TabPanel\";\nimport api_server from \"../../UtilityComponents/ConfigData\";\nimport {Graph} from \"react-d3-graph\";\n\nclass PhenotypeResultBreakdown extends React.Component {\n// the graph configuration, just override the ones you need\n    const\n    myConfig = {\n        nodeHighlightBehavior: true,\n        directed: false,\n        staticGraphWithDragAndDrop: true,\n          d3: {\n                alphaTarget: 0.05,\n                disableLinkForce: true\n              },\n        node: {\n            color: \"blue\",\n            size: 300,\n            highlightStrokeColor: \"black\",\n            labelProperty: \"name\",\n            labelPosition: \"bottom\",\n        },\n        link: {\n            highlightColor: \"lightblue\",\n            renderLabel: true,\n            labelProperty: \"linkType\",\n            strokeWidth: 3,\n            fontSize: 10\n        },\n    };\n\n    constructor(props) {\n        super(props);\n        this.gwasStudyClicked = this.gwasStudyClicked.bind(this);\n        this.experimentClicked = this.experimentClicked.bind(this);\n        this.state = {\n            selectedPhenotype: \"\",\n            breakdownData: null,\n            backBtnClick: null,\n            loading: true,\n            tabValue: 0,\n            dataTabValue: 0,\n            configData: api_server,\n            mappingGraphData: null,\n            mappingGraphConfig: null,\n        };\n    }\n\n    componentDidMount() {\n        this.getBreakdownData();\n    }\n\n    gwasStudyClicked(row) {\n        let studyID = $(row.currentTarget).attr(\"data-id\");\n        var win = window.open(\"https://www.gwascentral.org/study/\" + studyID, \"_blank\");\n        if (win)\n            win.focus();\n    }\n\n    experimentClicked(row) {\n        let selection = $(row.target).attr(\"data-id\");\n    }\n\n    getBreakdownData() {\n        let url_string = this.state.configData.api_server + \"controller.php?type=study&phenotypeBreakdown=&term=\" + this.props.selectedPhenotype;\n        axios.get(url_string)\n            .then((response) => {\n                if (response.status === 200) {\n                    if (response.data) {\n                        // graph payload (with minimalist structure)\n                        let humanTermCoords = [50, 214];\n                        let mouseTermCoords = [750, 214];\n                        var data = {\n                            nodes: [\n                                {\n                                    id: response.data[\"Mappings\"][\"humanID\"],\n                                    name: response.data[\"Mappings\"][\"humanLabel\"],\n                                    x: humanTermCoords[0],\n                                    y: humanTermCoords[1],\n                                    color: \"red\"\n                                },\n                                {\n                                    id: response.data[\"Mappings\"][\"mouseID\"],\n                                    name: response.data[\"Mappings\"][\"mouseLabel\"],\n                                    x: mouseTermCoords[0],\n                                    y: mouseTermCoords[1],\n                                    color: \"blue\"\n                                }\n                            ],\n                            links: []\n                        };\n                        for (var i = 0; i < response.data[\"Mappings\"][\"mouseSynonyms\"].length; i++) {\n                            let mapping = response.data[\"Mappings\"][\"mouseSynonyms\"][i];\n                            let mouseNode = {\n                                id: mapping[\"synonymId\"],\n                                name: mapping[\"synonymLabel\"],\n                                x: mouseTermCoords[0] - 175,\n                                y: mouseTermCoords[1] - 105 + (i * 65),\n                                color: \"lightblue\"\n                            };\n                            let link = {\n                                source: mapping[\"synonymId\"],\n                                target: response.data[\"Mappings\"][\"mouseID\"],\n                                linkType: \"Synonym\"\n                            };\n                            if (!data.nodes.includes(mouseNode)) {\n                                data.nodes.push(mouseNode);\n                            }\n                            if (!data.links.includes(link)) {\n                                data.links.push(link);\n                            }\n                        }\n                        for (var i = 0; i < response.data[\"Mappings\"][\"humanSynonyms\"].length; i++) {\n                            let mapping = response.data[\"Mappings\"][\"humanSynonyms\"][i];\n                            let humanNode = {\n                                id: mapping[\"synonymId\"],\n                                name: mapping[\"synonymLabel\"],\n                                x: humanTermCoords[0] + 175,\n                                y: humanTermCoords[1] - 105 + (i * 65),\n                                color: \"orange\"\n                            };\n                            let link = {\n                                source: response.data[\"Mappings\"][\"humanID\"],\n                                target: mapping[\"synonymId\"],\n                                linkType: \"Synonym\"\n                            };\n                            if (!data.nodes.includes(humanNode)) {\n                                data.nodes.push(humanNode);\n                            }\n                            if (!data.links.includes(link)) {\n                                data.links.push(link);\n                            }\n                        }\n                        for (var i = 0; i < response.data[\"Mappings\"][\"matches\"].length; i++) {\n                            let match = response.data[\"Mappings\"][\"matches\"][i];\n                            let link = {\n                                source: match[\"humanNodeType\"] === \"term\" ? response.data[\"Mappings\"][\"humanID\"] : match[\"humanNodeId\"],\n                                target: match[\"mouseNodeType\"] === \"term\" ? response.data[\"Mappings\"][\"mouseID\"] : match[\"mouseNodeId\"],\n                                linkType: match[\"isExact\"] ? \"Exact Match\" : \"Partial Match\"\n                            }\n                            if (!data.links.includes(link)) {\n                                data.links.push(link);\n                            }\n                        }\n                        this.setState({breakdownData: response.data, loading: false, mappingGraphData: data});\n                    } else {\n\n                    }\n                }\n            })\n            .catch((error) => {\n                console.log(\"An error occurred retrieving phenotype data.\");\n            });\n    }\n\n    getHumanTermID(breakdownData) {\n        if (breakdownData) {\n            if (breakdownData[\"Mappings\"]) {\n                return breakdownData[\"Mappings\"][\"humanID\"];\n            } else {\n                return \"No mapping found\";\n            }\n        }\n    }\n\n    getHumanTerm(breakdownData) {\n        if (breakdownData) {\n            if (breakdownData[\"Mappings\"]) {\n                return breakdownData[\"Mappings\"][\"humanLabel\"];\n            } else {\n                return \"No mapping found\";\n            }\n        }\n    }\n\n    getMouseTermID(breakdownData) {\n        if (breakdownData) {\n            if (breakdownData[\"Mappings\"]) {\n                return breakdownData[\"Mappings\"][\"mouseID\"];\n            } else {\n                return \"No mapping found\";\n            }\n        }\n    }\n\n    getMouseTerm(breakdownData) {\n        if (breakdownData) {\n            if (breakdownData[\"Mappings\"]) {\n                return breakdownData[\"Mappings\"][\"mouseLabel\"];\n            } else {\n                return \"No mapping found\";\n            }\n        }\n    }\n\n    getGWASStudies(breakdownData) {\n        if (breakdownData) {\n            if (breakdownData[\"GWAS Studies\"].length > 0) {\n\n            } else {\n                return \"0\";\n            }\n        }\n    }\n\n    getGeneKnockouts(breakdownData) {\n        if (breakdownData) {\n            if (breakdownData[\"Gene Knockouts\"].length > 0) {\n\n            } else {\n                return \"0\";\n            }\n        }\n    }\n\n    getHumanSynonyms(breakdownData) {\n        if (breakdownData) {\n            if (breakdownData[\"Mappings\"][\"humanSynonyms\"].length > 0) {\n                return breakdownData[\"Mappings\"][\"humanSynonyms\"].map((synonym, index) =>\n                    <li>{synonym[\"synonymLabel\"]}</li>);\n            } else {\n                return <li>None</li>;\n            }\n        }\n    }\n\n    getMouseSynonyms(breakdownData) {\n        if (breakdownData) {\n            if (breakdownData[\"Mappings\"][\"mouseSynonyms\"].length > 0) {\n                return breakdownData[\"Mappings\"][\"mouseSynonyms\"].map((synonym, index) =>\n                    <li>{synonym[\"synonymLabel\"]}</li>);\n            } else {\n                return <li>None</li>;\n            }\n        }\n    }\n\n    onClickLink = function (source, target) {\n        window.alert(`Clicked link between ${source} and ${target}`);\n    };\n\n    render() {\n        const {breakdownData, loading, tabValue, dataTabValue, mappingGraphData} = this.state;\n        return (\n            <Paper id=\"phenotypeResultsContainer\" className=\"container\">\n                <LoadingSpinner loading={loading}/>\n                {this.props.backBtnClick ?\n                    <Button variant=\"contained\" color=\"primary\" onClick={this.props.backBtnClick}>Back</Button> : null}\n                <div className=\"phenotype-breakdown-container\">\n                    <AppBar position=\"static\" color=\"default\">\n                        <Tabs\n                            value={tabValue}\n                            onChange={(e, val) => this.setState({tabValue: val})}\n                            indicatorColor=\"primary\"\n                            textColor=\"primary\"\n                            variant=\"fullWidth\"\n                            aria-label=\"full width tabs example\"\n                        >\n                            <Tab label=\"Data\"/>\n                            <Tab label=\"Mapping\"/>\n\n                        </Tabs>\n                    </AppBar>\n                    <TabPanel value={tabValue} index={0} className=\"subTabMenu\">\n                        <AppBar position=\"static\" color=\"default\">\n                            <Tabs\n                                value={dataTabValue}\n                                onChange={(e, val) => this.setState({dataTabValue: val})}\n                                indicatorColor=\"primary\"\n                                textColor=\"primary\"\n                                aria-label=\"full width tabs example\"\n                                variant=\"fullWidth\"\n                                centered\n                            >\n                                <Tab\n                                    label={(breakdownData ? breakdownData[\"GWAS Studies\"].length : 0) + \" Human GWAS Studies\"}\n                                    wrapped/>\n                                <Tab\n                                    label={(breakdownData ? breakdownData[\"Gene Knockouts\"].length : 0) + \" Mouse Gene Knockouts\"}\n                                    wrapped/>\n\n                            </Tabs>\n                        </AppBar>\n                        <TabPanel value={dataTabValue} index={0}>\n                            {breakdownData ? <ResultTable tableData={breakdownData[\"GWAS Studies\"]}\n                                                          onRowClick={this.gwasStudyClicked}/> : null}\n                        </TabPanel>\n                        <TabPanel value={dataTabValue} index={1}>\n                            {breakdownData ? <ResultTable tableData={breakdownData[\"Gene Knockouts\"]}\n                                                          onRowClick={this.experimentClicked}/> : null}\n                        </TabPanel>\n\n                    </TabPanel>\n                    <TabPanel value={tabValue} index={1}>\n                        <Grid container>\n                            <Grid item xs>\n                                <h4 className=\"center\">Homo Sapiens</h4>\n                            </Grid>\n                            <Grid item xs>\n                                <h4 className=\"center\">Mus Musculus</h4>\n                            </Grid>\n\n                        </Grid>\n                        <Grid container>\n                            <Grid item xs={3} className=\"col highlight\">\n                                <p>ID</p>\n                            </Grid>\n                            <Grid item xs={3}>\n                                <p id=\"HPO-Matched-Term\">{this.getHumanTermID(breakdownData)}</p>\n                            </Grid>\n                            <Grid item xs={3} className=\"col highlight\">\n                                <p>ID</p>\n                            </Grid>\n                            <Grid item xs={3}>\n                                <p id=\"MP-Matched-Term\">{this.getMouseTermID(breakdownData)}</p>\n                            </Grid>\n                            <Grid item xs={3} className=\"col highlight\">\n                                <p>Term</p>\n                            </Grid>\n                            <Grid item xs={3}>\n                                <p id=\"HPO-Matched-Term\">{this.getHumanTerm(breakdownData)}</p>\n                            </Grid>\n                            <Grid item xs={3} className=\"col highlight\">\n                                <p>Term</p>\n                            </Grid>\n                            <Grid item xs={3}>\n                                <p id=\"MP-Matched-Term\">{this.getMouseTerm(breakdownData)}</p>\n                            </Grid>\n\n                        </Grid>\n                        <Grid container>\n                            <Grid item xs={3} className=\"col highlight\">\n                                <p>Synonyms</p>\n                            </Grid>\n                            <Grid item xs={3} className=\"col\">\n                                <ul>\n                                    {this.getHumanSynonyms(breakdownData)}\n                                </ul>\n                            </Grid>\n                            <Grid item xs={3} className=\"col highlight\">\n                                <p>Synonyms</p>\n                            </Grid>\n                            <Grid item xs={3} className=\"col\">\n                                <ul>\n                                    {this.getMouseSynonyms(breakdownData)}\n                                </ul>\n                            </Grid>\n\n                        </Grid>\n                        <Graph\n                            id=\"graph-id\" // id is mandatory\n                            data={mappingGraphData}\n                            config={this.myConfig}\n                            onClickNode={this.onClickNode}\n                            onClickLink={this.onClickLink}\n                        />\n                    </TabPanel>\n                </div>\n            </Paper>\n        );\n    }\n}\n\nexport default PhenotypeResultBreakdown;","/var/www/testing/GC_Mouse_Integration/src/UtilityComponents/ConfigData.js",[],"/var/www/testing/GC_Mouse_Integration/src/UtilityComponents/TabPanel.js",["97"],"import React, {useCallback} from 'react';\nimport Typography from \"@material-ui/core/Typography\";\nimport {Box} from \"@material-ui/core\";\n\nclass TabPanel extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {};\n    }\n\n\n    render() {\n        const {children, value, index, ...other} = this.props;\n        return (\n            <div role=\"tabpanel\"\n                 hidden={value !== index}\n                 id={`full-width-tabpanel-${index}`}\n                 aria-labelledby={`full-width-tab-${index}`}\n                 {...other}>\n                {value === index && (\n                    <Box p={3}>\n                        <Typography>{children}</Typography>\n                    </Box>\n                )}\n            </div>\n        );\n\n    }\n}\n\n\nexport default TabPanel;",{"ruleId":"98","replacedBy":"99"},{"ruleId":"100","replacedBy":"101"},{"ruleId":"98","replacedBy":"99"},{"ruleId":"100","replacedBy":"101"},{"ruleId":"102","severity":1,"message":"103","line":6,"column":9,"nodeType":"104","messageId":"105","endLine":6,"endColumn":24},{"ruleId":"102","severity":1,"message":"106","line":6,"column":26,"nodeType":"104","messageId":"105","endLine":6,"endColumn":39},{"ruleId":"107","severity":1,"message":"108","line":469,"column":13,"nodeType":"104","messageId":"105","endLine":469,"endColumn":35},{"ruleId":"109","severity":1,"message":"110","line":487,"column":33,"nodeType":"111","endLine":487,"endColumn":54},{"ruleId":"112","severity":1,"message":"113","line":115,"column":50,"nodeType":"114","messageId":"115","endLine":115,"endColumn":52},{"ruleId":"107","severity":1,"message":"116","line":174,"column":80,"nodeType":"104","messageId":"105","endLine":174,"endColumn":95},{"ruleId":"107","severity":1,"message":"117","line":1,"column":16,"nodeType":"104","messageId":"105","endLine":1,"endColumn":27},{"ruleId":"107","severity":1,"message":"118","line":35,"column":16,"nodeType":"104","messageId":"105","endLine":35,"endColumn":24},{"ruleId":"107","severity":1,"message":"117","line":1,"column":16,"nodeType":"104","messageId":"105","endLine":1,"endColumn":27},{"ruleId":"107","severity":1,"message":"119","line":3,"column":8,"nodeType":"104","messageId":"105","endLine":3,"endColumn":9},{"ruleId":"107","severity":1,"message":"117","line":1,"column":16,"nodeType":"104","messageId":"105","endLine":1,"endColumn":27},{"ruleId":"107","severity":1,"message":"120","line":1,"column":17,"nodeType":"104","messageId":"105","endLine":1,"endColumn":22},{"ruleId":"107","severity":1,"message":"121","line":2,"column":9,"nodeType":"104","messageId":"105","endLine":2,"endColumn":13},{"ruleId":"107","severity":1,"message":"122","line":101,"column":13,"nodeType":"104","messageId":"105","endLine":101,"endColumn":20},{"ruleId":"107","severity":1,"message":"123","line":5,"column":8,"nodeType":"104","messageId":"105","endLine":5,"endColumn":18},{"ruleId":"107","severity":1,"message":"124","line":68,"column":13,"nodeType":"104","messageId":"105","endLine":68,"endColumn":22},{"ruleId":"125","severity":1,"message":"126","line":120,"column":34,"nodeType":"104","messageId":"127","endLine":120,"endColumn":35},{"ruleId":"125","severity":1,"message":"126","line":141,"column":34,"nodeType":"104","messageId":"127","endLine":141,"endColumn":35},{"ruleId":"107","severity":1,"message":"117","line":1,"column":16,"nodeType":"104","messageId":"105","endLine":1,"endColumn":27},"no-native-reassign",["128"],"no-negated-in-lhs",["129"],"@typescript-eslint/no-unused-vars","'TransitionGroup' is defined but never used.","Identifier","unusedVar","'CSSTransition' is defined but never used.","no-unused-vars","'humanLiveSearchResults' is assigned a value but never used.","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'selectedSpecies' is assigned a value but never used.","'useCallback' is defined but never used.","'isZoomed' is assigned a value but never used.","'$' is defined but never used.","'Paper' is defined but never used.","'fade' is defined but never used.","'loading' is assigned a value but never used.","'SearchIcon' is defined but never used.","'selection' is assigned a value but never used.","no-redeclare","'i' is already defined.","redeclared","no-global-assign","no-unsafe-negation"]