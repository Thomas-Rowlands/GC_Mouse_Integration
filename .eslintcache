[{"C:\\Users\\Thomas\\Github Repos\\GC_Mouse_Integration\\src\\index.tsx":"1","C:\\Users\\Thomas\\Github Repos\\GC_Mouse_Integration\\src\\Home\\App.js":"2","C:\\Users\\Thomas\\Github Repos\\GC_Mouse_Integration\\src\\UtilityComponents\\ErrorBoundary.js":"3","C:\\Users\\Thomas\\Github Repos\\GC_Mouse_Integration\\src\\reportWebVitals.ts":"4","C:\\Users\\Thomas\\Github Repos\\GC_Mouse_Integration\\src\\Home\\Home.js":"5","C:\\Users\\Thomas\\Github Repos\\GC_Mouse_Integration\\src\\PhenotypeSearch\\PhenotypeSearch.js":"6","C:\\Users\\Thomas\\Github Repos\\GC_Mouse_Integration\\src\\OntologyHierarchy\\OntologyHierarchy.js":"7","C:\\Users\\Thomas\\Github Repos\\GC_Mouse_Integration\\src\\Genome\\Genome.js":"8","C:\\Users\\Thomas\\Github Repos\\GC_Mouse_Integration\\src\\Home\\Components\\MainMenuItem.js":"9","C:\\Users\\Thomas\\Github Repos\\GC_Mouse_Integration\\src\\UtilityComponents\\ConfigData.js":"10","C:\\Users\\Thomas\\Github Repos\\GC_Mouse_Integration\\src\\UtilityComponents\\TabPanel.js":"11","C:\\Users\\Thomas\\Github Repos\\GC_Mouse_Integration\\src\\Genome\\Components\\GenomeBrowser.js":"12","C:\\Users\\Thomas\\Github Repos\\GC_Mouse_Integration\\src\\UtilityComponents\\LoadingSpinner\\LoadingSpinner.js":"13","C:\\Users\\Thomas\\Github Repos\\GC_Mouse_Integration\\src\\PhenotypeSearch\\Components\\PhenotypeResultBreakdown.js":"14","C:\\Users\\Thomas\\Github Repos\\GC_Mouse_Integration\\src\\Genome\\Components\\AppIdeogram.js":"15","C:\\Users\\Thomas\\Github Repos\\GC_Mouse_Integration\\src\\OntologyHierarchy\\Components\\OntologyTree\\OntologyTree.js":"16","C:\\Users\\Thomas\\Github Repos\\GC_Mouse_Integration\\src\\UtilityComponents\\ResultTable.js":"17","C:\\Users\\Thomas\\Github Repos\\GC_Mouse_Integration\\src\\OntologyHierarchy\\Components\\OntologyTree\\Components\\StyledTreeItem.js":"18","C:\\Users\\Thomas\\Github Repos\\GC_Mouse_Integration\\src\\Home\\theme.js":"19"},{"size":845,"mtime":1621786645596,"results":"20","hashOfConfig":"21"},{"size":14550,"mtime":1634583018580,"results":"22","hashOfConfig":"21"},{"size":1016,"mtime":1614615374946,"results":"23","hashOfConfig":"21"},{"size":440,"mtime":1612365407714,"results":"24","hashOfConfig":"21"},{"size":2608,"mtime":1634546104699,"results":"25","hashOfConfig":"21"},{"size":21614,"mtime":1635028968474,"results":"26","hashOfConfig":"21"},{"size":39122,"mtime":1634844473030,"results":"27","hashOfConfig":"21"},{"size":19389,"mtime":1633955302703,"results":"28","hashOfConfig":"21"},{"size":1888,"mtime":1621266202061,"results":"29","hashOfConfig":"21"},{"size":93,"mtime":1635236841672,"results":"30","hashOfConfig":"21"},{"size":843,"mtime":1617037919169,"results":"31","hashOfConfig":"21"},{"size":14973,"mtime":1635239302879,"results":"32","hashOfConfig":"21"},{"size":1288,"mtime":1612565100863,"results":"33","hashOfConfig":"21"},{"size":29891,"mtime":1631534192078,"results":"34","hashOfConfig":"21"},{"size":9754,"mtime":1634026267062,"results":"35","hashOfConfig":"21"},{"size":4816,"mtime":1634844172952,"results":"36","hashOfConfig":"21"},{"size":12473,"mtime":1629804858767,"results":"37","hashOfConfig":"21"},{"size":2996,"mtime":1634588639849,"results":"38","hashOfConfig":"21"},{"size":304,"mtime":1634674994071,"results":"39","hashOfConfig":"21"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},"1s1jmwu",{"filePath":"43","messages":"44","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"46"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"46"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"46"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"46"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"66","messages":"67","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"46"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"71","messages":"72","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"46"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"46"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"46"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82","usedDeprecatedRules":"46"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85","usedDeprecatedRules":"46"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88","usedDeprecatedRules":"46"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},"C:\\Users\\Thomas\\Github Repos\\GC_Mouse_Integration\\src\\index.tsx",[],["91","92"],"C:\\Users\\Thomas\\Github Repos\\GC_Mouse_Integration\\src\\Home\\App.js",["93","94","95","96","97","98","99","100","101","102"],"import React from 'react';\r\nimport './gwascentral.css';\r\nimport './App.css';\r\n\r\n// @ts-ignore\r\nimport Home from \"./Home.js\";\r\n// @ts-ignore\r\nimport {TransitionGroup, CSSTransition} from \"react-transition-group\";\r\n// @ts-ignore\r\nimport {HashRouter, Route, Switch} from \"react-router-dom\";\r\nimport PhenotypeSearch from \"../PhenotypeSearch/PhenotypeSearch\";\r\nimport OntologyHierarchy from \"../OntologyHierarchy/OntologyHierarchy\";\r\nimport Genome from \"../Genome/Genome\";\r\nimport LoadingSpinner from \"../UtilityComponents/LoadingSpinner/LoadingSpinner\";\r\nimport { ThemeProvider } from \"@material-ui/styles\";\r\nimport GCTheme from \"./theme\";\r\n\r\nclass App extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            loading: false,\r\n        };\r\n        this.routes = [{path: '/', name: 'Home', Component: Home},\r\n            {path: '/PhenotypeSearch', name: 'Phenotype', Component: PhenotypeSearch},\r\n            {path: '/OntologyHierarchy', name: 'Ontology', Component: OntologyHierarchy},\r\n            {path: '/Genome', name: 'Genome', Component: Genome},\r\n            {path: '/Genome/:termID', name: 'Genome', Component: Genome},\r\n        ];\r\n    }\r\n\r\n    setLoading = (status) => {\r\n        this.setState({loading: status});\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <header className=\"App-header\">\r\n                    <div style={{width: \"100%\"}}>\r\n                        <img src=\"/images/gwas-central-logo.png\" alt=\"\"\r\n                             style={{\r\n                                 verticalAlign: \"bottom\",\r\n                                 position: \"absolute\",\r\n                                 top: \"20px\",\r\n                                 left: \"70px\",\r\n                                 cursor: \"pointer\"\r\n                             }}/>\r\n                        <div id=\"header_menulinks\">\r\n                            <div id=\"h_menulinks\" style={{paddingRight: \"0.5em\"}}>\r\n                                <a href=\"https://www.gwascentral.org/info/data/database-content\">Data</a>&nbsp;&nbsp;\r\n                                <a href=\"https://www.gwascentral.org/info/how-to/submit-data\">Submit</a>&nbsp;&nbsp;\r\n                                <a href=\"https://www.gwascentral.org/info/data/download\">Download</a>&nbsp;&nbsp;\r\n                                <a href=\"https://www.gwascentral.org/info\">Help</a>\r\n                            </div>\r\n                        </div>\r\n                        <div style={{float: \"right\", paddingTop: \"1.5em\", paddingRight: \"1em\", clear: \"right\"}}>\r\n                            <form action=\"/search\" name=\"searchform\" id=\"searchform\">\r\n                                {/*<fieldset>*/}\r\n                                {/*    <img src=\"/images/options/search.png\" alt=\"\">&nbsp;<input name=\"q\" type=\"text\"*/}\r\n                                {/*                                                              id=\"minisearch\"*/}\r\n                                {/*                                                              size=\"18\" value=\"\"*/}\r\n                                {/*                                                              alt=\"\"*/}\r\n                                {/*                                                              autoComplete=\"off\"*/}\r\n                                {/*                                                              className=\"ac_input\"><label>&nbsp;</label>*/}\r\n                                {/*</fieldset>*/}\r\n                            </form>\r\n                        </div>\r\n                        <div className=\"explore_panel\">\r\n                            <div style={{width: \"100%\"}}>\r\n                                <div style={{float: \"right\", width: \"100%\"}}>\r\n                                    <div className=\"main-tab-container\">\r\n                                        <div className=\"main-tab\">\r\n                                            <div style={{width: \"106px\"}}><a\r\n                                                href=\"https://www569.lamp.le.ac.uk/#/\"\r\n                                                style={{fontSize: \"0.8em\"}}/></div>\r\n                                            <a href=\"https://www569.lamp.le.ac.uk/#/\"\r\n                                               style={{fontSize: \"0.8em\"}}>\r\n                                                <img src=\"/images/mouse.svg\" alt=\"\"\r\n                                                     style={{width: \"32px\", height: \"32px\"}}/><br/>\r\n                                                <div style={{height: \"2em\", marginTop: \"0.5em\"}}>Homology</div>\r\n                                            </a></div>\r\n                                    </div>\r\n                                    <div className=\"main-tab-container\">\r\n                                        <div className=\"main-tab\">\r\n                                            <div style={{\"width\": \"106px\"}}><a\r\n                                                href=\"https://www.gwascentral.org/gwasphenomap\"\r\n                                                style={{fontSize: \"0.8em\"}}/></div>\r\n                                            <a href=\"https://www.gwascentral.org/gwasphenomap\"\r\n                                               style={{fontSize: \"0.8em\"}}>\r\n                                                <img src=\"/images/section/compass.png\" alt=\"\"\r\n                                                     style={{width: \"32px\", height: \"32px\"}}/> <br/>\r\n                                                <div style={{height: \"2em\", marginTop: \"0.5em\"}}>PhenoMap</div>\r\n                                            </a>\r\n                                        </div>\r\n                                    </div>\r\n                                    <div className=\"main-tab-container\">\r\n                                        <div className=\"main-tab\">\r\n                                            <div style={{width: \"106px\"}}><a href=\"https://www.gwascentral.org/biomart\"\r\n                                                                             style={{fontSize: \"0.8em\"}}/>\r\n                                            </div>\r\n                                            <a href=\"https://www.gwascentral.org/biomart\" style={{fontSize: \"0.8em\"}}>\r\n                                                <img src=\"/images/section/gwasmart.png\" alt=\"\"\r\n                                                     style={{width: \"32px\", height: \"32px\"}}/><br/>\r\n                                                <div style={{height: \"2em\", marginTop: \"0.5em\"}}>GWAS Mart</div>\r\n                                            </a></div>\r\n                                    </div>\r\n                                    <div className=\"main-tab-container\">\r\n                                        <div className=\"main-tab\">\r\n                                            <div style={{width: \"106px\"}}><a href=\"https://www.gwascentral.org/browser\"\r\n                                                                             style={{fontSize: \"0.8em\"}}/>\r\n                                            </div>\r\n                                            <a href=\"https://www.gwascentral.org/browser\" style={{fontSize: \"0.8em\"}}>\r\n                                                <img src=\"/images/section/browser.png\" alt=\"\"\r\n                                                     style={{width: \"32px\", height: \"32px\"}}/><br/>\r\n                                                <div style={{height: \"2em\", marginTop: \"0.5em\"}}>Browser</div>\r\n                                            </a></div>\r\n                                    </div>\r\n                                    <div className=\"main-tab-container\">\r\n                                        <div className=\"main-tab\">\r\n                                            <div style={{width: \"106px\"}}><a href=\"https://www.gwascentral.org/markers\"\r\n                                                                             style={{fontSize: \"0.8em\"}}/>\r\n                                            </div>\r\n                                            <a href=\"https://www.gwascentral.org/markers\" style={{fontSize: \"0.8em\"}}>\r\n                                                <img src=\"/images/section/markers.png\" alt=\"\"\r\n                                                     style={{width: \"32px\", height: \"32px\"}}/><br/>\r\n                                                <div style={{height: \"2em\", marginTop: \"0.5em\"}}>Markers</div>\r\n                                            </a></div>\r\n                                    </div>\r\n                                    <div className=\"main-tab-container\">\r\n                                        <div className=\"main-tab\">\r\n                                            <div style={{width: \"106px\"}}><a href=\"https://www.gwascentral.org/studies\"\r\n                                                                             style={{fontSize: \"0.8em\"}}/>\r\n                                            </div>\r\n                                            <a href=\"https://www.gwascentral.org/studies\" style={{fontSize: \"0.8em\"}}>\r\n                                                <img src=\"/images/section/studies.png\" alt=\"\"\r\n                                                     style={{width: \"32px\", height: \"32px\"}}/><br/>\r\n                                                <div style={{height: \"2em\", marginTop: \"0.5em\"}}>Study List</div>\r\n                                            </a></div>\r\n                                    </div>\r\n                                    <div className=\"main-tab-container\">\r\n                                        <div className=\"main-tab\">\r\n                                            <div style={{width: \"106px\"}}><a\r\n                                                href=\"https://www.gwascentral.org/generegion\"\r\n                                                style={{fontSize: \"0.8em\"}}/></div>\r\n                                            <a href=\"https://www.gwascentral.org/generegion\"\r\n                                               style={{fontSize: \"0.8em\"}}>\r\n                                                <img src=\"/images/section/genes.png\" alt=\"\"\r\n                                                     style={{width: \"32px\", height: \"32px\"}}/><br/>\r\n                                                <div style={{height: \"2em\", marginTop: \"0.5em\"}}>Gene/Region</div>\r\n                                            </a></div>\r\n                                    </div>\r\n                                    <div className=\"main-tab-container\">\r\n                                        <div className=\"main-tab\">\r\n                                            <div style={{width: \"106px\"}}><a\r\n                                                href=\"https://www.gwascentral.org/phenotypes\"\r\n                                                style={{fontSize: \"0.8em\"}}/></div>\r\n                                            <a href=\"https://www.gwascentral.org/phenotypes\"\r\n                                               style={{fontSize: \"0.8em\"}}>\r\n                                                <img src=\"/images/section/phenotypes.png\" alt=\"\"\r\n                                                     style={{width: \"32px\", height: \"32px\"}}/><br/>\r\n                                                <div style={{height: \"2em\", marginTop: \"0.5em\"}}>Phenotypes</div>\r\n                                            </a></div>\r\n                                    </div>\r\n                                </div>\r\n\r\n                                <div style={{float: \"right\", width: \"100%\"}} className=\"main-tab-base-row\">\r\n                                    <div className=\"main-tab-container\">\r\n                                        <div className=\"main-tab-base\"/>\r\n                                    </div>\r\n                                    <div className=\"main-tab-container\">\r\n                                        <div className=\"main-tab-base\"/>\r\n                                    </div>\r\n                                    <div className=\"main-tab-container\">\r\n                                        <div className=\"main-tab-base\"/>\r\n                                    </div>\r\n                                    <div className=\"main-tab-container\">\r\n                                        <div className=\"main-tab-base\"/>\r\n                                    </div>\r\n                                    <div className=\"main-tab-container\">\r\n                                        <div className=\"main-tab-base\"/>\r\n                                    </div>\r\n                                    <div className=\"main-tab-container\">\r\n                                        <div className=\"main-tab-base\"/>\r\n                                    </div>\r\n                                    <div className=\"main-tab-container\">\r\n                                        <div className=\"main-tab-base\"/>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n\r\n                        </div>\r\n                    </div>\r\n                </header>\r\n                <div className=\"App\">\r\n                    <LoadingSpinner loading={this.state.loading}/>\r\n                    <HashRouter>\r\n                            {this.routes.map(({path, Component}) => (\r\n                                <Route key={path} exact path={path}>\r\n                                    {({match}) => (\r\n                                        <CSSTransition\r\n                                            in={match != null}\r\n                                            timeout={300}\r\n                                            classNames=\"page\"\r\n                                            unmountOnExit\r\n                                        >\r\n                                            <div className=\"page\">\r\n                                                <ThemeProvider theme={GCTheme}>\r\n                                                    <Component setLoading={this.setLoading}/>\r\n                                                </ThemeProvider>\r\n                                            </div>\r\n                                        </CSSTransition>\r\n                                    )}\r\n                                </Route>\r\n                            ))}\r\n\r\n                    </HashRouter>\r\n                </div>\r\n            </div>\r\n\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;\r\n",["103","104"],"C:\\Users\\Thomas\\Github Repos\\GC_Mouse_Integration\\src\\UtilityComponents\\ErrorBoundary.js",[],"C:\\Users\\Thomas\\Github Repos\\GC_Mouse_Integration\\src\\reportWebVitals.ts",[],"C:\\Users\\Thomas\\Github Repos\\GC_Mouse_Integration\\src\\Home\\Home.js",["105","106","107","108","109","110"],"import React from 'react';\r\nimport './App.css';\r\nimport MainMenuItem from \"./Components/MainMenuItem\";\r\nimport {Link} from 'react-router-dom';\r\n// @ts-ignore\r\nimport $ from 'jquery';\r\nimport 'jqueryui';\r\nimport {Grid, withStyles} from \"@material-ui/core\";\r\nimport {Button, InputLabel, MenuItem, Paper, Select, TextField } from '@material-ui/core';\r\n\r\n\r\nconst useStyles = theme => ({\r\n    root: {\r\n        flexGrow: 1,\r\n        marginTop: 50,\r\n    },\r\n});\r\n\r\nclass Home extends React.Component {\r\n    componentDidMount() {\r\n        document.title = \"GWAS Central - Homology\";\r\n    }\r\n\r\n    render() {\r\n        const {classes} = this.props;\r\n        const spacing = 3;\r\n        return (<Grid className={classes.root} container direction=\"row\" justify=\"center\" alignItems=\"center\" spacing={10}>\r\n            <Grid item xs={spacing}>\r\n                <Link to=\"/PhenotypeSearch\">\r\n                    <MainMenuItem url=\"/PhenotypeSearch\" image=\"images/bootstrap-icons-1.3.0/search.svg\"\r\n                                  alt=\"image of magnifying glass.\"\r\n                                  heading=\"Phenotype Search\" body=\"Text search by phenotype for matching human GWAS & mouse gene knockout comparative results,\r\n                        showing homology data.\"/>\r\n                </Link>\r\n\r\n            </Grid>\r\n            <Grid item xs={spacing}>\r\n                <Link to=\"/OntologyHierarchy\">\r\n                    <MainMenuItem url=\"/OntologyHierarchy\" image=\"images/bootstrap-icons-1.3.0/bezier2.svg\"\r\n                                  alt=\"image of a bezier curve between two points.\"\r\n                                  heading=\"Phenotype Ontology Hierarchy\"\r\n                                  body=\"Ontology mapping visualisation with orthologue data.\"/>\r\n                </Link>\r\n            </Grid>\r\n\r\n            <Grid item xs={spacing}>\r\n                <Link to=\"/Genome\">\r\n                    <MainMenuItem url=\"/Genome\" image=\"images/bootstrap-icons-1.3.0/dna-strand.svg\"\r\n                                  alt=\"image of a DNA double helix.\"\r\n                                  heading=\"Genome Browser/Gene Symbol Search\"\r\n                                  body=\"Interactive genome browser for human/mouse orthologue data.\"/>\r\n                </Link>\r\n            </Grid>\r\n        </Grid>);\r\n    }\r\n}\r\n\r\n$(document).ready(function () {\r\n    $(\".menu-option\").hover(function () {\r\n        $(\".menu-option:not(:hover)\").css(\"background-color\", \"#e2e2e2\");\r\n    }, function () {\r\n        $(\".menu-option\").css(\"background-color\", \"white\");\r\n    });\r\n});\r\n\r\nexport default withStyles(useStyles)(Home);","C:\\Users\\Thomas\\Github Repos\\GC_Mouse_Integration\\src\\PhenotypeSearch\\PhenotypeSearch.js",[],"C:\\Users\\Thomas\\Github Repos\\GC_Mouse_Integration\\src\\OntologyHierarchy\\OntologyHierarchy.js",["111","112","113","114","115","116","117","118","119"],"import React from 'react';\r\nimport $ from 'jquery';\r\nimport axios from \"axios\";\r\nimport {Button, Grid, InputLabel, MenuItem, Paper, Select, TextField, withStyles} from '@material-ui/core';\r\nimport './OntologyHierarchy.css';\r\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\r\nimport ErrorBoundary from \"../UtilityComponents/ErrorBoundary\";\r\nimport OntologyTree from \"./Components/OntologyTree/OntologyTree\";\r\nimport _ from \"lodash\";\r\nimport PhenotypeResultBreakdown from \"../PhenotypeSearch/Components/PhenotypeResultBreakdown\";\r\nimport api_server from \"../UtilityComponents/ConfigData\";\r\nimport Genome from \"../Genome/Genome\";\r\nimport {CSSTransition, SwitchTransition} from \"react-transition-group\";\r\n\r\nconst useStyles = theme => ({\r\n    formControl: {\r\n        margin: theme.spacing(1),\r\n        minWidth: 120,\r\n    },\r\n    selectEmpty: {\r\n        marginTop: theme.spacing(2),\r\n    },\r\n    autoComplete: {\r\n        width: \"75%\",\r\n        marginLeft: \"auto\",\r\n        marginRight: \"auto\",\r\n        paddingBottom: 5,\r\n    },\r\n    paper: {\r\n        padding: theme.spacing(1),\r\n        textAlign: 'center',\r\n        color: theme.palette.text.secondary,\r\n    },\r\n});\r\n\r\nclass OntologyHierarchy extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            treeData: null,\r\n            expandedMouseNodes: [''],\r\n            expandedHumanNodes: [''],\r\n            selectedMouseNodes: [''],\r\n            selectedHumanNodes: [''],\r\n            selectedSpecies: \"Mouse\",\r\n            isMappingPresent: false,\r\n            isDataPresent: false,\r\n            conErrorStatus: false,\r\n            configData: api_server,\r\n            searchInput: \"\",\r\n            humanLiveSearchResults: [],\r\n            mouseLiveSearchResults: [],\r\n            humanOntology: \"MESH\",\r\n            mouseSearchInput: \"\",\r\n            humanSearchInput: \"\",\r\n            genotypeTermID: null,\r\n            genotypeOntology: null,\r\n            breakdownType: 0, // 0 = both, 1 = human only, 2 = mouse only\r\n        };\r\n        this.tempExpandedmouseIds = [];\r\n        this.tempExpandedhumanIds = [];\r\n        this.liveCancelToken = null;\r\n        this.mouseLiveLoading = false;\r\n        this.humanLiveLoading = false;\r\n        this.searchInput = \"\";\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.getRootTrees(this.state.humanOntology);\r\n    }\r\n\r\n    retrieveLiveSearch = (e, x) => {\r\n        if (!e)\r\n            return;\r\n        let input = x;\r\n        let ontology = e.target.id === \"mouseSearchInput\" ? \"MP\" : this.state.humanOntology;\r\n        if (this.liveCancelToken)\r\n            this.liveCancelToken.cancel();\r\n        if (input.length < 1) {\r\n            $(\"#live-search\").hide();\r\n            if (ontology === \"MP\") {\r\n                this.mouseLiveLoading = false;\r\n                this.setState({mouseLiveSearchResults: []});\r\n            } else {\r\n                this.humanLiveLoading = false;\r\n                this.setState({humanLiveSearchResults: []});\r\n            }\r\n            return;\r\n        }\r\n        if (ontology === \"MP\")\r\n            this.mouseLiveLoading = true;\r\n        else\r\n            this.humanLiveLoading = true;\r\n        this.searchInput = input;\r\n        this.liveCancelToken = axios.CancelToken.source();\r\n        let url_string = this.state.configData.api_server + \"livesearch.php?entry=\" + encodeURIComponent(input) + \"&ontology=\" + ontology;\r\n\r\n        if (input.length > 0) {\r\n            axios.get(url_string, {cancelToken: this.liveCancelToken.token})\r\n                .then((response) => {\r\n                    if (response.status === 200) {\r\n                        if (response.data.length === 0) {\r\n                            if (ontology === \"MP\") {\r\n                                this.mouseLiveLoading = false;\r\n                                this.setState({mouseLiveSearchResults: []});\r\n                            } else {\r\n                                this.humanLiveLoading = false;\r\n                                this.setState({humanLiveSearchResults: []});\r\n                            }\r\n                        } else {\r\n                            if (ontology === \"MP\") {\r\n                                this.mouseLiveLoading = false;\r\n                                this.setState({mouseLiveSearchResults: response.data});\r\n                            } else {\r\n                                this.humanLiveLoading = false;\r\n                                this.setState({humanLiveSearchResults: response.data});\r\n                            }\r\n                        }\r\n                    }\r\n                })\r\n                .catch((error) => {\r\n                    if (!axios.isCancel(error)) {\r\n                        console.log(\"An error occurred retrieving live search results.\");\r\n                    } else {\r\n                        if (ontology === \"MP\") {\r\n                            this.mouseLiveSearchResults = [];\r\n                            this.mouseLiveLoading = false;\r\n                        } else {\r\n                            this.humanLiveSearchResults = [];\r\n                            this.humanLiveLoading = false;\r\n                        }\r\n                    }\r\n\r\n\r\n                });\r\n        }\r\n    }\r\n\r\n    appendSearchResult = (objValue, srcValue) => {\r\n        if (_.isArray(objValue)) {\r\n            for (var i = 0; i < objValue.length; i++) {\r\n                if (objValue[i].FSN === srcValue[0].FSN) {\r\n                    objValue[i] = _.merge(objValue[i], srcValue[0]);\r\n                    return objValue;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    isNodeDuplicate = (source, newItem) => {\r\n        for (var i = 0; i < source.length; i++) {\r\n            if (source[i].id === newItem.id) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    findPath = (a, obj) => {\r\n        for (var key in obj) {                                         // for each key in the object obj\r\n            if (obj.hasOwnProperty(key)) {                             // if it's an owned key\r\n                if (a === obj[key]) return key;                        // if the item beign searched is at this key then return this key as the path\r\n                else if (obj[key] && typeof obj[key] === \"object\") {   // otherwise if the item at this key is also an object\r\n                    var path = this.findPath(a, obj[key]);                 // search for the item a in that object\r\n                    if (path) return key + \".\" + path;                 // if found then the path is this key followed by the result of the search\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    getAllPaths = (obj, key, prev = '') => {\r\n        const result = [];\r\n\r\n        for (let k in obj) {\r\n            let path = prev + (prev ? '.' : '') + k;\r\n\r\n            if (obj[k] === key) {\r\n                result.push(path);\r\n            } else if (typeof obj[k] == 'object') {\r\n                result.push(...this.getAllPaths(obj[k], key, path));\r\n            }\r\n        }\r\n\r\n        return result\r\n    }\r\n\r\n    pathToIdArray = (path, tree) => {\r\n        var result = [];\r\n        for (var i = 2; i < path.length; i += 2) {\r\n            result.push(tree.children[path[i]].id);\r\n            tree = tree.children[path[i]];\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Simple object check.\r\n     * @param item\r\n     * @returns {boolean}\r\n     */\r\n    isObject = (item) => {\r\n        return (item && typeof item === 'object' && !Array.isArray(item));\r\n    }\r\n\r\n    /**\r\n     * Deep merge two objects.\r\n     * @param target\r\n     * @param ...sources\r\n     */\r\n    mergeDeep = (target, ...sources) => {\r\n        if (!sources.length) return target;\r\n        const source = sources.shift();\r\n\r\n        if (this.isObject(target) && this.isObject(source)) {\r\n            for (const key in source) {\r\n                if (this.isObject(source[key])) {\r\n                    if (!target[key]) Object.assign(target, {[key]: {}});\r\n                    this.mergeDeep(target[key], source[key]);\r\n                } else {\r\n                    Object.assign(target, {[key]: source[key]});\r\n                }\r\n            }\r\n        }\r\n        return this.mergeDeep(target, ...sources);\r\n    }\r\n\r\n    objectToPaths = (data, target) => {\r\n        var result = [];\r\n        var matched_paths = [];\r\n        doIt(data, \"\");\r\n        return matched_paths;\r\n\r\n        function doIt(data, s) {\r\n            if (data && typeof data === \"object\") {\r\n                if (Array.isArray(data)) {\r\n                    for (var i = 0; i < data.length; i++) {\r\n                        if (data[i] === target) {\r\n                            matched_paths.push(s + \".\" + i);\r\n                        }\r\n                        doIt(data[i], s + \".\" + i);\r\n                    }\r\n                } else {\r\n                    for (var p in data) {\r\n                        if (data[p] === target) {\r\n                            matched_paths.push(s + \".\" + p);\r\n                        }\r\n                        doIt(data[p], s + \".\" + p);\r\n                    }\r\n                }\r\n            } else {\r\n                result.push(s);\r\n            }\r\n        }\r\n    }\r\n\r\n    convertNodesToNodeIDs = (nodeList, isHuman = false) => {\r\n        let tempFilteredNodes = [];\r\n        let tree = isHuman ? \"humanTree\" : \"mouseTree\";\r\n        for (var i = 0; i < nodeList.length; i++) {\r\n            var nodeID = tree;\r\n            if (i !== 0)\r\n                for (var l = 0; l <= i; l++) {\r\n                    nodeID += \"-\" + nodeList[l];\r\n                }\r\n            else\r\n                nodeID += \"-\" + nodeList[0];\r\n            tempFilteredNodes.push(nodeID);\r\n        }\r\n        return tempFilteredNodes;\r\n    }\r\n\r\n    search = (searchInput, ontology) => {\r\n        if (searchInput === undefined || searchInput === \"\") {\r\n            this.getRootTrees(this.state.humanOntology);\r\n            return;\r\n        }\r\n        this.props.setLoading(true);\r\n        let humanOnt = this.state.humanOntology;\r\n        let mouseOnt = \"MP\";\r\n        let searchOnt = ontology;\r\n        let url_string = this.state.configData.api_server + \"controller.php?type=ontology&search&term=\" + searchInput + \"&humanOntology=\" + humanOnt + \"&mouseOntology=\" + mouseOnt + \"&searchOntology=\" + searchOnt;\r\n        axios.get(url_string)\r\n            .then((response) => {\r\n                if (response.status === 200) {\r\n                    if (response.data) {\r\n                        let tree = this.state.treeData;\r\n                        let breakdownType = 0;\r\n\r\n                        let expandedMouseNodes = this.state.expandedMouseNodes;\r\n                        let selectedMouseNodes = this.state.selectedMouseNodes;\r\n                        let mappedMousePhenotype = this.state.mappedMousePhenotype;\r\n\r\n                        let expandedHumanNodes = this.state.expandedHumanNodes;\r\n                        let selectedHumanNodes = this.state.selectedHumanNodes;\r\n                        let mappedHumanPhenotype = this.state.mappedHumanPhenotype;\r\n\r\n\r\n                        // populate human tree if result returned.\r\n                        if (response.data.humanID) {\r\n                            expandedHumanNodes = [];\r\n                            breakdownType = 1;\r\n                            tree[\"humanID\"] = response.data.humanID;\r\n                            tree[\"humanTree\"] = response.data.humanTree;\r\n                            let humanPaths = this.objectToPaths(tree[\"humanTree\"], tree[\"humanID\"]);\r\n                            if (humanPaths.length > 1) {\r\n                                for (var i = 0; i < humanPaths.length; i++) {\r\n                                    let humanPath = humanPaths[i];\r\n                                    let tempPathIdArray = this.pathToIdArray(humanPath.split(\".\"), tree[\"humanTree\"]);\r\n                                    if (humanOnt === \"MESH\")\r\n                                        tempPathIdArray.unshift(\"mesh\");\r\n                                    else\r\n                                        tempPathIdArray.unshift(\"HP:0000001\");\r\n                                    tempPathIdArray = this.convertNodesToNodeIDs(tempPathIdArray, true);\r\n                                    tempPathIdArray.forEach(id => expandedHumanNodes.push(id));\r\n                                }\r\n                                // mousePaths.forEach(mousePath => this.pathToIdArray(mousePath.split(\".\"), tree[\"mouseTree\"]).forEach(id => expandedMouseNodes.push(id)));\r\n                            } else {\r\n                                expandedHumanNodes = this.pathToIdArray(humanPaths[0].split(\".\"), tree[\"humanTree\"]);\r\n                                if (humanOnt === \"MESH\")\r\n                                    expandedHumanNodes.unshift(\"mesh\");\r\n                                else\r\n                                    expandedHumanNodes.unshift(\"HP:0000001\");\r\n                                expandedHumanNodes = this.convertNodesToNodeIDs(expandedHumanNodes, true);\r\n                            }\r\n\r\n                            selectedHumanNodes = expandedHumanNodes.filter(term => term.endsWith(tree[\"humanID\"]));\r\n                            expandedHumanNodes = expandedHumanNodes.filter(node => node.endsWith(tree[\"humanID\"]) === false);\r\n                        }\r\n                        // populate mouse tree if result returned.\r\n                        if (response.data.mouseID) {\r\n                            expandedMouseNodes = [];\r\n                            breakdownType = 2;\r\n                            tree[\"mouseID\"] = response.data.mouseID;\r\n                            tree[\"mouseTree\"] = response.data.mouseTree;\r\n                            let mousePaths = this.objectToPaths(tree[\"mouseTree\"], tree[\"mouseID\"]);\r\n                            if (mousePaths.length > 1) {\r\n                                for (var i = 0; i < mousePaths.length; i++) {\r\n                                    let mousePath = mousePaths[i];\r\n                                    let tempPathIdArray = this.pathToIdArray(mousePath.split(\".\"), tree[\"mouseTree\"]);\r\n                                    tempPathIdArray.unshift(\"MP:0000001\");\r\n                                    tempPathIdArray = this.convertNodesToNodeIDs(tempPathIdArray, false);\r\n                                    tempPathIdArray.forEach(id => expandedMouseNodes.push(id));\r\n                                }\r\n                                // mousePaths.forEach(mousePath => this.pathToIdArray(mousePath.split(\".\"), tree[\"mouseTree\"]).forEach(id => expandedMouseNodes.push(id)));\r\n                            } else {\r\n                                expandedMouseNodes = this.pathToIdArray(mousePaths[0].split(\".\"), tree[\"mouseTree\"]);\r\n                                expandedMouseNodes.unshift(\"MP:0000001\");\r\n                                expandedMouseNodes = this.convertNodesToNodeIDs(expandedMouseNodes, false);\r\n                            }\r\n                            selectedMouseNodes = expandedMouseNodes.filter(term => term.endsWith(tree[\"mouseID\"]));\r\n                            expandedMouseNodes = expandedMouseNodes.filter(node => node.endsWith(tree[\"mouseID\"]) === false);\r\n                        }\r\n                        // populate mapping data if available\r\n                        if (response.data.mouseID && response.data.humanID) {\r\n                            breakdownType = 0;\r\n                            tree[\"isExactMatch\"] = response.data.isExactMatch;\r\n                        }\r\n\r\n\r\n                        this.setState({\r\n                            treeData: tree,\r\n                            isDataPresent: true,\r\n                            isMappingPresent: true,\r\n                            expandedMouseNodes: expandedMouseNodes,\r\n                            selectedMouseNodes: selectedMouseNodes,\r\n                            expandedHumanNodes: expandedHumanNodes,\r\n                            selectedHumanNodes: selectedHumanNodes,\r\n                            mappedMousePhenotype: tree[\"mouseID\"],\r\n                            mappedHumanPhenotype: tree[\"humanID\"],\r\n                            humanSearchFailed: false,\r\n                            mouseSearchFailed: false,\r\n                            breakdownType: breakdownType,\r\n                        }, () => this.scrollTrees());\r\n                    } else {\r\n                        this.setState({\r\n                            isDataPresent: false,\r\n                            isMappingPresent: false,\r\n                            humanSearchFailed: searchOnt !== \"MP\",\r\n                            mouseSearchFailed: searchOnt === \"MP\"\r\n                        });\r\n                    }\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                this.setState({searchOpen: true});\r\n                console.log(\"An error occurred searching for ontology mappings.\");\r\n                this.props.setLoading(false);\r\n            });\r\n    }\r\n\r\n    updateTree = (id, children) => obj => {\r\n        if (obj.id === id) {\r\n            obj.children = children;\r\n        } else if (!_.isEmpty(obj.children))\r\n            return obj.children.some(this.updateTree(id, children));\r\n    }\r\n\r\n    getRootTrees = (ontology = null) => {\r\n        this.props.setLoading(true);\r\n        let ont = ontology ? ontology : \"HPO\";\r\n        let url_string = this.state.configData.api_server + \"controller.php?type=ontology&getRoots&ontology=\" + ont;\r\n        axios.get(url_string)\r\n            .then((response) => {\r\n                if (response.status === 200) {\r\n                    if (response.data) {\r\n                        let expandedMouseNodes = [\"mouseTree-\" + response.data.mouseID];\r\n                        let expandedHumanNodes = [\"humanTree-\" + response.data.humanID];\r\n                        this.setState({\r\n                            treeData: response.data,\r\n                            expandedMouseNodes: expandedMouseNodes,\r\n                            expandedHumanNodes: expandedHumanNodes,\r\n                        });\r\n                        this.props.setLoading(false);\r\n                    } else {\r\n\r\n                    }\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                console.log(\"An error occurred retrieving root tree data.\");\r\n                this.setState({conErrorStatus: true});\r\n                this.props.setLoading(false);\r\n            });\r\n    }\r\n\r\n    getRootTree = (ontology, species) => {\r\n        this.props.setLoading(true);\r\n        let mappingOnt = ontology === \"MP\" ? this.state.humanOntology : \"MP\";\r\n        let url_string = this.state.configData.api_server + \"controller.php?type=ontology&getRoot&ontology=\" + ontology + \"&mappingOnt=\" + mappingOnt;\r\n        axios.get(url_string)\r\n            .then((response) => {\r\n                if (response.status === 200) {\r\n                    if (response.data) {\r\n                        if (species === \"human\") {\r\n                            let expandedHumanNodes = [\"humanTree-term-1\"];\r\n                            let tree = this.state.treeData;\r\n                            tree[\"humanTree\"] = response.data.tree;\r\n                            this.setState({treeData: tree, expandedHumanNodes: expandedHumanNodes});\r\n                            this.props.setLoading(false);\r\n                        } else {\r\n                            let expandedMouseNodes = [\"mouseTree-term-1\"];\r\n                            let tree = this.state.treeData;\r\n                            tree[\"mouseTree\"] = response.data.tree;\r\n                            this.setState({treeData: tree, expandedMouseNodes: expandedMouseNodes});\r\n                            this.props.setLoading(false);\r\n                        }\r\n                    }\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                console.log(\"An error occurred retrieving root tree data.\");\r\n                this.setState({conErrorStatus: true});\r\n                this.props.setLoading(false);\r\n            });\r\n    }\r\n\r\n    getTermChildren = (e, tree, ont) => {\r\n        let url_string = this.state.configData.api_server + \"/controller.php?type=ontology&childSearch&term=\" + e + \"&ontology=\" + ont + \"&mappingOntology=\" + this.state.humanOntology;\r\n        axios.get(url_string)\r\n            .then((response) => {\r\n                if (response.status === 200) {\r\n                    if (response.data) {\r\n                        if (tree === \"mouse\") {\r\n                            let tree = this.state.treeData;\r\n                            [tree[\"mouseTree\"]].forEach(this.updateTree(e, response.data));\r\n                            this.setState({treeData: tree});\r\n                        } else {\r\n                            let tree = this.state.treeData;\r\n                            [tree[\"humanTree\"]].forEach(this.updateTree(e, response.data));\r\n                            this.setState({treeData: tree});\r\n                        }\r\n\r\n                    }\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                this.setState({searchOpen: true, tableData: null});\r\n                console.log(\"An error occurred searching for ontology mappings.\");\r\n            });\r\n    }\r\n\r\n    termSearchBtnClick = (term) => {\r\n        this.setState({searchInput: term});\r\n        this.search();\r\n    }\r\n\r\n    genotypeHandler = () => {\r\n        this.setState({genotypeTermID: this.state.breakdownType !== 2 ? this.state.treeData.humanID : this.state.treeData.mouseID, genotypeOntology: this.state.breakdownType !== 2 ? this.state.humanOntology : \"MP\"});\r\n    }\r\n\r\n    mouseSearchBtnClick = (e) => {\r\n        let input = typeof e === \"string\" ? e : document.getElementById(\"mouseSearchInput\").value;\r\n        this.setState({mouseSearchInput: input});\r\n        this.search(input, \"MP\");\r\n    }\r\n\r\n    humanSearchBtnClick = (e) => {\r\n        let input = typeof e === \"string\" ? e : document.getElementById(\"humanSearchInput\").value;\r\n        this.setState({humanSearchInput: input});\r\n        this.search(input, this.state.humanOntology);\r\n    }\r\n\r\n    setexpandedMouseNodes = (nodes, ids) => {\r\n        if (Array.isArray(ids[0]))\r\n            ids = ids[0];\r\n        ids.push(nodes.id);\r\n        this.tempExpandedmouseIds = ids;\r\n        return Array.isArray(nodes.isa) ? nodes.isa.map((node) => this.setexpandedMouseNodes(node, ids)) : ids;\r\n    }\r\n    setexpandedHumanNodes = (nodes, ids) => {\r\n        if (Array.isArray(ids[0]))\r\n            ids = ids[0];\r\n        ids.push(nodes.id);\r\n        this.tempExpandedhumanIds = ids;\r\n        return Array.isArray(nodes.isa) ? nodes.isa.map((node) => this.setexpandedHumanNodes(node, ids)) : ids;\r\n    }\r\n\r\n    isLoadingRequired = (id, obj) => {\r\n        if (obj.id === id && _.isEmpty(obj.children)) {\r\n            return true;\r\n        } else if (!_.isEmpty(obj.children)) {\r\n            for (var i = 0; i < Object.keys(obj.children).length; i++) {\r\n                if (this.isLoadingRequired(id, obj.children[i]))\r\n                    return true;\r\n            }\r\n        }\r\n    }\r\n\r\n    handleMouseToggle = (event, nodeIds) => {\r\n        let tree = this.state.treeData.mouseTree;\r\n        let termID = event.currentTarget.parentNode.dataset[\"term\"];\r\n        let nodeID = event.currentTarget.parentNode.id;\r\n        var loadingRequired = this.isLoadingRequired(termID, tree);\r\n        if (loadingRequired) {\r\n            this.getTermChildren(termID, \"mouse\", \"mp\");\r\n        }\r\n        this.setState({expandedMouseNodes: nodeIds});\r\n    }\r\n\r\n    handleMouseSelect = (event, nodeIds) => {\r\n        this.setState({selectedMouseNodes: nodeIds});\r\n    }\r\n\r\n    handleHumanToggle = (event, nodeIds) => {\r\n        let tree = this.state.treeData.humanTree;\r\n        let termID = event.currentTarget.parentNode.dataset[\"term\"];\r\n        let nodeID = event.currentTarget.parentNode.id;\r\n        var loadingRequired = this.isLoadingRequired(termID, tree);\r\n        if (loadingRequired) {\r\n            this.getTermChildren(termID, \"human\", this.state.humanOntology);\r\n        }\r\n        this.setState({expandedHumanNodes: nodeIds});\r\n    }\r\n\r\n    handleHumanSelect = (event, nodeIds) => {\r\n        this.setState({selectedHumanNodes: nodeIds});\r\n    }\r\n\r\n    scrollTrees = () => {\r\n        if (this.state.mappedMousePhenotype && this.state.isMappingPresent) {\r\n            var obj = this;\r\n            window.setTimeout(function () {\r\n                let humanPhenotype = obj.state.mappedHumanPhenotype;\r\n                let mousePhenotype = obj.state.mappedMousePhenotype;\r\n                let mouseElement = document.getElementById($(\"#mouseTree li[data-term='\" + mousePhenotype + \"']\")[0].id);\r\n                let humanElement = document.getElementById($(\"#humanTree li[data-term='\" + humanPhenotype + \"']\")[0].id);\r\n                $(\"#humanTree\").scrollTop(0);\r\n                $(\"#mouseTree\").scrollTop(0);\r\n                $('#humanTree').animate({\r\n                    scrollTop: $(humanElement).offset().top - ($(\"#humanTree\").position().top + 90)\r\n                }, 1500);\r\n                $('#mouseTree').animate({\r\n                    scrollTop: $(mouseElement).offset().top - ($(\"#mouseTree\").position().top + 90)\r\n                }, 1500);\r\n                obj.setState({mappedMousePhenotype: null, mappedHumanPhenotype: null});\r\n            }, 500);\r\n\r\n        }\r\n        this.props.setLoading(false);\r\n    }\r\n\r\n    getHumanPhenotypeBreakdown = (e) => {\r\n        let treeData = this.state.treeData;\r\n        treeData.humanID = e;\r\n        treeData.mouseID = null;\r\n        this.props.setLoading(true);\r\n        this.setState({treeData: treeData, mouseID: null, isDataPresent: true, isMappingPresent: false, breakdownType: 1});\r\n    }\r\n\r\n    getMousePhenotypeBreakdown = (e) => {\r\n        let treeData = this.state.treeData;\r\n        treeData.humanID = null;\r\n        treeData.mouseID = e;\r\n        this.props.setLoading(true);\r\n        this.setState({treeData: treeData, mouseID: null, isDataPresent: true, isMappingPresent: false, breakdownType: 2});\r\n    }\r\n\r\n    onBreakdownFinish = (e) => {\r\n        this.props.setLoading(false);\r\n    }\r\n\r\n    changeHumanOntology = (e) => {\r\n        this.setState({\r\n            humanOntology: e.target.value,\r\n            selectedHumanNodes: [''],\r\n            expandedHumanNodes: [''],\r\n            selectedMouseNodes: [''],\r\n            expandedMouseNodes: [''],\r\n            isMappingPresent: false,\r\n            isDataPresent: false,\r\n        });\r\n        this.getRootTrees(e.target.value);\r\n    }\r\n\r\n    getPhenotypeBreakdownComponent = () => {\r\n        switch (this.state.breakdownType) {\r\n            case 0:\r\n                return <PhenotypeResultBreakdown genotypeHandler={this.genotypeHandler}\r\n                                          mousePhenotype={this.state.treeData.mouseID}\r\n                                          humanPhenotype={this.state.treeData.humanID}\r\n                                          humanOntology={this.state.humanOntology}\r\n                                          onBreakdownFinish={this.onBreakdownFinish}/>;\r\n            case 1:\r\n                return <PhenotypeResultBreakdown genotypeHandler={this.genotypeHandler}\r\n                                          humanPhenotype={this.state.treeData.humanID}\r\n                                          humanOntology={this.state.humanOntology}\r\n                                          onBreakdownFinish={this.onBreakdownFinish}/>;\r\n            case 2:\r\n                return <PhenotypeResultBreakdown genotypeHandler={this.genotypeHandler}\r\n                                          mousePhenotype={this.state.treeData.mouseID}\r\n                                          onBreakdownFinish={this.onBreakdownFinish}/>;\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const {classes} = this.props;\r\n        const {\r\n            loading,\r\n            treeData,\r\n            conErrorStatus,\r\n            selectedMouseNodes,\r\n            selectedHumanNodes,\r\n            expandedMouseNodes,\r\n            expandedHumanNodes,\r\n            mappedMousePhenotype,\r\n            mappedHumanPhenotype,\r\n            mouseSearchInput,\r\n            humanSearchInput\r\n        } = this.state;\r\n        const mouseTree = treeData ? treeData.mouseTree : null;\r\n        const humanTree = treeData ? treeData.humanTree : null;\r\n\r\n        if (conErrorStatus)\r\n            throw new Error(\"A connection error occurred retrieving ontology trees.\");\r\n\r\n        return (<SwitchTransition>\r\n            <CSSTransition\r\n                key={this.state.genotypeTermID}\r\n                addEndListener={(node, done) => node.addEventListener(\"transitionend\", done, false)}\r\n                classNames='fade'\r\n            >{!this.state.genotypeTermID ? (\r\n                <div class=\"pageContainer\">\r\n                    <ErrorBoundary>\r\n                        <Grid container spacing={2}>\r\n                            <Grid item xs>\r\n                                <Paper id=\"humanTreeWrapper\" className={classes.paper}>\r\n                                    <InputLabel id=\"human-ont-input-label\">Human Ontology</InputLabel>\r\n                                    <Select\r\n                                        labelId=\"human-ont-input-label\"\r\n                                        id=\"human-ont-input-select\"\r\n                                        value={this.state.humanOntology}\r\n                                        onChange={this.changeHumanOntology}\r\n                                        label=\"Age\"\r\n                                    >\r\n                                        <MenuItem value={\"HPO\"}>Human Phenotype Ontology</MenuItem>\r\n                                        <MenuItem value={\"MESH\"}>Medical Subject Headings</MenuItem>\r\n                                    </Select>\r\n                                    <br/><br/>\r\n                                    <Autocomplete\r\n                                        freeSolo\r\n                                        id=\"humanSearchInput\"\r\n                                        className={classes.autoComplete}\r\n                                        onInputChange={this.retrieveLiveSearch}\r\n                                        defaultValue={humanSearchInput}\r\n                                        renderInput={(params) => (\r\n                                            <TextField\r\n                                                {...params}\r\n                                                label=\"Term search\"\r\n                                                variant=\"outlined\"\r\n                                                InputProps={{\r\n                                                    ...params.InputProps,\r\n                                                    endAdornment: (\r\n                                                        <React.Fragment>\r\n                                                            {this.humanLiveLoading ?\r\n                                                                <CircularProgress color=\"inherit\"\r\n                                                                                  size={20}/> : null}\r\n                                                            {params.InputProps.endAdornment}\r\n                                                        </React.Fragment>\r\n                                                    ),\r\n                                                }}\r\n                                                onKeyDown={e => {\r\n                                                    if (e.keyCode === 13) {\r\n                                                        this.humanSearchBtnClick();\r\n                                                    }\r\n                                                }}\r\n                                            />\r\n                                        )}\r\n                                        options={this.state.humanLiveSearchResults}\r\n                                        getOptionLabel={(option) => option.FSN ? option.FSN : this.state.humanSearchInput}\r\n                                        renderOption={(option) => option.FSN + \" (\" + option.type + \")\"}/>\r\n                                    <p>Search for terms with mappings to the MP ontology</p>\r\n                                    <Button size=\"large\" color=\"primary\" variant=\"contained\" id=\"search_btn\"\r\n                                            onClick={this.humanSearchBtnClick}>Search</Button>\r\n                                    {this.state.humanSearchFailed ?\r\n                                        <p style={{color: \"red\"}}>No match found.</p> : null}\r\n                                    {\r\n                                        !humanTree ? null :\r\n                                            <OntologyTree treeID=\"humanTree\"\r\n                                                          selectedPhenotypeLabel={mappedHumanPhenotype}\r\n                                                          onMappingClick={this.humanSearchBtnClick}\r\n                                                          expanded={expandedHumanNodes}\r\n                                                          onBtnClick={this.getHumanPhenotypeBreakdown}\r\n                                                          selected={selectedHumanNodes}\r\n                                                          onSelect={this.handleHumanSelect}\r\n                                                          onToggle={this.handleHumanToggle} treeData={humanTree}\r\n                                                          sourceOntology={this.state.humanOntology}\r\n                                                          mappingOntology=\"MP\"/>\r\n                                    }\r\n\r\n                                </Paper>\r\n                            </Grid>\r\n                            <Grid item xs>\r\n                                {\r\n                                    this.state.isDataPresent ? this.getPhenotypeBreakdownComponent() : null\r\n\r\n                                }\r\n                            </Grid>\r\n                            <Grid item xs>\r\n                                <Paper id=\"mouseTreeWrapper\" className={classes.paper}>\r\n                                    <div className=\"ontologySearchWrapper\">\r\n                                        <h3>Mammalian Phenotype</h3>\r\n                                        <Autocomplete\r\n                                            freeSolo\r\n                                            className={classes.autoComplete}\r\n                                            id=\"mouseSearchInput\"\r\n                                            defaultValue={mouseSearchInput}\r\n                                            onInputChange={this.retrieveLiveSearch}\r\n                                            renderInput={(params) => (\r\n                                                <TextField\r\n                                                    {...params}\r\n                                                    label=\"Term search\"\r\n                                                    variant=\"outlined\"\r\n                                                    InputProps={{\r\n                                                        ...params.InputProps,\r\n                                                        endAdornment: (\r\n                                                            <React.Fragment>\r\n                                                                {this.mouseLiveLoading ?\r\n                                                                    <CircularProgress color=\"inherit\"\r\n                                                                                      size={20}/> : null}\r\n                                                                {params.InputProps.endAdornment}\r\n                                                            </React.Fragment>\r\n                                                        ),\r\n                                                    }}\r\n                                                    onKeyDown={e => {\r\n                                                        if (e.keyCode === 13) {\r\n                                                            this.mouseSearchBtnClick();\r\n                                                        }\r\n                                                    }}\r\n                                                />\r\n                                            )}\r\n                                            options={this.state.mouseLiveSearchResults}\r\n                                            getOptionLabel={(option) => option.FSN ? option.FSN : this.state.mouseSearchInput}\r\n                                            renderOption={(option) => option.FSN + \" (\" + option.type + \")\"}/>\r\n                                        <p>Search for MP terms which map to the selected human ontology.</p>\r\n                                        <Button size=\"large\" color=\"primary\" variant=\"contained\" id=\"search_btn\"\r\n                                                onClick={this.mouseSearchBtnClick}>Search</Button>\r\n                                        {this.state.mouseSearchFailed ?\r\n                                            <p style={{color: \"red\"}}>No match found.</p> : null}\r\n                                    </div>\r\n                                    {!mouseTree ? null :\r\n                                        <OntologyTree treeID=\"mouseTree\"\r\n                                                      selectedPhenotypeLabel={mappedMousePhenotype}\r\n                                                      onMappingClick={this.mouseSearchBtnClick}\r\n                                                      expanded={expandedMouseNodes}\r\n                                                      onBtnClick={this.getMousePhenotypeBreakdown}\r\n                                                      selected={selectedMouseNodes}\r\n                                                      onSelect={this.handleMouseSelect}\r\n                                                      onToggle={this.handleMouseToggle} treeData={mouseTree}\r\n                                                      sourceOntology=\"MP\" mappingOntology=\"HPO\"/>}\r\n                                </Paper>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </ErrorBoundary>\r\n                </div>) : <div>\r\n                <Button size=\"large\" color=\"primary\" variant=\"contained\" onClick={() => this.setState({\r\n                    genotypeTermID: null,\r\n                    genotypeOntology: null\r\n                })}>Back</Button><br/>\r\n                <Genome genotypeTermID={this.state.genotypeTermID}\r\n                        genotypeOntology={this.state.genotypeOntology}/>\r\n            </div>}\r\n            </CSSTransition>\r\n        </SwitchTransition>);\r\n    }\r\n}\r\n\r\nexport default withStyles(useStyles)(OntologyHierarchy);","C:\\Users\\Thomas\\Github Repos\\GC_Mouse_Integration\\src\\Genome\\Genome.js",[],"C:\\Users\\Thomas\\Github Repos\\GC_Mouse_Integration\\src\\Home\\Components\\MainMenuItem.js",["120","121"],"import React, {useCallback} from 'react';\r\nimport {Paper, withStyles} from \"@material-ui/core\";\r\nimport './MainMenuItem.css';\r\nimport Typography from \"@material-ui/core/Typography\";\r\n\r\nconst useStyles = theme => ({\r\n    paper: {\r\n        padding: theme.spacing(2),\r\n        textAlign: 'center',\r\n        color: theme.palette.text.secondary,\r\n        height: 500,\r\n        zIndex: 1,\r\n        position: 'relative',\r\n        border: \"solid 1px black\",\r\n        width: \"100%\",\r\n    },\r\n    img: {\r\n        width: 100,\r\n        marginTop: \"10%\",\r\n    },\r\n    header: {\r\n        textDecoration: \"none\",\r\n        marginTop: \"5%\",\r\n        position: \"absolute\",\r\n        textAlign: \"center\",\r\n        width: \"90%\",\r\n    },\r\n    text: {\r\n        textDecoration: 'none',\r\n        marginTop: \"30%\",\r\n        position: \"absolute\",\r\n    }\r\n});\r\n\r\nclass MainMenuItem extends React.Component {\r\n\r\n    state = {isZoomed: false};\r\n\r\n    toggle = () => {\r\n        this.setState({\r\n            isZoomed: !this.state.isZoomed\r\n        });\r\n    }\r\n\r\n    render() {\r\n        const {classes} = this.props;\r\n        const {isZoomed} = this.state;\r\n\r\n        return (\r\n            <Paper style={{transform: this.state.isZoomed ? 'scale(1.1)' : 'scale(1)',\r\n                transition: this.state.isZoomed ? '0.3s' :  '0.3s', zIndex: this.state.isZoomed ? 99 :  1}}\r\n                   onMouseEnter={() => this.toggle()}\r\n                   onMouseLeave={() => this.toggle()} className={classes.paper}>\r\n                <img className={classes.img} src={this.props.image} alt={this.props.alt}/>\r\n                <Typography className={classes.header} variant='h5' gutterBottom>{this.props.heading}</Typography>\r\n                <Typography className={classes.text} variant='body1' gutterBottom>{this.props.body}</Typography>\r\n            </Paper>);\r\n    }\r\n}\r\n\r\nexport default withStyles(useStyles)(MainMenuItem);","C:\\Users\\Thomas\\Github Repos\\GC_Mouse_Integration\\src\\UtilityComponents\\ConfigData.js",[],"C:\\Users\\Thomas\\Github Repos\\GC_Mouse_Integration\\src\\UtilityComponents\\TabPanel.js",["122"],"import React, {useCallback} from 'react';\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport {Box} from \"@material-ui/core\";\r\n\r\nclass TabPanel extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {};\r\n    }\r\n\r\n\r\n    render() {\r\n        const {children, value, index, ...other} = this.props;\r\n        return (\r\n            <div role=\"tabpanel\"\r\n                 hidden={value !== index}\r\n                 id={`full-width-tabpanel-${index}`}\r\n                 aria-labelledby={`full-width-tab-${index}`}\r\n                 {...other}>\r\n                {value === index && (\r\n                    <Box p={3}>\r\n                        <Typography>{children}</Typography>\r\n                    </Box>\r\n                )}\r\n            </div>\r\n        );\r\n\r\n    }\r\n}\r\n\r\n\r\nexport default TabPanel;","C:\\Users\\Thomas\\Github Repos\\GC_Mouse_Integration\\src\\Genome\\Components\\GenomeBrowser.js",["123"],"C:\\Users\\Thomas\\Github Repos\\GC_Mouse_Integration\\src\\UtilityComponents\\LoadingSpinner\\LoadingSpinner.js",["124"],"import React, {useCallback} from 'react';\r\nimport './LoadingSpinner.css';\r\n\r\nclass LoadingSpinner extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {loading: false};\r\n    }\r\n\r\n    render() {\r\n        if (this.props.loading)\r\n            return (\r\n                <div className=\"loading-container\">\r\n                    <div className=\"loading\">\r\n                        <div className=\"loader\">\r\n                            <div></div>\r\n                            <div></div>\r\n                            <div></div>\r\n                            <div></div>\r\n                            <div></div>\r\n                            <div></div>\r\n                            <div></div>\r\n                            <div></div>\r\n                            <div></div>\r\n                            <div></div>\r\n                            <div></div>\r\n                            <div></div>\r\n                            <div></div>\r\n                            <div></div>\r\n                            <div></div>\r\n                        </div>\r\n                        <h4>Loading...</h4>\r\n                    </div>\r\n                </div>\r\n            );\r\n        else\r\n            return (null);\r\n    }\r\n}\r\n\r\nexport default LoadingSpinner;","C:\\Users\\Thomas\\Github Repos\\GC_Mouse_Integration\\src\\PhenotypeSearch\\Components\\PhenotypeResultBreakdown.js",["125","126","127"],"import React from \"react\";\r\nimport './PhenotypeResultBreakdown.css';\r\nimport ResultTable from \"../../UtilityComponents/ResultTable\";\r\nimport $ from \"jquery\";\r\nimport axios from \"axios\";\r\nimport {\r\n    AppBar,\r\n    Button,\r\n    FormControl,\r\n    Grid,\r\n    InputLabel,\r\n    MenuItem,\r\n    Paper,\r\n    Select,\r\n    Tab,\r\n    Tabs, Typography,\r\n    withStyles\r\n} from \"@material-ui/core\";\r\nimport TabPanel from \"../../UtilityComponents/TabPanel\";\r\nimport api_server from \"../../UtilityComponents/ConfigData\";\r\nimport {Graph} from \"react-d3-graph\";\r\nimport _ from \"lodash\";\r\n\r\nconst useStyles = theme => ({\r\n    formControl: {\r\n        margin: theme.spacing(1),\r\n        minWidth: 120,\r\n    },\r\n    selectEmpty: {\r\n        marginTop: theme.spacing(2),\r\n    },\r\n    autoComplete: {\r\n        width: \"50%\",\r\n        marginLeft: \"auto\",\r\n        marginRight: \"auto\",\r\n    },\r\n    radio: {\r\n        width: \"50%\",\r\n        marginLeft: \"auto\",\r\n        marginRight: \"auto\"\r\n    },\r\n});\r\n\r\nclass PhenotypeResultBreakdown extends React.Component {\r\n// the graph configuration, just override the ones you need\r\n    const\r\n    myConfig = {\r\n        nodeHighlightBehavior: true,\r\n        directed: false,\r\n        staticGraphWithDragAndDrop: true,\r\n        d3: {\r\n            alphaTarget: 0.05,\r\n            disableLinkForce: true\r\n        },\r\n        node: {\r\n            color: \"blue\",\r\n            size: 300,\r\n            highlightStrokeColor: \"black\",\r\n            labelProperty: \"name\",\r\n            labelPosition: \"bottom\",\r\n        },\r\n        link: {\r\n            highlightColor: \"lightblue\",\r\n            renderLabel: true,\r\n            labelProperty: \"linkType\",\r\n            strokeWidth: 3,\r\n            fontSize: 10\r\n        },\r\n    };\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.gwasStudyClicked = this.gwasStudyClicked.bind(this);\r\n        this.experimentClicked = this.experimentClicked.bind(this);\r\n        this.triggerGenotypeEvent = this.triggerGenotypeEvent.bind(this);\r\n        this.state = {\r\n            mousePhenotype: \"\",\r\n            humanPhenotype: \"\",\r\n            breakdownData: null,\r\n            backBtnClick: null,\r\n            loading: true,\r\n            tabValue: 0,\r\n            dataTabValue: 0,\r\n            configData: api_server,\r\n            mappingGraphData: null,\r\n            mappingGraphConfig: null,\r\n            humanOntology: \"\",\r\n            mousePval: 0,\r\n            humanPval: 0,\r\n            hasData: false\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.getBreakdownData();\r\n    }\r\n\r\n    getSnapshotBeforeUpdate(prevProps) {\r\n        return{updateRequired: (this.props.mousePhenotype !== prevProps.mousePhenotype || this.props.humanPhenotype !== prevProps.humanPhenotype)};\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        if (snapshot.updateRequired) {\r\n            this.getBreakdownData();\r\n        }\r\n    }\r\n\r\n    gwasStudyClicked(study) {\r\n        let studyID = study.currentTarget.getAttribute(\"data-link\");\r\n        var win = window.open(\"https://www.gwascentral.org/study/\" + studyID, \"_blank\");\r\n        if (win)\r\n            win.focus();\r\n    }\r\n\r\n    experimentClicked(row) {\r\n        let selection = $(row.target).attr(\"data-study\");\r\n    }\r\n\r\n    getBreakdownData() {\r\n        this.setState({loading: true});\r\n        let mousePhenotype = this.props.mousePhenotype ? this.props.mousePhenotype : \"\";\r\n        let humanPhenotype = this.props.humanPhenotype ? this.props.humanPhenotype : \"\";\r\n        let humanOntology = this.props.humanOntology ? this.props.humanOntology : \"\";\r\n        let url_string = this.state.configData.api_server + \"controller.php?type=study&phenotypeBreakdown=&mouseTerm=\" + mousePhenotype + \"&humanTerm=\" + humanPhenotype + \"&humanOntology=\" + humanOntology;\r\n        axios.get(url_string)\r\n            .then((response) => {\r\n                if (response.status === 200) {\r\n                    if (response.data) {\r\n                        let dataTabValue = response.data[\"GWAS Studies\"].length > 0 ? 0 : 1;\r\n                        // graph payload (with minimalist structure)\r\n                        if (!Array.isArray(response.data[\"Mappings\"])) {\r\n                            let humanTermCoords = [50, 214];\r\n                            let mouseTermCoords = [750, 214];\r\n                            let data = {\r\n                                nodes: [\r\n                                    {\r\n                                        id: response.data[\"Mappings\"][\"humanNodeId\"],\r\n                                        name: response.data[\"Mappings\"][\"humanLabel\"],\r\n                                        x: humanTermCoords[0],\r\n                                        y: humanTermCoords[1],\r\n                                        color: \"red\",\r\n                                        symbolType: \"square\"\r\n                                    },\r\n                                    {\r\n                                        id: response.data[\"Mappings\"][\"mouseNodeId\"],\r\n                                        name: response.data[\"Mappings\"][\"mouseLabel\"],\r\n                                        x: mouseTermCoords[0],\r\n                                        y: mouseTermCoords[1],\r\n                                        color: \"blue\",\r\n                                        symbolType: \"square\"\r\n                                    }\r\n                                ],\r\n                                links: []\r\n                            };\r\n\r\n                            for (var i = 0; i < response.data[\"Mappings\"][\"mouseSynonyms\"].length; i++) {\r\n                                let mapping = response.data[\"Mappings\"][\"mouseSynonyms\"][i];\r\n                                let mouseNode = {\r\n                                    id: mapping[\"synonymId\"],\r\n                                    name: mapping[\"synonymLabel\"],\r\n                                    x: mouseTermCoords[0] - 175,\r\n                                    y: mouseTermCoords[1] - 105 + (i * 65),\r\n                                    color: \"lightblue\"\r\n                                };\r\n                                let link = {\r\n                                    source: mapping[\"synonymId\"],\r\n                                    target: response.data[\"Mappings\"][\"mouseNodeId\"],\r\n                                    linkType: \"Synonym\"\r\n                                };\r\n                                if (!data.nodes.includes(mouseNode)) {\r\n                                    data.nodes.push(mouseNode);\r\n                                }\r\n                                if (!data.links.includes(link)) {\r\n                                    data.links.push(link);\r\n                                }\r\n                            }\r\n                            for (var i = 0; i < response.data[\"Mappings\"][\"humanSynonyms\"].length; i++) {\r\n                                let mapping = response.data[\"Mappings\"][\"humanSynonyms\"][i];\r\n                                let humanNode = {\r\n                                    id: mapping[\"synonymId\"],\r\n                                    name: mapping[\"synonymLabel\"],\r\n                                    x: humanTermCoords[0] + 175,\r\n                                    y: humanTermCoords[1] - 105 + (i * 65),\r\n                                    color: \"orange\"\r\n                                };\r\n                                let link = {\r\n                                    source: response.data[\"Mappings\"][\"humanNodeId\"],\r\n                                    target: mapping[\"synonymId\"],\r\n                                    linkType: \"Synonym\"\r\n                                };\r\n                                if (!data.nodes.includes(humanNode)) {\r\n                                    data.nodes.push(humanNode);\r\n                                }\r\n                                if (!data.links.includes(link)) {\r\n                                    data.links.push(link);\r\n                                }\r\n                            }\r\n                            for (var i = 0; i < response.data[\"Mappings\"][\"matches\"].length; i++) {\r\n                                let match = response.data[\"Mappings\"][\"matches\"][i];\r\n                                let source = _.find(data.nodes, function (node) {\r\n                                    if (node.id === match[\"humanNodeId\"])\r\n                                        return true;\r\n                                });\r\n                                let target = _.find(data.nodes, function (node) {\r\n                                    if (node.id === match[\"mouseNodeId\"])\r\n                                        return true;\r\n                                });\r\n                                let link = {\r\n                                    source: source ? match[\"humanNodeId\"] : response.data[\"Mappings\"][\"humanNodeId\"],\r\n                                    target: target ? match[\"mouseNodeId\"] : response.data[\"Mappings\"][\"mouseNodeId\"],\r\n                                    linkType: match[\"isExact\"] ? \"Exact Match\" : \"Partial Match\"\r\n                                }\r\n                                if (!data.links.includes(link)) {\r\n                                    data.links.push(link);\r\n                                }\r\n                            }\r\n                            this.setState({\r\n                                breakdownData: response.data,\r\n                                dataTabValue: dataTabValue,\r\n                                mappingGraphData: data,\r\n                                loading: false,\r\n                                hasData: true\r\n                            });\r\n                        } else {\r\n                            this.setState({\r\n                                breakdownData: response.data,\r\n                                dataTabValue: dataTabValue,\r\n                                mappingGraphData: null,\r\n                                hasData: true,\r\n                                loading: false\r\n                            });\r\n                        }\r\n                    } else {\r\n                        this.setState({breakdownData: null, loading: false, mappingGraphData: null, hasData: false});\r\n                    }\r\n                }\r\n                this.props.onBreakdownFinish();\r\n            })\r\n            .catch((error) => {\r\n                console.log(\"An error occurred retrieving phenotype data.\");\r\n                this.setState({breakdownData: null, loading:false, mappingGraphData: null});\r\n                this.props.setLoading(false);\r\n                this.props.onBreakdownFinish();\r\n            });\r\n    }\r\n\r\n    getHumanTermID(breakdownData) {\r\n        if (breakdownData) {\r\n            if (breakdownData[\"Mappings\"][\"humanID\"]) {\r\n                return breakdownData[\"Mappings\"][\"humanID\"];\r\n            } else {\r\n                return \"No mapping found\";\r\n            }\r\n        }\r\n    }\r\n\r\n    getHumanTerm(breakdownData) {\r\n        if (breakdownData) {\r\n            if (breakdownData[\"Mappings\"][\"humanLabel\"]) {\r\n                return breakdownData[\"Mappings\"][\"humanLabel\"];\r\n            } else {\r\n                return \"No mapping found\";\r\n            }\r\n        }\r\n    }\r\n\r\n    getMouseTermID(breakdownData) {\r\n        if (breakdownData) {\r\n            if (breakdownData[\"Mappings\"][\"mouseID\"]) {\r\n                return breakdownData[\"Mappings\"][\"mouseID\"];\r\n            } else {\r\n                return \"No mapping found\";\r\n            }\r\n        }\r\n    }\r\n\r\n    getMouseTerm(breakdownData) {\r\n        if (breakdownData) {\r\n            if (breakdownData[\"Mappings\"][\"mouseLabel\"]) {\r\n                return breakdownData[\"Mappings\"][\"mouseLabel\"];\r\n            } else {\r\n                return \"No mapping found\";\r\n            }\r\n        }\r\n    }\r\n\r\n    getGWASStudies(breakdownData) {\r\n        if (breakdownData) {\r\n            if (breakdownData[\"GWAS Studies\"].length > 0) {\r\n\r\n            } else {\r\n                return \"0\";\r\n            }\r\n        }\r\n    }\r\n\r\n    getGeneKnockouts(breakdownData) {\r\n        if (breakdownData) {\r\n            if (breakdownData[\"Gene Knockouts\"].length > 0) {\r\n\r\n            } else {\r\n                return \"0\";\r\n            }\r\n        }\r\n    }\r\n\r\n    getHumanSynonyms(breakdownData) {\r\n        if (breakdownData) {\r\n            if (breakdownData[\"Mappings\"][\"humanSynonyms\"] && breakdownData[\"Mappings\"][\"humanSynonyms\"].length > 0) {\r\n                return breakdownData[\"Mappings\"][\"humanSynonyms\"].map((synonym, index) =>\r\n                    <li>{synonym[\"synonymLabel\"]}</li>);\r\n            } else {\r\n                return <li>None</li>;\r\n            }\r\n        }\r\n    }\r\n\r\n    getMouseSynonyms(breakdownData) {\r\n        if (breakdownData) {\r\n            if (breakdownData[\"Mappings\"][\"mouseSynonyms\"] && breakdownData[\"Mappings\"][\"mouseSynonyms\"].length > 0) {\r\n                return breakdownData[\"Mappings\"][\"mouseSynonyms\"].map((synonym, index) =>\r\n                    <li>{synonym[\"synonymLabel\"]}</li>);\r\n            } else {\r\n                return <li>None</li>;\r\n            }\r\n        }\r\n    }\r\n\r\n    openGenePage(gene_key) {\r\n        gene_key = gene_key.currentTarget.getAttribute(\"data-link\");\r\n        window.open(\"https://www.mousephenotype.org/data/genes/\" + gene_key, \"_blank\").focus();\r\n    }\r\n\r\n    openProcedurePage(procedure_key) {\r\n        procedure_key = procedure_key.currentTarget.getAttribute(\"data-link\");\r\n        window.open(\"https://web.mousephenotype.org/impress/ProcedureInfo?procID=\" + procedure_key, \"_blank\").focus();\r\n    }\r\n\r\n    openParameterPage(parameter_key) {\r\n        let procedure_key = parameter_key.currentTarget.previousSibling.getAttribute(\"data-link\");\r\n        parameter_key = parameter_key.currentTarget.getAttribute(\"data-link\");\r\n        window.open(\"https://web.mousephenotype.org/impress/OntologyInfo?procID=\" + procedure_key + \"#\" + parameter_key, \"_blank\").focus();\r\n    }\r\n\r\n    humanPValChanged = (e) => {\r\n        this.setState({humanPval: e.target.value});\r\n    }\r\n\r\n    mousePValChanged = (e) => {\r\n        this.setState({mousePval: e.target.value});\r\n    }\r\n\r\n    getExperimentData() {\r\n        let data = this.state.breakdownData[\"Gene Knockouts\"];\r\n        let pval = this.state.mousePval;\r\n        let filtered = [];\r\n        for (var i = 0; i < data.length; i++) {\r\n            if (data[i][\"-log P-value\"] >= pval)\r\n                filtered.push(data[i]);\r\n        }\r\n        return filtered;\r\n    }\r\n\r\n    getGWASData() {\r\n        let data = this.state.breakdownData[\"GWAS Studies\"];\r\n        let pval = this.state.humanPval;\r\n        let filtered = [];\r\n        for (var i = 0; i < data.length; i++) {\r\n            if (data[i][\"-log P-value\"] >= pval)\r\n                filtered.push(data[i]);\r\n        }\r\n        return filtered;\r\n    }\r\n\r\n    triggerGenotypeEvent() {\r\n        this.props.genotypeHandler();\r\n    }\r\n\r\n    render() {\r\n        const {breakdownData,loading, tabValue, dataTabValue, mappingGraphData, hasData} = this.state;\r\n        const {classes} = this.props;\r\n        if (loading)\r\n            return null;\r\n        if (hasData)\r\n            return (\r\n                <div>\r\n                    <Paper id=\"phenotypeResultsContainer\" className=\"container\">\r\n                        {this.props.backBtnClick ?\r\n                            <Button variant=\"contained\" color=\"primary\"\r\n                                    onClick={this.props.backBtnClick}>Back</Button> : null}\r\n                        <div className=\"phenotype-breakdown-container\">\r\n                            <AppBar position=\"static\" color=\"default\">\r\n                                <Tabs\r\n                                    value={tabValue}\r\n                                    onChange={(e, val) => this.setState({tabValue: val})}\r\n                                    indicatorColor=\"primary\"\r\n                                    textColor=\"primary\"\r\n                                    variant=\"fullWidth\"\r\n                                    aria-label=\"full width tabs example\"\r\n                                >\r\n                                    <Tab label=\"Data\"/>\r\n                                    <Tab label=\"Mapping\"/>\r\n                                </Tabs>\r\n                            </AppBar>\r\n                            <TabPanel value={tabValue} index={0} className=\"subTabMenu\">\r\n                                <AppBar position=\"static\" color=\"default\">\r\n                                    <Tabs\r\n                                        value={dataTabValue}\r\n                                        onChange={(e, val) => val > 1 ? e.preventDefault() : this.setState({dataTabValue: val})}\r\n                                        indicatorColor=\"primary\"\r\n                                        textColor=\"primary\"\r\n                                        aria-label=\"full width tabs example\"\r\n                                        variant=\"fullWidth\"\r\n                                        centered\r\n                                    >\r\n                                        <Tab\r\n                                            label={(breakdownData ? breakdownData[\"GWAS Studies\"].length : 0) + \" Human GWAS Studies\"}\r\n                                            wrapped/>\r\n                                        <Tab\r\n                                            label={(breakdownData ? breakdownData[\"Gene Knockouts\"].length : 0) + \" Mouse Gene Knockouts\"}\r\n                                            wrapped/>\r\n                                        <Button className=\"tab-button\" variant=\"contained\" color=\"primary\" onClick={() => this.triggerGenotypeEvent()}>Genotype</Button>\r\n                                    </Tabs>\r\n                                </AppBar>\r\n                                <TabPanel value={dataTabValue} index={0}>\r\n                                    <div style={{width: \"100%\"}}>\r\n                                        <FormControl style={{marginLeft: \"44%\"}} className={classes.formControl}\r\n                                                     onChange={this.humanPValChanged}>\r\n                                            <InputLabel shrink>Human P-value</InputLabel>\r\n                                            <Select value={this.state.humanPval} className={classes.selectEmpty}\r\n                                                    id=\"human_pval_select\"\r\n                                                    onChange={this.humanPValChanged}>\r\n                                                <MenuItem value={0}>0</MenuItem>\r\n                                                <MenuItem value={1}>1</MenuItem>\r\n                                                <MenuItem value={2}>2</MenuItem>\r\n                                                <MenuItem value={3}>3</MenuItem>\r\n                                                <MenuItem value={4}>4</MenuItem>\r\n                                                <MenuItem value={5}>5</MenuItem>\r\n                                                <MenuItem value={6}>6</MenuItem>\r\n                                                <MenuItem value={7}>7</MenuItem>\r\n                                                <MenuItem value={8}>8</MenuItem>\r\n                                                <MenuItem value={9}>9</MenuItem>\r\n                                                <MenuItem value={10}>10</MenuItem>\r\n                                            </Select>\r\n                                        </FormControl>\r\n                                    </div>\r\n\r\n                                    {breakdownData ?\r\n                                        <ResultTable isSearchResult={false} orderBy={\"name\"} hiddenHeaders={[\"id\"]} dataHeaders={{\"name\": \"id\"}}\r\n                                                     cellClickHandlers={{\"name\": this.gwasStudyClicked}}\r\n                                                     tableData={this.getGWASData()}/> : null}\r\n                                </TabPanel>\r\n                                <TabPanel value={dataTabValue} index={1}>\r\n                                    <div style={{width: \"100%\"}}>\r\n                                        <FormControl style={{marginLeft: \"44%\"}} className={classes.formControl}>\r\n                                            <InputLabel shrink>Mouse P-value</InputLabel>\r\n                                            <Select value={this.state.mousePval} className={classes.selectEmpty} id=\"select\"\r\n                                                    onChange={this.mousePValChanged}>\r\n                                                <MenuItem value={0}>0</MenuItem>\r\n                                                <MenuItem value={1}>1</MenuItem>\r\n                                                <MenuItem value={2}>2</MenuItem>\r\n                                                <MenuItem value={3}>3</MenuItem>\r\n                                                <MenuItem value={4}>4</MenuItem>\r\n                                                <MenuItem value={5}>5</MenuItem>\r\n                                                <MenuItem value={6}>6</MenuItem>\r\n                                                <MenuItem value={7}>7</MenuItem>\r\n                                                <MenuItem value={8}>8</MenuItem>\r\n                                                <MenuItem value={9}>9</MenuItem>\r\n                                                <MenuItem value={10}>10</MenuItem>\r\n                                            </Select>\r\n                                        </FormControl>\r\n                                    </div>\r\n\r\n                                    {breakdownData ? <ResultTable isSearchResult={false}  orderBy={\"Gene\"} cellClickHandlers={{\r\n                                        \"Gene\": this.openGenePage,\r\n                                        \"Procedure\": this.openProcedurePage,\r\n                                        \"Parameter\": this.openParameterPage\r\n                                    }} dataHeaders={{\r\n                                        \"Gene\": \"Gene Key\",\r\n                                        \"Parameter\": \"Parameter Key\",\r\n                                        \"Procedure\": \"Procedure Key\"\r\n                                    }} hiddenHeaders={[\"Procedure Key\", \"Parameter Key\", \"Gene Key\"]}\r\n                                                                  tableData={this.getExperimentData()}/> : null}\r\n                                </TabPanel>\r\n                            </TabPanel>\r\n                            <TabPanel value={tabValue} index={1}>\r\n                                {\r\n                                    breakdownData && !Array.isArray(breakdownData[\"Mappings\"]) ? (<div>\r\n                                            <Grid container>\r\n                                                <Grid item xs>\r\n                                                    <h4 className=\"center\">Homo Sapiens</h4>\r\n                                                </Grid>\r\n                                                <Grid item xs>\r\n                                                    <h4 className=\"center\">Mus Musculus</h4>\r\n                                                </Grid>\r\n                                            </Grid>\r\n                                            <Grid container>\r\n                                                <Grid item xs={3} className=\"col highlight\">\r\n                                                    <p>ID</p>\r\n                                                </Grid>\r\n                                                <Grid item xs={3}>\r\n                                                    <p id=\"HPO-Matched-Term\">{this.getHumanTermID(breakdownData)}</p>\r\n                                                </Grid>\r\n                                                <Grid item xs={3} className=\"col highlight\">\r\n                                                    <p>ID</p>\r\n                                                </Grid>\r\n                                                <Grid item xs={3}>\r\n                                                    <p id=\"MP-Matched-Term\">{this.getMouseTermID(breakdownData)}</p>\r\n                                                </Grid>\r\n                                                <Grid item xs={3} className=\"col highlight\">\r\n                                                    <p>Term</p>\r\n                                                </Grid>\r\n                                                <Grid item xs={3}>\r\n                                                    <p id=\"HPO-Matched-Term\">{this.getHumanTerm(breakdownData)}</p>\r\n                                                </Grid>\r\n                                                <Grid item xs={3} className=\"col highlight\">\r\n                                                    <p>Term</p>\r\n                                                </Grid>\r\n                                                <Grid item xs={3}>\r\n                                                    <p id=\"MP-Matched-Term\">{this.getMouseTerm(breakdownData)}</p>\r\n                                                </Grid>\r\n\r\n                                            </Grid>\r\n                                            <Grid container>\r\n                                                <Grid item xs={3} className=\"col highlight\">\r\n                                                    <p>Synonyms</p>\r\n                                                </Grid>\r\n                                                <Grid item xs={3} className=\"col\">\r\n                                                    <ul>\r\n                                                        {this.getHumanSynonyms(breakdownData)}\r\n                                                    </ul>\r\n                                                </Grid>\r\n                                                <Grid item xs={3} className=\"col highlight\">\r\n                                                    <p>Synonyms</p>\r\n                                                </Grid>\r\n                                                <Grid item xs={3} className=\"col\">\r\n                                                    <ul>\r\n                                                        {this.getMouseSynonyms(breakdownData)}\r\n                                                    </ul>\r\n                                                </Grid>\r\n                                            </Grid>\r\n                                            <Grid container>\r\n                                                <Grid item xs={3} className=\"col\">\r\n                                                    <svg className=\"legendIcon\" xmlns=\"http://www.w3.org/2000/svg\">\r\n                                                        <circle cx=\"5\" cy=\"5\" r=\"10px\" fill=\"red\"/>\r\n                                                    </svg>\r\n                                                    {this.props.humanOntology === \"MESH\" ? \" MeSH Term\" : \" HPO Term\"}\r\n                                                </Grid>\r\n                                                <Grid item xs={3} className=\"col\">\r\n                                                    <svg className=\"legendIcon\" xmlns=\"http://www.w3.org/2000/svg\">\r\n                                                        <circle cx=\"5\" cy=\"5\" r=\"10px\" fill=\"blue\"/>\r\n                                                    </svg>\r\n                                                    {\" MP Term\"}\r\n                                                </Grid>\r\n                                            </Grid>\r\n                                            <Grid container>\r\n                                                <Grid item xs={3} className=\"col\">\r\n                                                    <svg className=\"legendIcon\" xmlns=\"http://www.w3.org/2000/svg\">\r\n                                                        <circle cx=\"5\" cy=\"5\" r=\"10px\" fill=\"orange\"/>\r\n                                                    </svg>\r\n                                                    {this.props.humanOntology === \"MESH\" ? \" MeSH Synonym\" : \" HPO Synonym\"}\r\n                                                </Grid>\r\n                                                <Grid item xs={3} className=\"col\">\r\n                                                    <svg className=\"legendIcon\" xmlns=\"http://www.w3.org/2000/svg\">\r\n                                                        <circle cx=\"5\" cy=\"5\" r=\"10px\" fill=\"lightblue\"/>\r\n                                                    </svg>\r\n                                                    {\" MP Synonym\"}\r\n                                                </Grid>\r\n                                            </Grid>\r\n                                            <Graph\r\n                                                id=\"graph-id\" // id is mandatory\r\n                                                data={mappingGraphData}\r\n                                                config={this.myConfig}\r\n                                            />\r\n                                        </div>\r\n                                    ) : <p>No mappings identified.</p>\r\n                                }\r\n\r\n                            </TabPanel>\r\n                        </div>\r\n                    </Paper>\r\n                </div>\r\n            );\r\n        else\r\n            return (\r\n              <div>\r\n                  <Paper id=\"phenotypeResultsContainer\" className=\"container\">\r\n                      <Typography>No results found for {this.props.humanPhenotype ? this.props.humanPhenotype : this.props.mousePhenotype}</Typography>\r\n                  </Paper>\r\n              </div>\r\n            );\r\n    }\r\n}\r\n\r\nexport default withStyles(useStyles)(PhenotypeResultBreakdown);","C:\\Users\\Thomas\\Github Repos\\GC_Mouse_Integration\\src\\Genome\\Components\\AppIdeogram.js",["128","129"],"import React, {Component} from \"react\";\r\nimport Ideogram from \"ideogram\";\r\nimport './AppIdeogram.css'\r\nimport {Button, FormControl, InputLabel, MenuItem, Select, Typography, withStyles} from \"@material-ui/core\";\r\nimport $ from \"jquery\";\r\nimport {api_server} from \"../../UtilityComponents/ConfigData\";\r\n\r\nconst useStyles = theme => ({\r\n    formControl: {\r\n        margin: theme.spacing(1),\r\n        minWidth: 120,\r\n    },\r\n    selectEmpty: {\r\n        marginTop: theme.spacing(2),\r\n    },\r\n    autoComplete: {\r\n        width: \"50%\",\r\n        marginLeft: \"auto\",\r\n        marginRight: \"auto\",\r\n    },\r\n    radio: {\r\n        width: \"50%\",\r\n        marginLeft: \"auto\",\r\n        marginRight: \"auto\"\r\n    },\r\n});\r\n\r\n\r\nclass AppIdeogram extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            openChromosome: null,\r\n            markerPval: 0,\r\n            knockoutPval: 0,\r\n            configData: api_server,\r\n        }\r\n        this.ideogram = null;\r\n        this.annots = this.props.markerData;\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.getIdeogram();\r\n    }\r\n\r\n    getShape() {\r\n        let annotHeight = 5.5;\r\n        return 'm0,0 l 0 ' + (2 * annotHeight) +\r\n            'l ' + annotHeight / 2 + ' 0' +\r\n            'l 0 -' + (2 * annotHeight) + 'z';\r\n    }\r\n\r\n    getIdeogram = () => {\r\n        this.ideogram = null;\r\n        if (this.annots) {\r\n            this.ideogram = new Ideogram({\r\n                organism: 'human',\r\n                assembly: \"GRCh37\",\r\n                container: \".ideo-container\",\r\n                orientation: 'vertical',\r\n                filterable: true,\r\n                rotatable: false,\r\n                chrWidth: 15,\r\n                chrHeight: 600,\r\n                annotations: this.annots,\r\n                onClickAnnot: this.props.onAnnotationClick,\r\n                annotationTracks: [\r\n                    {id: 'markerTrack', displayName: 'Markers', shape: this.getShape()},\r\n                    {id: 'knockoutTrack', displayName: 'Knockouts', shape: this.getShape()}\r\n                ],\r\n                annotationHeight: 7.5,\r\n            });\r\n        }\r\n        return this.ideogram;\r\n    }\r\n\r\n\r\n    expandIdeogram = (self) => {\r\n        self.setState({openChromosome: null});\r\n    }\r\n\r\n    getAnnotationTracks = () => {\r\n        return [\r\n            {id: 'humanMarkerTrack', displayName: 'Human Markers'},\r\n            {id: \"mouseKnockoutTrack\", displayName: \"Mouse Knockouts\"}\r\n        ];\r\n    }\r\n\r\n    getHeatmapLegend = () => {\r\n        return [\r\n            {\r\n                name: \"Marker Significance\",\r\n                rows: [\r\n                    {color: '#88F', name: \"Below \" + (this.props.marker_avg + 1).toString()},\r\n                    {\r\n                        color: '#ff8200', name: \"Between \" + (this.props.marker_avg - 1).toString() + \" & \" +\r\n                            (this.props.marker_avg + 1).toString()\r\n                    },\r\n                    {color: '#F33', name: \"Above \" + (this.props.marker_avg + 1).toString()}\r\n                ]\r\n            },\r\n        ];\r\n    }\r\n\r\n    getHeatmaps = () => {\r\n        return [\r\n            {\r\n                key: 'Marker Significance',\r\n                thresholds: [\r\n                    [\"Below \" + (this.props.marker_avg + 1).toString(), '#88F'],\r\n                    [\"Between \" + (this.props.marker_avg - 1).toString() + \" \" + (this.props.marker_avg + 1).toString(),\r\n                        '#ff8200'],\r\n                    [\"Above \" + (this.props.marker_avg + 1).toString(), '#F33']\r\n                ]\r\n            },\r\n        ];\r\n    }\r\n\r\n    getFilterSelection = (isMarkerPval, newVal) => {\r\n        let filter = {\"markerSignificance\": {}, \"knockoutSignificance\": {}};\r\n        let marker = isMarkerPval ? newVal : this.state.markerPval;\r\n        let knockout = isMarkerPval ? this.state.knockoutPval : newVal;\r\n        for (let i = 0; i < 11; i++) {\r\n            if (i >= marker)\r\n                filter[\"markerSignificance\"][i] = 1;\r\n            if (i >= knockout)\r\n                filter[\"knockoutSignificance\"][i] = 1;\r\n        }\r\n        return filter;\r\n    }\r\n\r\n    onKnockoutPvalChange = (newVal) => {\r\n        this.setState({knockoutPval: newVal});\r\n        let selection = this.getFilterSelection(false, newVal);\r\n        this.ideogram.filterAnnots(selection);\r\n    }\r\n\r\n    onMarkerPvalChange = (newVal) => {\r\n        this.setState({markerPval: newVal});\r\n        let selection = this.getFilterSelection(true, newVal);\r\n        this.ideogram.filterAnnots(selection);\r\n    }\r\n\r\n    render() {\r\n        const {classes} = this.props;\r\n        return (\r\n            <div>\r\n                {\r\n\r\n                    this.state.openChromosome ? <br/> : null\r\n                }\r\n                {\r\n                    this.state.openChromosome ? <Button size=\"small\" color=\"primary\" variant=\"contained\"\r\n                                                        onClick={() => this.expandIdeogram(this)}>Back</Button> : null\r\n                }\r\n                <div className=\"center\">\r\n                    <FormControl className={classes.formControl}>\r\n                        <InputLabel shrink>Marker P-value</InputLabel>\r\n                        <Select value={this.state.markerPval} className={classes.selectEmpty} id=\"select\"\r\n                                onChange={(e) => this.onMarkerPvalChange(e.target.value)}>\r\n                            <MenuItem value={0}>0</MenuItem>\r\n                            <MenuItem value={1}>1</MenuItem>\r\n                            <MenuItem value={2}>2</MenuItem>\r\n                            <MenuItem value={3}>3</MenuItem>\r\n                            <MenuItem value={4}>4</MenuItem>\r\n                            <MenuItem value={5}>5</MenuItem>\r\n                            <MenuItem value={6}>6</MenuItem>\r\n                            <MenuItem value={7}>7</MenuItem>\r\n                            <MenuItem value={8}>8</MenuItem>\r\n                            <MenuItem value={9}>9</MenuItem>\r\n                            <MenuItem value={10}>10</MenuItem>\r\n                        </Select>\r\n                    </FormControl>\r\n                    <FormControl className={classes.formControl}>\r\n                        <InputLabel shrink>Knockout P-value</InputLabel>\r\n                        <Select value={this.state.knockoutPval} className={classes.selectEmpty} id=\"select\"\r\n                                onChange={(e) => this.onKnockoutPvalChange(e.target.value)}>\r\n                            <MenuItem value={0}>0</MenuItem>\r\n                            <MenuItem value={1}>1</MenuItem>\r\n                            <MenuItem value={2}>2</MenuItem>\r\n                            <MenuItem value={3}>3</MenuItem>\r\n                            <MenuItem value={4}>4</MenuItem>\r\n                            <MenuItem value={5}>5</MenuItem>\r\n                            <MenuItem value={6}>6</MenuItem>\r\n                            <MenuItem value={7}>7</MenuItem>\r\n                            <MenuItem value={8}>8</MenuItem>\r\n                            <MenuItem value={9}>9</MenuItem>\r\n                            <MenuItem value={10}>10</MenuItem>\r\n                        </Select>\r\n                    </FormControl>\r\n                </div>\r\n\r\n                <div className=\"ideo-container\"/>\r\n                <div className=\"legend\">\r\n                    <div>\r\n                        <h3>Markers</h3>\r\n                        <ul>\r\n                            <li>\r\n                                <svg width=\"10\" height=\"10\">\r\n                                    <rect width=\"10\" height=\"10\" fill=\"#0000b8\"/>\r\n                                </svg>\r\n                                &nbsp;&nbsp;Below Average\r\n                            </li>\r\n                            <li>\r\n                                <svg width=\"10\" height=\"10\">\r\n                                    <rect width=\"10\" height=\"10\" fill=\"#31bb22\"/>\r\n                                </svg>\r\n                                &nbsp;&nbsp;Average ({this.props.marker_avg} markers)\r\n                            </li>\r\n                            <li>\r\n                                <svg width=\"10\" height=\"10\">\r\n                                    <rect width=\"10\" height=\"10\" fill=\"#F33\"/>\r\n                                </svg>\r\n                                &nbsp;&nbsp;Above Average\r\n                            </li>\r\n                        </ul>\r\n                    </div>\r\n                    <div>\r\n                        <h3>Knockouts</h3>\r\n                        <ul>\r\n                            <li>\r\n                                <svg width=\"10\" height=\"10\">\r\n                                    <rect width=\"10\" height=\"10\" fill=\"#0000b8\"/>\r\n                                </svg>\r\n                                &nbsp;&nbsp;Below Average\r\n                            </li>\r\n                            <li>\r\n                                <svg width=\"10\" height=\"10\">\r\n                                    <rect width=\"10\" height=\"10\" fill=\"#31bb22\"/>\r\n                                </svg>\r\n                                &nbsp;&nbsp;Average ({this.props.knockout_avg} knockouts)\r\n                            </li>\r\n                            <li>\r\n                                <svg width=\"10\" height=\"10\">\r\n                                    <rect width=\"10\" height=\"10\" fill=\"#F33\"/>\r\n                                </svg>\r\n                                &nbsp;&nbsp;Above Average\r\n                            </li>\r\n                        </ul>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withStyles(useStyles)(AppIdeogram);","C:\\Users\\Thomas\\Github Repos\\GC_Mouse_Integration\\src\\OntologyHierarchy\\Components\\OntologyTree\\OntologyTree.js",["130","131","132","133","134","135"],"import {Button, Icon, Paper, SvgIcon, withStyles} from \"@material-ui/core\";\r\nimport {animated, useSpring} from \"react-spring/web.cjs\";\r\nimport Collapse from \"@material-ui/core/Collapse\";\r\nimport PropTypes from \"prop-types\";\r\nimport React from \"react\";\r\nimport TreeView from \"@material-ui/lab/TreeView\";\r\nimport ArrowDropDownIcon from \"@material-ui/icons/ArrowDropDown\";\r\nimport ArrowRightIcon from \"@material-ui/icons/ArrowRight\";\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\r\nimport StyledTreeItem from \"./Components/StyledTreeItem\";\r\nimport _ from 'lodash';\r\n\r\nconst useStyles = theme => ({\r\n    root: {\r\n        marginTop: 20,\r\n        marginLeft: 0,\r\n        overflowY: \"scroll\",\r\n        height: \"75vh\",\r\n    },\r\n    highlight: {\r\n        backgroundColor: \"#61aefd\",\r\n    },\r\n    btn: {\r\n        marginRight: 5\r\n    }\r\n});\r\n\r\nfunction TransitionComponent(props) {\r\n    const style = useSpring({\r\n        from: {opacity: 0, transform: 'translate3d(20px,0,0)'},\r\n        to: {opacity: props.in ? 1 : 0, transform: `translate3d(${props.in ? 0 : 20}px,0,0)`},\r\n    });\r\n    return (\r\n        <animated.div style={style}>\r\n            <Collapse {...props} />\r\n        </animated.div>\r\n    );\r\n}\r\n\r\nTransitionComponent.propTypes = {\r\n    /**\r\n     * Show the component; triggers the enter or exit states\r\n     */\r\n    in: PropTypes.bool,\r\n};\r\n\r\nclass OntologyTree extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            loading: false,\r\n            treeData: null,\r\n            expandedNodes: [''],\r\n            selectedNodes: [''],\r\n            selectedSpecies: \"Mouse\",\r\n            nodes: [],\r\n            treeOntology: \"\",\r\n            onToggle: null,\r\n            onSelect: null,\r\n            onMappingClick: null,\r\n            onBtnClick: null,\r\n            sourceOntology: \"\",\r\n            mappingOntology: \"\",\r\n            selectedPhenotypeLabel: \"\",\r\n            treeID: \"\",\r\n        };\r\n    }\r\n\r\n    getTreeNodes = (nodes, parentPath) => {\r\n        const {classes} = this.props;\r\n        const btn = nodes.hasMapping ?\r\n            <Button className={classes.btn} size=\"small\" onClick={() => this.props.onMappingClick(nodes.label)}\r\n                    color=\"primary\" variant=\"outlined\" id={nodes.id}\r\n            ><img width=\"50px\" src={\"/images/MappingIcon.svg\"}/></Button>\r\n            : nodes.hasData ? <Button className={classes.btn} size=\"small\" onClick={() => this.props.onBtnClick(nodes.id)}\r\n                    color=\"primary\" variant=\"outlined\" id={nodes.id}\r\n            ><img width=\"50px\" src={this.props.treeID === \"humanTree\" ? \"/images/GWASDataIcon.svg\" : \"/images/KnockoutDataIcon.svg\"}/></Button> : null;\r\n        const tempChildNode = (nodes.hasChildren === true) && (_.isEmpty(nodes.children)) ?\r\n            <StyledTreeItem labelText={<CircularProgress color=\"inherit\" size={15}/>}/> : null;\r\n        if (!_.isEmpty(nodes.children)) {\r\n            nodes.children = _.orderBy(nodes.children, ['label'], ['asc']); // all nodes must be sorted alphabetically!\r\n        }\r\n        let path = null;\r\n        if (parentPath !== undefined)\r\n            path = parentPath + \"-\" + nodes.id;\r\n        else\r\n            path = nodes.id;\r\n        let id = this.props.treeID + \"-\" + path;\r\n        return (\r\n            <StyledTreeItem id={id} onLabelClick={(e) => e.preventDefault()} key={nodes.id} nodeId={id}\r\n                            data-term={nodes.id} labelText={nodes.label} labelIcon={btn}>\r\n                {!_.isEmpty(nodes.children) ? Object.keys(nodes.children).map((key, index) => this.getTreeNodes(nodes.children[key], path)) : tempChildNode}\r\n            </StyledTreeItem>\r\n        );\r\n    }\r\n\r\n    getExpandedNodeIDs = () => {\r\n        let terms = this.props.expanded;\r\n        let result = [];\r\n        terms.forEach(term => function() {\r\n            // result.push($())\r\n        });\r\n        return result;\r\n    }\r\n\r\n\r\n    render() {\r\n        const {classes} = this.props;\r\n        const {\r\n            loading,\r\n        } = this.state;\r\n        if (this.props.treeData === null || this.props.treeData === undefined) {\r\n            throw new Error('No ontology data received.');\r\n        }\r\n        return (\r\n            <TreeView id={this.props.treeID} className={classes.root} expanded={this.props.expanded}\r\n                      selected={this.props.selected}\r\n                      defaultCollapseIcon={<ArrowDropDownIcon/>} defaultExpandIcon={<ArrowRightIcon/>}\r\n                      defaultEndIcon={<div style={{width: 24}}/>} onNodeToggle={this.props.onToggle}\r\n                      onNodeSelect={this.props.onSelect}>\r\n                {this.getTreeNodes(this.props.treeData)}\r\n            </TreeView>\r\n        );\r\n\r\n    }\r\n\r\n}\r\n\r\nexport default withStyles(useStyles)(OntologyTree);\r\n\r\n","C:\\Users\\Thomas\\Github Repos\\GC_Mouse_Integration\\src\\UtilityComponents\\ResultTable.js",["136","137","138","139","140"],"import React, {useCallback} from 'react';\r\nimport './ResultTable.css';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport {Button, IconButton, TablePagination, TableSortLabel, Tooltip} from \"@material-ui/core\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport SearchIcon from \"@material-ui/icons/Search\";\r\nimport {Equalizer} from \"@material-ui/icons\";\r\n\r\nclass ResultTable extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            tableData: {},\r\n            onRowClick: null,\r\n            onCellClick: null,\r\n            rowsPerPage: 10,\r\n            page: 0,\r\n            order: this.props.order ? this.props.order : \"asc\",\r\n            orderBy: this.props.orderBy ? this.props.orderBy : \"Gene\",\r\n            cellClickHandlers: null,\r\n            hiddenHeaders: null,\r\n            hoverDataMap: null,\r\n            dataHeaders: null,\r\n        }\r\n    }\r\n\r\n    handleChangePage = (event, newPage) => {\r\n        this.setState({page: newPage});\r\n    }\r\n\r\n    handleChangeRowsPerPage = (event) => {\r\n        this.setState({rowsPerPage: parseInt(event.target.value, 10), page: 0});\r\n    }\r\n\r\n    handleRequestSort = (property) => {\r\n        const isAsc = this.state.orderBy === property && this.state.order === 'asc';\r\n        this.setState({order: isAsc ? 'desc' : 'asc', orderBy: property});\r\n    }\r\n\r\n    descendingComparator = (a, b, orderBy) => {\r\n        if (!isNaN(a[orderBy])) { // numeric values must be converted from a string first.\r\n            if (+b[orderBy] < +a[orderBy]) {\r\n                return -1;\r\n            }\r\n            if (+b[orderBy] > +a[orderBy]) {\r\n                return 1;\r\n            }\r\n        } else {\r\n            if (b[orderBy] < a[orderBy]) {\r\n                return -1;\r\n            }\r\n            if (b[orderBy] > a[orderBy]) {\r\n                return 1;\r\n            }\r\n        }\r\n\r\n        return 0;\r\n    }\r\n\r\n    getComparator = (order, orderBy) => {\r\n        return order === 'desc'\r\n            ? (a, b) => this.descendingComparator(a, b, orderBy)\r\n            : (a, b) => -this.descendingComparator(a, b, orderBy);\r\n    }\r\n\r\n    stableSort = (array, comparator) => {\r\n        const stabilizedThis = array.map((el, index) => [el, index]);\r\n        stabilizedThis.sort((a, b) => {\r\n            const order = comparator(a[0], b[0]);\r\n            if (order !== 0) return order;\r\n            return a[1] - b[1];\r\n        });\r\n        return stabilizedThis.map((el) => el[0]);\r\n    }\r\n\r\n    viewButtonHeader = () => {\r\n        if (this.props.isSearchResult) {\r\n            return (\r\n                <TableCell align=\"center\" padding=\"default\"/>\r\n            );\r\n        } else\r\n            return null;\r\n    }\r\n\r\n    getCellClickHandler = (header) => {\r\n        if (this.props.cellClickHandlers) {\r\n            return this.props.cellClickHandlers[header];\r\n        }\r\n    }\r\n\r\n    getTableCell = (row, key) => {\r\n        let clickFunc = this.getCellClickHandler(key);\r\n        let dataLink = this.props.dataHeaders ? row[this.props.dataHeaders[key]] : null\r\n        if (dataLink)\r\n            return (<TableCell align=\"center\" data-link={dataLink} onClick={clickFunc} data-study={row[\"ID\"]} style={{textDecoration: 'underline blue'}}>{row[key]}</TableCell>);\r\n        else\r\n            return (<TableCell align=\"center\" data-study={row[\"ID\"]} style={{textDecoration: 'none'}}>{row[key]}</TableCell>);\r\n    }\r\n\r\n    getCellHoverContent = (row, key) => {\r\n        if (this.props.hoverDataMap[key]) {\r\n            let content = row[this.props.hoverDataMap[key]];\r\n            let tooltipBody = null;\r\n            if (Array.isArray(content)) {\r\n                tooltipBody = (\r\n                    <div>\r\n                        <div style={{textAlign: \"center\", fontWeight: \"bold\"}}>{this.props.hoverDataMap[key]}</div> <br />\r\n                    {\r\n                        content.map(syn => {\r\n                            return <div>-{syn}</div>;\r\n                        })\r\n                    }\r\n                    </div>\r\n\r\n                );\r\n                content = tooltipBody;\r\n            }\r\n            return content;\r\n        } else\r\n            return null;\r\n    }\r\n\r\n    getSearchTableCell = (row, key) => {\r\n        let clickFunc = this.getCellClickHandler(key);\r\n        let hoverText = this.getCellHoverContent(row, key);\r\n        if (hoverText)\r\n            return (\r\n                <Tooltip title={hoverText} arrow>\r\n                    <TableCell align=\"center\"\r\n                               onClick={clickFunc}\r\n                               data-human-ont={row[\"Human Ontology\"]}\r\n                               data-human-term={row[\"ID\"]}\r\n                               data-mouse-term={row[\"MP ID\"]}>{row[key] || row[key] === 0 ? row[key] : \"-\"}</TableCell>\r\n                </Tooltip>\r\n            );\r\n        else\r\n            return (\r\n                <TableCell align=\"center\"\r\n                           onClick={clickFunc}\r\n                           data-human-ont={row[\"Human Ontology\"]}\r\n                           data-human-term={row[\"ID\"]}\r\n                           data-mouse-term={row[\"MP ID\"]}>{row[key] || row[key] === 0 ? row[key] : \"-\"}</TableCell>\r\n            );\r\n    }\r\n\r\n    render() {\r\n        const paddingHeaders = [\"Gene\", \"Procedure Parameter\", \"Sex\"];\r\n        let hiddenHeaders = this.props.hiddenHeaders || [];\r\n        if (typeof this.props.tableData != \"undefined\" && this.props.tableData !== null)\r\n            if (this.props.tableData.length > 0 && typeof this.props.tableData === \"object\") {\r\n                return (<div className=\"container\">\r\n                        <TableContainer component={Paper} className=\"info\" id=\"searchResults\">\r\n                            <Table size=\"small\" aria-label=\"a dense table\">\r\n                                <TableHead>\r\n                                    <TableRow>\r\n                                        {Object.keys(this.props.tableData[0]).map((header, index) => {\r\n                                            if (!hiddenHeaders.includes(header))\r\n                                                return (<TableCell align=\"center\"\r\n                                                                   padding={paddingHeaders.includes(header) ? \"none\" : \"default\"}\r\n                                                                   sortDirection={this.state.orderBy === header ? this.state.order : false}\r\n                                                                   key={index}\r\n                                                                   onClick={() => this.handleRequestSort(header)}>{header}\r\n                                                    <TableSortLabel active={this.state.orderBy === header}\r\n                                                                    direction={this.state.orderBy === header ? this.state.order : \"asc\"}\r\n                                                                    onClick={() => this.handleRequestSort(header)}>\r\n                                                    </TableSortLabel>\r\n                                                </TableCell>)\r\n                                        })}\r\n                                        {this.props.isSearchResult ? <TableCell align=\"center\" padding=\"default\">Results</TableCell> : null }\r\n                                        {this.props.isSearchResult ? <TableCell align=\"center\" padding=\"default\">Genome View</TableCell> : null }\r\n\r\n                                    </TableRow>\r\n                                </TableHead>\r\n                                <TableBody>\r\n                                    {this.stableSort(this.props.tableData, this.getComparator(this.state.order, this.state.orderBy)).slice(this.state.page * this.state.rowsPerPage,\r\n                                        this.state.page * this.state.rowsPerPage + this.state.rowsPerPage).map((row, index) => {\r\n                                        if (this.props.isSearchResult)\r\n                                            return (\r\n                                                <TableRow data-human-ont={row[\"Human Ontology\"]}\r\n                                                          data-human-term={row[\"ID\"]} data-mouse-term={row[\"MP ID\"]}\r\n                                                          key={index}>\r\n                                                    {Object.keys(row).map((key) => {\r\n                                                        if (!hiddenHeaders.includes(key))\r\n                                                            return this.getSearchTableCell(row, key);\r\n                                                    })}<TableCell align=\"center\"><IconButton size=\"medium\" color=\"primary\"\r\n                                                                                         variant=\"contained\"\r\n                                                                                         data-human-ont={row[\"Human Ontology\"]}\r\n                                                                                         data-human-term={row[\"ID\"]}\r\n                                                                                         data-mouse-term={row[\"MP ID\"]}\r\n                                                                                         onClick={() => this.props.viewBtnClicked ? this.props.viewBtnClicked(row[\"MP ID\"], row[\"ID\"], row[\"Human Ontology\"]) : null}>\r\n                                                    <SearchIcon />\r\n                                                </IconButton></TableCell>\r\n                                                    <TableCell align=\"center\"><IconButton size=\"medium\" color=\"primary\"\r\n                                                                                         variant=\"contained\"\r\n                                                                                         data-human-ont={row[\"Human Ontology\"]}\r\n                                                                                         data-human-term={row[\"ID\"]}\r\n                                                                                         data-mouse-term={row[\"MP ID\"]}\r\n                                                                                         onClick={() => this.props.genotypeBtnClicked ? this.props.genotypeBtnClicked(row[\"ID\"], row[\"Human Ontology\"] ? row[\"Human Ontology\"] : \"MP\") : null}><Equalizer/></IconButton></TableCell>\r\n                                                </TableRow>)\r\n                                        else\r\n                                            return (\r\n                                                <TableRow data-study={row[\"ID\"]} key={index}>\r\n                                                    {Object.keys(row).map((key) => {\r\n                                                        if (!hiddenHeaders.includes(key))\r\n                                                            return this.getTableCell(row, key);\r\n                                                    })}\r\n                                                </TableRow>\r\n                                            )\r\n                                    })}\r\n                                </TableBody>\r\n                            </Table>\r\n                        </TableContainer>\r\n                        <TablePagination\r\n                            rowsPerPageOptions={[10, 25, 50]}\r\n                            component=\"div\"\r\n                            count={this.props.tableData.length}\r\n                            rowsPerPage={this.state.rowsPerPage}\r\n                            page={this.state.page}\r\n                            onChangePage={this.handleChangePage}\r\n                            onChangeRowsPerPage={this.handleChangeRowsPerPage}\r\n                        />\r\n                    </div>\r\n                );\r\n            } else {\r\n                return (\r\n                        <Typography variant=\"body1\" className=\"center\">{this.props.tableData}</Typography>\r\n                );\r\n            }\r\n        else\r\n            return null;\r\n\r\n    }\r\n}\r\n\r\n\r\nexport default ResultTable;","C:\\Users\\Thomas\\Github Repos\\GC_Mouse_Integration\\src\\OntologyHierarchy\\Components\\OntologyTree\\Components\\StyledTreeItem.js",["141"],"import React from 'react';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport {withStyles} from '@material-ui/core';\r\nimport TreeItem from '@material-ui/lab/TreeItem';\r\nimport SearchIcon from '@material-ui/icons/Search';\r\n\r\nconst useTreeItemStyles = theme => ({\r\n  root: {\r\n    color: theme.palette.text.secondary,\r\n      fontFamily: \"Roboto, Trebuchet MS, serif\",\r\n    '&:hover > $content': {\r\n      // backgroundColor: theme.palette.action.hover,\r\n    },\r\n    '&:focus > $content, &$selected > $content': {\r\n      // backgroundColor: `var(--tree-view-bg-color, ${theme.palette.grey[400]})`,\r\n      color: 'var(--tree-view-color)',\r\n    },\r\n    '&:focus > $content $label, &:hover > $content $label, &$selected > $content $label': {\r\n      // backgroundColor: theme.palette.action.hover,\r\n    },\r\n  },\r\n  content: {\r\n    color: theme.palette.text.secondary,\r\n    borderTopRightRadius: theme.spacing(2),\r\n    borderBottomRightRadius: theme.spacing(2),\r\n    paddingRight: theme.spacing(1),\r\n    fontWeight: theme.typography.fontWeightRegular,\r\n    '$expanded > &': {\r\n      fontWeight: theme.typography.fontWeightRegular,\r\n    },\r\n  },\r\n  group: {\r\n    '& $content': {\r\n      // paddingLeft: theme.spacing(2),\r\n    },\r\n  },\r\n  expanded: {},\r\n  selected: {},\r\n  label: {\r\n    fontWeight: 'inherit',\r\n    color: 'inherit',\r\n      textAlign: 'left',\r\n      wordWrap: \"normal\"\r\n  },\r\n});\r\n\r\nclass StyledTreeItem extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {label: \"\", color: \"\", bgColor: \"\",};\r\n    }\r\n\r\n\r\n\r\n    render() {\r\n        const {classes} = this.props;\r\n        const {labelText, labelIcon, labelInfo, color, bgColor,key, ...other} = this.props;\r\n\r\n        return (\r\n            <TreeItem\r\n                label={\r\n                    <div className={classes.label}>\r\n                        <Typography variant=\"body2\" className={classes.content} component=\"span\">\r\n                            {this.props.labelText}\r\n                        </Typography>\r\n                        <Typography variant=\"caption\" color=\"inherit\">\r\n                            {this.props.labelInfo}\r\n                        </Typography>\r\n                        <div className={classes.labelIcon} style={{float: 'right'}}>\r\n                            {labelIcon}\r\n                        </div>\r\n                    </div>\r\n                }\r\n                style={{\r\n                    '--tree-view-color': color,\r\n                    '--tree-view-bg-color': bgColor,\r\n                }}\r\n                key={this.props.key}\r\n             nodeId={this.props.nodeId}\r\n            classes={{\r\n        root: classes.root,\r\n        content: classes.content,\r\n        expanded: classes.expanded,\r\n        selected: classes.selected,\r\n        group: classes.group,\r\n        label: classes.label,\r\n            }}\r\n                {...other}\r\n            />\r\n        );\r\n    }\r\n}\r\nexport default withStyles(useTreeItemStyles)(StyledTreeItem);\r\n\r\n","C:\\Users\\Thomas\\Github Repos\\GC_Mouse_Integration\\src\\Home\\theme.js",[],{"ruleId":"142","replacedBy":"143"},{"ruleId":"144","replacedBy":"145"},{"ruleId":"146","severity":1,"message":"147","line":8,"column":9,"nodeType":"148","messageId":"149","endLine":8,"endColumn":24},{"ruleId":"146","severity":1,"message":"150","line":10,"column":28,"nodeType":"148","messageId":"149","endLine":10,"endColumn":34},{"ruleId":"151","severity":1,"message":"152","line":75,"column":75,"nodeType":"153","endLine":77,"endColumn":78},{"ruleId":"151","severity":1,"message":"152","line":87,"column":77,"nodeType":"153","endLine":89,"endColumn":78},{"ruleId":"151","severity":1,"message":"152","line":100,"column":75,"nodeType":"153","endLine":101,"endColumn":107},{"ruleId":"151","severity":1,"message":"152","line":111,"column":75,"nodeType":"153","endLine":112,"endColumn":107},{"ruleId":"151","severity":1,"message":"152","line":122,"column":75,"nodeType":"153","endLine":123,"endColumn":107},{"ruleId":"151","severity":1,"message":"152","line":133,"column":75,"nodeType":"153","endLine":134,"endColumn":107},{"ruleId":"151","severity":1,"message":"152","line":144,"column":75,"nodeType":"153","endLine":146,"endColumn":78},{"ruleId":"151","severity":1,"message":"152","line":156,"column":75,"nodeType":"153","endLine":158,"endColumn":78},{"ruleId":"142","replacedBy":"143"},{"ruleId":"144","replacedBy":"145"},{"ruleId":"146","severity":1,"message":"154","line":9,"column":9,"nodeType":"148","messageId":"149","endLine":9,"endColumn":15},{"ruleId":"146","severity":1,"message":"155","line":9,"column":17,"nodeType":"148","messageId":"149","endLine":9,"endColumn":27},{"ruleId":"146","severity":1,"message":"156","line":9,"column":29,"nodeType":"148","messageId":"149","endLine":9,"endColumn":37},{"ruleId":"146","severity":1,"message":"157","line":9,"column":39,"nodeType":"148","messageId":"149","endLine":9,"endColumn":44},{"ruleId":"146","severity":1,"message":"158","line":9,"column":46,"nodeType":"148","messageId":"149","endLine":9,"endColumn":52},{"ruleId":"146","severity":1,"message":"159","line":9,"column":54,"nodeType":"148","messageId":"149","endLine":9,"endColumn":63},{"ruleId":"146","severity":1,"message":"160","line":293,"column":29,"nodeType":"148","messageId":"149","endLine":293,"endColumn":49},{"ruleId":"146","severity":1,"message":"161","line":297,"column":29,"nodeType":"148","messageId":"149","endLine":297,"endColumn":49},{"ruleId":"162","severity":1,"message":"163","line":316,"column":61,"nodeType":"164","messageId":"165","endLine":316,"endColumn":94},{"ruleId":"166","severity":1,"message":"167","line":339,"column":42,"nodeType":"148","messageId":"168","endLine":339,"endColumn":43},{"ruleId":"162","severity":1,"message":"169","line":344,"column":61,"nodeType":"164","messageId":"165","endLine":344,"endColumn":94},{"ruleId":"146","severity":1,"message":"170","line":534,"column":13,"nodeType":"148","messageId":"149","endLine":534,"endColumn":19},{"ruleId":"146","severity":1,"message":"170","line":549,"column":13,"nodeType":"148","messageId":"149","endLine":549,"endColumn":19},{"ruleId":"171","severity":1,"message":"172","line":618,"column":9,"nodeType":"173","messageId":"174","endLine":634,"endColumn":10},{"ruleId":"146","severity":1,"message":"175","line":640,"column":13,"nodeType":"148","messageId":"149","endLine":640,"endColumn":20},{"ruleId":"146","severity":1,"message":"176","line":1,"column":16,"nodeType":"148","messageId":"149","endLine":1,"endColumn":27},{"ruleId":"146","severity":1,"message":"177","line":47,"column":16,"nodeType":"148","messageId":"149","endLine":47,"endColumn":24},{"ruleId":"146","severity":1,"message":"176","line":1,"column":16,"nodeType":"148","messageId":"149","endLine":1,"endColumn":27},{"ruleId":"146","severity":1,"message":"178","line":2,"column":13,"nodeType":"148","messageId":"149","endLine":2,"endColumn":15},{"ruleId":"146","severity":1,"message":"176","line":1,"column":16,"nodeType":"148","messageId":"149","endLine":1,"endColumn":27},{"ruleId":"146","severity":1,"message":"179","line":116,"column":13,"nodeType":"148","messageId":"149","endLine":116,"endColumn":22},{"ruleId":"166","severity":1,"message":"167","line":177,"column":38,"nodeType":"148","messageId":"168","endLine":177,"endColumn":39},{"ruleId":"166","severity":1,"message":"167","line":198,"column":38,"nodeType":"148","messageId":"168","endLine":198,"endColumn":39},{"ruleId":"146","severity":1,"message":"180","line":4,"column":60,"nodeType":"148","messageId":"149","endLine":4,"endColumn":70},{"ruleId":"146","severity":1,"message":"181","line":5,"column":8,"nodeType":"148","messageId":"149","endLine":5,"endColumn":9},{"ruleId":"146","severity":1,"message":"182","line":1,"column":17,"nodeType":"148","messageId":"149","endLine":1,"endColumn":21},{"ruleId":"146","severity":1,"message":"157","line":1,"column":23,"nodeType":"148","messageId":"149","endLine":1,"endColumn":28},{"ruleId":"146","severity":1,"message":"183","line":1,"column":30,"nodeType":"148","messageId":"149","endLine":1,"endColumn":37},{"ruleId":"184","severity":1,"message":"185","line":75,"column":14,"nodeType":"153","endLine":75,"endColumn":65},{"ruleId":"184","severity":1,"message":"185","line":78,"column":14,"nodeType":"153","endLine":78,"endColumn":135},{"ruleId":"146","severity":1,"message":"175","line":111,"column":13,"nodeType":"148","messageId":"149","endLine":111,"endColumn":20},{"ruleId":"146","severity":1,"message":"176","line":1,"column":16,"nodeType":"148","messageId":"149","endLine":1,"endColumn":27},{"ruleId":"146","severity":1,"message":"154","line":10,"column":9,"nodeType":"148","messageId":"149","endLine":10,"endColumn":15},{"ruleId":"186","severity":1,"message":"187","line":163,"column":99,"nodeType":"164","messageId":"188","endLine":163,"endColumn":101},{"ruleId":"186","severity":1,"message":"187","line":189,"column":81,"nodeType":"164","messageId":"188","endLine":189,"endColumn":83},{"ruleId":"186","severity":1,"message":"187","line":210,"column":81,"nodeType":"164","messageId":"188","endLine":210,"endColumn":83},{"ruleId":"146","severity":1,"message":"189","line":5,"column":8,"nodeType":"148","messageId":"149","endLine":5,"endColumn":18},"no-native-reassign",["190"],"no-negated-in-lhs",["191"],"no-unused-vars","'TransitionGroup' is defined but never used.","Identifier","unusedVar","'Switch' is defined but never used.","jsx-a11y/anchor-has-content","Anchors must have content and the content must be accessible by a screen reader.","JSXOpeningElement","'Button' is defined but never used.","'InputLabel' is defined but never used.","'MenuItem' is defined but never used.","'Paper' is defined but never used.","'Select' is defined but never used.","'TextField' is defined but never used.","'mappedMousePhenotype' is assigned a value but never used.","'mappedHumanPhenotype' is assigned a value but never used.","no-loop-func","Function declared in a loop contains unsafe references to variable(s) 'expandedHumanNodes'.","ArrowFunctionExpression","unsafeRefs","no-redeclare","'i' is already defined.","redeclared","Function declared in a loop contains unsafe references to variable(s) 'expandedMouseNodes'.","'nodeID' is assigned a value but never used.","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","'loading' is assigned a value but never used.","'useCallback' is defined but never used.","'isZoomed' is assigned a value but never used.","'qs' is defined but never used.","'selection' is assigned a value but never used.","'Typography' is defined but never used.","'$' is defined but never used.","'Icon' is defined but never used.","'SvgIcon' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","expectedAtEnd","'SearchIcon' is defined but never used.","no-global-assign","no-unsafe-negation"]