[{"/var/www/testing/GC_Mouse_Integration/src/index.tsx":"1","/var/www/testing/GC_Mouse_Integration/src/UtilityComponents/ErrorBoundary.js":"2","/var/www/testing/GC_Mouse_Integration/src/reportWebVitals.ts":"3","/var/www/testing/GC_Mouse_Integration/src/Home/App.js":"4","/var/www/testing/GC_Mouse_Integration/src/Home/Home.js":"5","/var/www/testing/GC_Mouse_Integration/src/Genome/Genome.js":"6","/var/www/testing/GC_Mouse_Integration/src/PhenotypeSearch/PhenotypeSearch.js":"7","/var/www/testing/GC_Mouse_Integration/src/OntologyHierarchy/OntologyHierarchy.js":"8","/var/www/testing/GC_Mouse_Integration/src/UtilityComponents/TabPanel.js":"9","/var/www/testing/GC_Mouse_Integration/src/UtilityComponents/LoadingSpinner/LoadingSpinner.js":"10","/var/www/testing/GC_Mouse_Integration/src/Genome/Components/AppIdeogram.js":"11","/var/www/testing/GC_Mouse_Integration/src/UtilityComponents/ConfigData.js":"12","/var/www/testing/GC_Mouse_Integration/src/PhenotypeSearch/Components/PhenotypeResultBreakdown.js":"13","/var/www/testing/GC_Mouse_Integration/src/OntologyHierarchy/Components/OntologyTree/OntologyTree.js":"14","/var/www/testing/GC_Mouse_Integration/src/UtilityComponents/ResultTable.js":"15","/var/www/testing/GC_Mouse_Integration/src/Home/Components/MainMenuItem.js":"16","/var/www/testing/GC_Mouse_Integration/src/OntologyHierarchy/Components/OntologyTree/Components/StyledTreeItem.js":"17","/var/www/testing/GC_Mouse_Integration/src/Genome/Components/GenomeBrowser.js":"18"},{"size":819,"mtime":1622201221537,"results":"19","hashOfConfig":"20"},{"size":982,"mtime":1614770802348,"results":"21","hashOfConfig":"20"},{"size":425,"mtime":1611918828934,"results":"22","hashOfConfig":"20"},{"size":12195,"mtime":1625822788133,"results":"23","hashOfConfig":"20"},{"size":2451,"mtime":1621241167687,"results":"24","hashOfConfig":"20"},{"size":13524,"mtime":1627648780745,"results":"25","hashOfConfig":"20"},{"size":14038,"mtime":1625748353096,"results":"26","hashOfConfig":"20"},{"size":33310,"mtime":1625748353080,"results":"27","hashOfConfig":"20"},{"size":812,"mtime":1617194213973,"results":"28","hashOfConfig":"20"},{"size":1248,"mtime":1614770802348,"results":"29","hashOfConfig":"20"},{"size":7491,"mtime":1627651693518,"results":"30","hashOfConfig":"20"},{"size":91,"mtime":1626430771410,"results":"31","hashOfConfig":"20"},{"size":26553,"mtime":1625748353088,"results":"32","hashOfConfig":"20"},{"size":4685,"mtime":1624624187227,"results":"33","hashOfConfig":"20"},{"size":10795,"mtime":1624625000289,"results":"34","hashOfConfig":"20"},{"size":1828,"mtime":1621242342291,"results":"35","hashOfConfig":"20"},{"size":2850,"mtime":1621244225910,"results":"36","hashOfConfig":"20"},{"size":4537,"mtime":1627642168798,"results":"37","hashOfConfig":"20"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},"1fv6qtz",{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"43"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"43"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"43"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"43"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"43"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"43"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"43"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"43"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82","usedDeprecatedRules":"43"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/var/www/testing/GC_Mouse_Integration/src/index.tsx",[],["85","86"],"/var/www/testing/GC_Mouse_Integration/src/UtilityComponents/ErrorBoundary.js",[],["87","88"],"/var/www/testing/GC_Mouse_Integration/src/reportWebVitals.ts",[],"/var/www/testing/GC_Mouse_Integration/src/Home/App.js",["89","90","91","92","93","94","95","96","97"],"import React from 'react';\nimport './gwascentral.css';\nimport './App.css';\n\n// @ts-ignore\nimport Home from \"./Home.js\";\n// @ts-ignore\nimport {TransitionGroup, CSSTransition} from \"react-transition-group\";\n// @ts-ignore\nimport {HashRouter, Route, Switch} from \"react-router-dom\";\nimport PhenotypeSearch from \"../PhenotypeSearch/PhenotypeSearch\";\nimport OntologyHierarchy from \"../OntologyHierarchy/OntologyHierarchy\";\nimport Genome from \"../Genome/Genome\";\n\nclass App extends React.Component {\n\n    render() {\n        return (\n            <div>\n                <header className=\"App-header\">\n                    <div style={{width: \"100%\"}}>\n                        <img src=\"/images/gwas-central-logo.png\" alt=\"\"\n                             style={{\n                                 verticalAlign: \"bottom\",\n                                 position: \"absolute\",\n                                 top: \"20px\",\n                                 left: \"70px\",\n                                 cursor: \"pointer\"\n                             }}/>\n                        <div id=\"header_menulinks\">\n                            <div id=\"h_menulinks\" style={{paddingRight: \"0.5em\"}}>\n                                <a href=\"https://www.gwascentral.org/info/data/database-content\">Data</a>&nbsp;&nbsp;\n                                <a href=\"https://www.gwascentral.org/info/how-to/submit-data\">Submit</a>&nbsp;&nbsp;\n                                <a href=\"https://www.gwascentral.org/info/data/download\">Download</a>&nbsp;&nbsp;\n                                <a href=\"https://www.gwascentral.org/info\">Help</a>\n                            </div>\n                        </div>\n                        <div style={{float: \"right\", paddingTop: \"1.5em\", paddingRight: \"1em\", clear: \"right\"}}>\n                            <form action=\"/search\" name=\"searchform\" id=\"searchform\">\n                                {/*<fieldset>*/}\n                                {/*    <img src=\"/images/options/search.png\" alt=\"\">&nbsp;<input name=\"q\" type=\"text\"*/}\n                                {/*                                                              id=\"minisearch\"*/}\n                                {/*                                                              size=\"18\" value=\"\"*/}\n                                {/*                                                              alt=\"\"*/}\n                                {/*                                                              autoComplete=\"off\"*/}\n                                {/*                                                              className=\"ac_input\"><label>&nbsp;</label>*/}\n                                {/*</fieldset>*/}\n                            </form>\n                        </div>\n                        <div className=\"explore_panel\">\n                            <div style={{width: \"100%\"}}>\n                                <div style={{float: \"right\", width: \"100%\"}}>\n                                    <div className=\"main-tab-container\">\n                                        <div className=\"main-tab\">\n                                            <div style={{\"width\": \"106px\"}}><a\n                                                href=\"https://www.gwascentral.org/gwasphenomap\"\n                                                style={{fontSize: \"0.8em\"}}/></div>\n                                            <a href=\"https://www.gwascentral.org/gwasphenomap\"\n                                               style={{fontSize: \"0.8em\"}}>\n                                                <img src=\"/images/section/compass.png\" alt=\"\"\n                                                     style={{width: \"32px\", height: \"32px\"}}/> <br/>\n                                                <div style={{height: \"2em\", marginTop: \"0.5em\"}}>PhenoMap</div>\n                                            </a>\n                                        </div>\n                                    </div>\n                                    <div className=\"main-tab-container\">\n                                        <div className=\"main-tab\">\n                                            <div style={{width: \"106px\"}}><a href=\"https://www.gwascentral.org/biomart\"\n                                                                             style={{fontSize: \"0.8em\"}}/>\n                                            </div>\n                                            <a href=\"https://www.gwascentral.org/biomart\" style={{fontSize: \"0.8em\"}}>\n                                                <img src=\"/images/section/gwasmart.png\" alt=\"\"\n                                                     style={{width: \"32px\", height: \"32px\"}}/><br/>\n                                                <div style={{height: \"2em\", marginTop: \"0.5em\"}}>GWAS Mart</div>\n                                            </a></div>\n                                    </div>\n                                    <div className=\"main-tab-container\">\n                                        <div className=\"main-tab\">\n                                            <div style={{width: \"106px\"}}><a href=\"https://www.gwascentral.org/browser\"\n                                                                             style={{fontSize: \"0.8em\"}}/>\n                                            </div>\n                                            <a href=\"https://www.gwascentral.org/browser\" style={{fontSize: \"0.8em\"}}>\n                                                <img src=\"/images/section/browser.png\" alt=\"\"\n                                                     style={{width: \"32px\", height: \"32px\"}}/><br/>\n                                                <div style={{height: \"2em\", marginTop: \"0.5em\"}}>Browser</div>\n                                            </a></div>\n                                    </div>\n                                    <div className=\"main-tab-container\">\n                                        <div className=\"main-tab\">\n                                            <div style={{width: \"106px\"}}><a href=\"https://www.gwascentral.org/markers\"\n                                                                             style={{fontSize: \"0.8em\"}}/>\n                                            </div>\n                                            <a href=\"https://www.gwascentral.org/markers\" style={{fontSize: \"0.8em\"}}>\n                                                <img src=\"/images/section/markers.png\" alt=\"\"\n                                                     style={{width: \"32px\", height: \"32px\"}}/><br/>\n                                                <div style={{height: \"2em\", marginTop: \"0.5em\"}}>Markers</div>\n                                            </a></div>\n                                    </div>\n                                    <div className=\"main-tab-container\">\n                                        <div className=\"main-tab\">\n                                            <div style={{width: \"106px\"}}><a href=\"https://www.gwascentral.org/studies\"\n                                                                             style={{fontSize: \"0.8em\"}}/>\n                                            </div>\n                                            <a href=\"https://www.gwascentral.org/studies\" style={{fontSize: \"0.8em\"}}>\n                                                <img src=\"/images/section/studies.png\" alt=\"\"\n                                                     style={{width: \"32px\", height: \"32px\"}}/><br/>\n                                                <div style={{height: \"2em\", marginTop: \"0.5em\"}}>Study List</div>\n                                            </a></div>\n                                    </div>\n                                    <div className=\"main-tab-container\">\n                                        <div className=\"main-tab\">\n                                            <div style={{width: \"106px\"}}><a\n                                                href=\"https://www.gwascentral.org/generegion\"\n                                                style={{fontSize: \"0.8em\"}}/></div>\n                                            <a href=\"https://www.gwascentral.org/generegion\"\n                                               style={{fontSize: \"0.8em\"}}>\n                                                <img src=\"/images/section/genes.png\" alt=\"\"\n                                                     style={{width: \"32px\", height: \"32px\"}}/><br/>\n                                                <div style={{height: \"2em\", marginTop: \"0.5em\"}}>Gene/Region</div>\n                                            </a></div>\n                                    </div>\n                                    <div className=\"main-tab-container\">\n                                        <div className=\"main-tab\">\n                                            <div style={{width: \"106px\"}}><a\n                                                href=\"https://www.gwascentral.org/phenotypes\"\n                                                style={{fontSize: \"0.8em\"}}/></div>\n                                            <a href=\"https://www.gwascentral.org/phenotypes\"\n                                               style={{fontSize: \"0.8em\"}}>\n                                                <img src=\"/images/section/phenotypes.png\" alt=\"\"\n                                                     style={{width: \"32px\", height: \"32px\"}}/><br/>\n                                                <div style={{height: \"2em\", marginTop: \"0.5em\"}}>Phenotypes</div>\n                                            </a></div>\n                                    </div>\n                                </div>\n\n                                <div style={{float: \"right\", width: \"100%\"}} className=\"main-tab-base-row\">\n                                    <div className=\"main-tab-container\">\n                                        <div className=\"main-tab-base\"/>\n                                    </div>\n                                    <div className=\"main-tab-container\">\n                                        <div className=\"main-tab-base\"/>\n                                    </div>\n                                    <div className=\"main-tab-container\">\n                                        <div className=\"main-tab-base\"/>\n                                    </div>\n                                    <div className=\"main-tab-container\">\n                                        <div className=\"main-tab-base\"/>\n                                    </div>\n                                    <div className=\"main-tab-container\">\n                                        <div className=\"main-tab-base\"/>\n                                    </div>\n                                    <div className=\"main-tab-container\">\n                                        <div className=\"main-tab-base\"/>\n                                    </div>\n                                    <div className=\"main-tab-container\">\n                                        <div className=\"main-tab-base\"/>\n                                    </div>\n                                </div>\n                            </div>\n\n                        </div>\n                    </div>\n                </header>\n                <div className=\"App\">\n                    <HashRouter>\n                        <Switch>\n                            <Route exact path=\"/\">\n                                <Home/>\n                            </Route>\n                            <Route exact path=\"/PhenotypeSearch\">\n                                <PhenotypeSearch/>\n                            </Route>\n                            <Route exact path=\"/OntologyHierarchy\">\n                                <OntologyHierarchy location={this.props.location}/>\n                            </Route>\n                            <Route path=\"/Genome\" children={<Genome />}/>\n                            <Route path=\"/Genome/:termID\" children={<Genome />}/>\n                        </Switch>\n                    </HashRouter>\n                </div>\n            </div>\n\n        );\n    }\n}\n\nexport default App;\n","/var/www/testing/GC_Mouse_Integration/src/Home/Home.js",[],"/var/www/testing/GC_Mouse_Integration/src/Genome/Genome.js",[],"/var/www/testing/GC_Mouse_Integration/src/PhenotypeSearch/PhenotypeSearch.js",[],"/var/www/testing/GC_Mouse_Integration/src/OntologyHierarchy/OntologyHierarchy.js",["98","99","100","101","102"],"import React from 'react';\nimport $ from 'jquery';\nimport axios from \"axios\";\nimport {Button, Grid, InputLabel, MenuItem, Paper, Select, TextField, withStyles} from '@material-ui/core';\nimport LoadingSpinner from \"../UtilityComponents/LoadingSpinner/LoadingSpinner\";\nimport './OntologyHierarchy.css';\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\nimport ErrorBoundary from \"../UtilityComponents/ErrorBoundary\";\nimport OntologyTree from \"./Components/OntologyTree/OntologyTree\";\nimport _ from \"lodash\";\nimport PhenotypeResultBreakdown from \"../PhenotypeSearch/Components/PhenotypeResultBreakdown\";\nimport api_server from \"../UtilityComponents/ConfigData\";\n\nconst useStyles = theme => ({\n    formControl: {\n        margin: theme.spacing(1),\n        minWidth: 120,\n    },\n    selectEmpty: {\n        marginTop: theme.spacing(2),\n    },\n    autoComplete: {\n        width: \"75%\",\n        marginLeft: \"auto\",\n        marginRight: \"auto\",\n        paddingBottom: 5,\n    },\n    paper: {\n        padding: theme.spacing(1),\n        textAlign: 'center',\n        color: theme.palette.text.secondary,\n    },\n});\n\nclass OntologyHierarchy extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            loading: true,\n            treeData: null,\n            expandedMouseNodes: [''],\n            expandedHumanNodes: [''],\n            selectedMouseNodes: [''],\n            selectedHumanNodes: [''],\n            selectedSpecies: \"Mouse\",\n            isMappingPresent: false,\n            isDataPresent: false,\n            conErrorStatus: false,\n            configData: api_server,\n            searchInput: \"\",\n            humanLiveSearchResults: [],\n            mouseLiveSearchResults: [],\n            humanOntology: \"MESH\",\n            mouseSearchInput: \"\",\n            humanSearchInput: \"\"\n        };\n        this.tempExpandedmouseIds = [];\n        this.tempExpandedhumanIds = [];\n        this.liveCancelToken = null;\n        this.mouseLiveLoading = false;\n        this.humanLiveLoading = false;\n        this.searchInput = \"\";\n    }\n\n    componentDidMount() {\n        this.getRootTrees(this.state.humanOntology);\n    }\n\n    retrieveLiveSearch = (e, x) => {\n        if (!e)\n            return;\n        let input = x;\n        let ontology = e.target.id === \"mouseSearchInput\" ? \"MP\" : this.state.humanOntology;\n        if (this.liveCancelToken)\n            this.liveCancelToken.cancel();\n        if (input.length < 1) {\n            $(\"#live-search\").hide();\n            if (ontology === \"MP\") {\n                this.mouseLiveLoading = false;\n                this.setState({mouseLiveSearchResults: []});\n            } else {\n                this.humanLiveLoading = false;\n                this.setState({humanLiveSearchResults: []});\n            }\n            return;\n        }\n        if (ontology === \"MP\")\n            this.mouseLiveLoading = true;\n        else\n            this.humanLiveLoading = true;\n        this.searchInput = input;\n        this.liveCancelToken = axios.CancelToken.source();\n        let url_string = this.state.configData.api_server + \"livesearch.php?entry=\" + encodeURIComponent(input) + \"&ontology=\" + ontology;\n\n        if (input.length > 0) {\n            axios.get(url_string, {cancelToken: this.liveCancelToken.token})\n                .then((response) => {\n                    if (response.status === 200) {\n                        if (response.data.length === 0) {\n                            if (ontology === \"MP\") {\n                                this.mouseLiveLoading = false;\n                                this.setState({mouseLiveSearchResults: []});\n                            } else {\n                                this.humanLiveLoading = false;\n                                this.setState({humanLiveSearchResults: []});\n                            }\n                        } else {\n                            if (ontology === \"MP\") {\n                                this.mouseLiveLoading = false;\n                                this.setState({mouseLiveSearchResults: response.data});\n                            } else {\n                                this.humanLiveLoading = false;\n                                this.setState({humanLiveSearchResults: response.data});\n                            }\n                        }\n                    }\n                })\n                .catch((error) => {\n                    if (!axios.isCancel(error)) {\n                        console.log(\"An error occurred retrieving live search results.\");\n                    } else {\n                        if (ontology === \"MP\") {\n                            this.mouseLiveSearchResults = [];\n                            this.mouseLiveLoading = false;\n                        } else {\n                            this.humanLiveSearchResults = [];\n                            this.humanLiveLoading = false;\n                        }\n                    }\n\n\n                });\n        }\n    }\n\n    appendSearchResult = (objValue, srcValue) => {\n        if (_.isArray(objValue)) {\n            for (var i = 0; i < objValue.length; i++) {\n                if (objValue[i].FSN === srcValue[0].FSN) {\n                    objValue[i] = _.merge(objValue[i], srcValue[0]);\n                    return objValue;\n                }\n            }\n        }\n    }\n\n    isNodeDuplicate = (source, newItem) => {\n        for (var i = 0; i < source.length; i++) {\n            if (source[i].id === newItem.id) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    findPath = (a, obj) => {\n        for (var key in obj) {                                         // for each key in the object obj\n            if (obj.hasOwnProperty(key)) {                             // if it's an owned key\n                if (a === obj[key]) return key;                        // if the item beign searched is at this key then return this key as the path\n                else if (obj[key] && typeof obj[key] === \"object\") {   // otherwise if the item at this key is also an object\n                    var path = this.findPath(a, obj[key]);                 // search for the item a in that object\n                    if (path) return key + \".\" + path;                 // if found then the path is this key followed by the result of the search\n                }\n            }\n        }\n    }\n\n    getAllPaths = (obj, key, prev = '') => {\n        const result = [];\n\n        for (let k in obj) {\n            let path = prev + (prev ? '.' : '') + k;\n\n            if (obj[k] === key) {\n                result.push(path);\n            } else if (typeof obj[k] == 'object') {\n                result.push(...this.getAllPaths(obj[k], key, path));\n            }\n        }\n\n        return result\n    }\n\n    pathToIdArray = (path, tree) => {\n        var result = [];\n        for (var i = 2; i < path.length; i += 2) {\n            result.push(tree.children[path[i]].id);\n            tree = tree.children[path[i]];\n        }\n        return result;\n    }\n\n    /**\n     * Simple object check.\n     * @param item\n     * @returns {boolean}\n     */\n    isObject = (item) => {\n        return (item && typeof item === 'object' && !Array.isArray(item));\n    }\n\n    /**\n     * Deep merge two objects.\n     * @param target\n     * @param ...sources\n     */\n    mergeDeep = (target, ...sources) => {\n        if (!sources.length) return target;\n        const source = sources.shift();\n\n        if (this.isObject(target) && this.isObject(source)) {\n            for (const key in source) {\n                if (this.isObject(source[key])) {\n                    if (!target[key]) Object.assign(target, {[key]: {}});\n                    this.mergeDeep(target[key], source[key]);\n                } else {\n                    Object.assign(target, {[key]: source[key]});\n                }\n            }\n        }\n        return this.mergeDeep(target, ...sources);\n    }\n\n    objectToPaths = (data, target) => {\n        var result = [];\n        var matched_paths = [];\n        doIt(data, \"\");\n        return matched_paths;\n\n        function doIt(data, s) {\n            if (data && typeof data === \"object\") {\n                if (Array.isArray(data)) {\n                    for (var i = 0; i < data.length; i++) {\n                        if (data[i] === target) {\n                            matched_paths.push(s + \".\" + i);\n                        }\n                        doIt(data[i], s + \".\" + i);\n                    }\n                } else {\n                    for (var p in data) {\n                        if (data[p] === target) {\n                            matched_paths.push(s + \".\" + p);\n                        }\n                        doIt(data[p], s + \".\" + p);\n                    }\n                }\n            } else {\n                result.push(s);\n            }\n        }\n    }\n\n    convertNodesToNodeIDs = (nodeList, isHuman = false) => {\n        let tempFilteredNodes = [];\n        let tree = isHuman ? \"humanTree\" : \"mouseTree\";\n        for (var i = 0; i < nodeList.length; i++) {\n            var nodeID = tree;\n            if (i !== 0)\n                for (var l = 0; l <= i; l++) {\n                    nodeID += \"-\" + nodeList[l];\n                }\n            else\n                nodeID += \"-\" + nodeList[0];\n            tempFilteredNodes.push(nodeID);\n        }\n        return tempFilteredNodes;\n    }\n\n    search = (searchInput, ontology) => {\n        this.setState({loading: true, isMappingPresent: false, isDataPresent: false});\n        if (searchInput === undefined || searchInput === \"\") {\n            this.getRootTrees(this.state.humanOntology);\n            return;\n        }\n        let humanOnt = this.state.humanOntology;\n        let mouseOnt = \"MP\";\n        let searchOnt = ontology;\n        let url_string = this.state.configData.api_server + \"controller.php?type=ontology&search&term=\" + searchInput + \"&humanOntology=\" + humanOnt + \"&mouseOntology=\" + mouseOnt + \"&searchOntology=\" + searchOnt;\n        axios.get(url_string)\n            .then((response) => {\n                if (response.status === 200) {\n                    if (response.data) {\n                        let tree = this.state.treeData;\n                        let expandedMouseNodes = [];\n                        let expandedHumanNodes = [];\n                        tree[\"humanID\"] = response.data.humanID;\n                        tree[\"mouseID\"] = response.data.mouseID;\n                        tree[\"isExactMatch\"] = response.data.isExactMatch;\n                        tree[\"mouseTree\"] = response.data.mouseTree;\n                        tree[\"humanTree\"] = response.data.humanTree;\n                        let mousePaths = this.objectToPaths(tree[\"mouseTree\"], tree[\"mouseID\"]);\n                        if (mousePaths.length > 1) {\n                            for (var i = 0; i < mousePaths.length; i++) {\n                                let mousePath = mousePaths[i];\n                                let tempPathIdArray = this.pathToIdArray(mousePath.split(\".\"), tree[\"mouseTree\"]);\n                                tempPathIdArray.unshift(\"MP:0000001\");\n                                tempPathIdArray = this.convertNodesToNodeIDs(tempPathIdArray, false);\n                                tempPathIdArray.forEach(id => expandedMouseNodes.push(id));\n                            }\n                            // mousePaths.forEach(mousePath => this.pathToIdArray(mousePath.split(\".\"), tree[\"mouseTree\"]).forEach(id => expandedMouseNodes.push(id)));\n                        } else {\n                            expandedMouseNodes = this.pathToIdArray(mousePaths[0].split(\".\"), tree[\"mouseTree\"]);\n                            expandedMouseNodes.unshift(\"MP:0000001\");\n                            expandedMouseNodes = this.convertNodesToNodeIDs(expandedMouseNodes, false);\n                        }\n                        var selectedMouseNodes = expandedMouseNodes.filter(term => term.endsWith(tree[\"mouseID\"]));\n                        expandedMouseNodes = expandedMouseNodes.filter(node => node.endsWith(tree[\"mouseID\"]) === false);\n\n                        let humanPaths = this.objectToPaths(tree[\"humanTree\"], tree[\"humanID\"]);\n                        if (humanPaths.length > 1) {\n                            for (var i = 0; i < humanPaths.length; i++) {\n                                let humanPath = humanPaths[i];\n                                let tempPathIdArray = this.pathToIdArray(humanPath.split(\".\"), tree[\"humanTree\"]);\n                                if (humanOnt === \"MESH\")\n                                    tempPathIdArray.unshift(\"mesh\");\n                                else\n                                    tempPathIdArray.unshift(\"HP:0000001\");\n                                tempPathIdArray = this.convertNodesToNodeIDs(tempPathIdArray, true);\n                                tempPathIdArray.forEach(id => expandedHumanNodes.push(id));\n                            }\n                            // mousePaths.forEach(mousePath => this.pathToIdArray(mousePath.split(\".\"), tree[\"mouseTree\"]).forEach(id => expandedMouseNodes.push(id)));\n                        } else {\n                            expandedHumanNodes = this.pathToIdArray(humanPaths[0].split(\".\"), tree[\"humanTree\"]);\n                            if (humanOnt === \"MESH\")\n                                expandedHumanNodes.unshift(\"mesh\");\n                            else\n                                expandedHumanNodes.unshift(\"HP:0000001\");\n                            expandedHumanNodes = this.convertNodesToNodeIDs(expandedHumanNodes, true);\n                        }\n\n                        var selectedHumanNodes = expandedHumanNodes.filter(term => term.endsWith(tree[\"humanID\"]));\n                        expandedHumanNodes = expandedHumanNodes.filter(node => node.endsWith(tree[\"humanID\"]) === false);\n\n\n                        this.setState({\n                            treeData: tree,\n                            loading: false,\n                            isDataPresent: true,\n                            isMappingPresent: true,\n                            expandedMouseNodes: expandedMouseNodes,\n                            selectedMouseNodes: selectedMouseNodes,\n                            expandedHumanNodes: expandedHumanNodes,\n                            selectedHumanNodes: selectedHumanNodes,\n                            mappedMousePhenotype: response.data.mouseID,\n                            mappedHumanPhenotype: response.data.humanID,\n                            humanSearchFailed: false,\n                            mouseSearchFailed: false\n                        }, () => this.scrollTrees());\n                    } else {\n                        this.setState({\n                            loading: false,\n                            isDataPresent: false,\n                            isMappingPresent: false,\n                            humanSearchFailed: searchOnt !== \"MP\",\n                            mouseSearchFailed: searchOnt === \"MP\"\n                        });\n                    }\n                }\n            })\n            .catch((error) => {\n                this.setState({loading: false, searchOpen: true});\n                console.log(\"An error occurred searching for ontology mappings.\");\n            });\n    }\n\n    updateTree = (id, children) => obj => {\n        if (obj.id === id) {\n            obj.children = children;\n        } else if (!_.isEmpty(obj.children))\n            return obj.children.some(this.updateTree(id, children));\n    }\n\n    getRootTrees = (ontology = null) => {\n        this.setState({loading: true});\n        let ont = ontology ? ontology : \"HPO\";\n        let url_string = this.state.configData.api_server + \"controller.php?type=ontology&getRoots&ontology=\" + ont;\n        axios.get(url_string)\n            .then((response) => {\n                if (response.status === 200) {\n                    if (response.data) {\n                        let expandedMouseNodes = [\"mouseTree-\" + response.data.mouseID];\n                        let expandedHumanNodes = [\"humanTree-\" + response.data.humanID];\n                        this.setState({\n                            treeData: response.data,\n                            loading: false,\n                            expandedMouseNodes: expandedMouseNodes,\n                            expandedHumanNodes: expandedHumanNodes,\n                        });\n                    } else {\n\n                    }\n                }\n            })\n            .catch((error) => {\n                console.log(\"An error occurred retrieving root tree data.\");\n                this.setState({conErrorStatus: true, loading: false});\n            });\n    }\n\n    getRootTree = (ontology, species) => {\n        this.setState({loading: true});\n        let mappingOnt = ontology === \"MP\" ? this.state.humanOntology : \"MP\";\n        let url_string = this.state.configData.api_server + \"controller.php?type=ontology&getRoot&ontology=\" + ontology + \"&mappingOnt=\" + mappingOnt;\n        axios.get(url_string)\n            .then((response) => {\n                if (response.status === 200) {\n                    if (response.data) {\n                        if (species === \"human\") {\n                            let expandedHumanNodes = [\"humanTree-term-1\"];\n                            let tree = this.state.treeData;\n                            tree[\"humanTree\"] = response.data.tree;\n                            this.setState({treeData: tree, loading: false, expandedHumanNodes: expandedHumanNodes});\n                        } else {\n                            let expandedMouseNodes = [\"mouseTree-term-1\"];\n                            let tree = this.state.treeData;\n                            tree[\"mouseTree\"] = response.data.tree;\n                            this.setState({treeData: tree, loading: false, expandedMouseNodes: expandedMouseNodes});\n                        }\n                    }\n                }\n            })\n            .catch((error) => {\n                console.log(\"An error occurred retrieving root tree data.\");\n                this.setState({conErrorStatus: true, loading: false});\n            });\n    }\n\n    getTermChildren = (e, tree, ont) => {\n        let url_string = this.state.configData.api_server + \"/controller.php?type=ontology&childSearch&term=\" + e + \"&ontology=\" + ont + \"&mappingOntology=\" + this.state.humanOntology;\n        axios.get(url_string)\n            .then((response) => {\n                if (response.status === 200) {\n                    if (response.data) {\n                        if (tree === \"mouse\") {\n                            let tree = this.state.treeData;\n                            [tree[\"mouseTree\"]].forEach(this.updateTree(e, response.data));\n                            this.setState({treeData: tree});\n                        } else {\n                            let tree = this.state.treeData;\n                            [tree[\"humanTree\"]].forEach(this.updateTree(e, response.data));\n                            this.setState({treeData: tree});\n                        }\n\n                    }\n                }\n            })\n            .catch((error) => {\n                this.setState({loading: false, searchOpen: true, tableData: null});\n                console.log(\"An error occurred searching for ontology mappings.\");\n            });\n    }\n\n    termSearchBtnClick = (term) => {\n        this.setState({searchInput: term});\n        this.search();\n    }\n\n    mouseSearchBtnClick = (e) => {\n        let input = typeof e === \"string\" ? e : document.getElementById(\"mouseSearchInput\").value;\n        this.setState({mouseSearchInput: input});\n        this.search(input, \"MP\");\n    }\n\n    humanSearchBtnClick = (e) => {\n        let input = typeof e === \"string\" ? e : document.getElementById(\"humanSearchInput\").value;\n        this.setState({humanSearchInput: input});\n        this.search(input, this.state.humanOntology);\n    }\n\n    setexpandedMouseNodes = (nodes, ids) => {\n        if (Array.isArray(ids[0]))\n            ids = ids[0];\n        ids.push(nodes.id);\n        this.tempExpandedmouseIds = ids;\n        return Array.isArray(nodes.isa) ? nodes.isa.map((node) => this.setexpandedMouseNodes(node, ids)) : ids;\n    }\n    setexpandedHumanNodes = (nodes, ids) => {\n        if (Array.isArray(ids[0]))\n            ids = ids[0];\n        ids.push(nodes.id);\n        this.tempExpandedhumanIds = ids;\n        return Array.isArray(nodes.isa) ? nodes.isa.map((node) => this.setexpandedHumanNodes(node, ids)) : ids;\n    }\n\n    isLoadingRequired = (id, obj) => {\n        if (obj.id === id && _.isEmpty(obj.children)) {\n            return true;\n        } else if (!_.isEmpty(obj.children)) {\n            for (var i = 0; i < Object.keys(obj.children).length; i++) {\n                if (this.isLoadingRequired(id, obj.children[i]))\n                    return true;\n            }\n        }\n    }\n\n    handleMouseToggle = (event, nodeIds) => {\n        let tree = this.state.treeData.mouseTree;\n        let termID = event.currentTarget.parentNode.dataset[\"term\"];\n        let nodeID = event.currentTarget.parentNode.id;\n        var loadingRequired = this.isLoadingRequired(termID, tree);\n        if (loadingRequired) {\n            this.getTermChildren(termID, \"mouse\", \"mp\");\n        }\n        this.setState({expandedMouseNodes: nodeIds});\n    }\n\n    handleMouseSelect = (event, nodeIds) => {\n        this.setState({selectedMouseNodes: nodeIds});\n    }\n\n    handleHumanToggle = (event, nodeIds) => {\n        let tree = this.state.treeData.humanTree;\n        let termID = event.currentTarget.parentNode.dataset[\"term\"];\n        let nodeID = event.currentTarget.parentNode.id;\n        var loadingRequired = this.isLoadingRequired(termID, tree);\n        if (loadingRequired) {\n            this.getTermChildren(termID, \"human\", this.state.humanOntology);\n        }\n        this.setState({expandedHumanNodes: nodeIds});\n    }\n\n    handleHumanSelect = (event, nodeIds) => {\n        this.setState({selectedHumanNodes: nodeIds});\n    }\n\n    scrollTrees = () => {\n        if (this.state.mappedMousePhenotype && this.state.isMappingPresent) {\n            var obj = this;\n            window.setTimeout(function () {\n                let humanPhenotype = obj.state.mappedHumanPhenotype;\n                let mousePhenotype = obj.state.mappedMousePhenotype;\n                let mouseElement = document.getElementById($(\"#mouseTree li[data-term='\" + mousePhenotype + \"']\")[0].id);\n                let humanElement = document.getElementById($(\"#humanTree li[data-term='\" + humanPhenotype + \"']\")[0].id);\n                $(\"#humanTree\").scrollTop(0);\n                $(\"#mouseTree\").scrollTop(0);\n                $('#humanTree').animate({\n                    scrollTop: $(humanElement).offset().top - ($(\"#humanTree\").position().top + 90)\n                }, 1500);\n                $('#mouseTree').animate({\n                    scrollTop: $(mouseElement).offset().top - ($(\"#mouseTree\").position().top + 90)\n                }, 1500);\n                obj.setState({mappedMousePhenotype: null, mappedHumanPhenotype: null});\n            }, 500);\n\n        }\n    }\n\n    getHumanPhenotypeBreakdown = (e) => {\n        let treeData = this.state.treeData;\n        treeData.humanID = e;\n        treeData.mouseID = null;\n        this.setState({treeData: treeData, mouseID: null, isDataPresent: true, isMappingPresent: false, loading: true});\n    }\n\n    getMousePhenotypeBreakdown = (e) => {\n        let treeData = this.state.treeData;\n        treeData.humanID = null;\n        treeData.mouseID = e;\n        this.setState({treeData: treeData, mouseID: null, isDataPresent: true, isMappingPresent: false, loading: true});\n    }\n\n    onBreakdownFinish = (e) => {\n        this.setState({loading: false});\n    }\n\n    changeHumanOntology = (e) => {\n        this.setState({\n            humanOntology: e.target.value,\n            selectedHumanNodes: [''],\n            expandedHumanNodes: [''],\n            selectedMouseNodes: [''],\n            expandedMouseNodes: [''],\n            isMappingPresent: false,\n            isDataPresent: false,\n        });\n        this.getRootTrees(e.target.value);\n    }\n\n    render() {\n        const {classes} = this.props;\n        const {\n            loading,\n            treeData,\n            conErrorStatus,\n            selectedMouseNodes,\n            selectedHumanNodes,\n            expandedMouseNodes,\n            expandedHumanNodes,\n            mappedMousePhenotype,\n            mappedHumanPhenotype,\n            mouseSearchInput,\n            humanSearchInput\n        } = this.state;\n        const mouseTree = treeData ? treeData.mouseTree : null;\n        const humanTree = treeData ? treeData.humanTree : null;\n\n        if (conErrorStatus)\n            throw new Error(\"A connection error occurred retrieving ontology trees.\");\n\n        return <div>\n            <ErrorBoundary>\n                <Grid container spacing={2}>\n                    <Grid item xs>\n                        <Paper id=\"humanTreeWrapper\" className={classes.paper}>\n                            <InputLabel id=\"human-ont-input-label\">Human Ontology</InputLabel>\n                            <Select\n                                labelId=\"human-ont-input-label\"\n                                id=\"human-ont-input-select\"\n                                value={this.state.humanOntology}\n                                onChange={this.changeHumanOntology}\n                                label=\"Age\"\n                            >\n                                <MenuItem value={\"HPO\"}>Human Phenotype Ontology</MenuItem>\n                                <MenuItem value={\"MESH\"}>Medical Subject Headings</MenuItem>\n                            </Select>\n                            <br/><br/>\n                            <Autocomplete\n                                freeSolo\n                                id=\"humanSearchInput\"\n                                className={classes.autoComplete}\n                                onInputChange={this.retrieveLiveSearch}\n                                defaultValue={humanSearchInput}\n                                renderInput={(params) => (\n                                    <TextField\n                                        {...params}\n                                        label=\"Term search\"\n                                        variant=\"outlined\"\n                                        InputProps={{\n                                            ...params.InputProps,\n                                            endAdornment: (\n                                                <React.Fragment>\n                                                    {this.humanLiveLoading ?\n                                                        <CircularProgress color=\"inherit\" size={20}/> : null}\n                                                    {params.InputProps.endAdornment}\n                                                </React.Fragment>\n                                            ),\n                                        }}\n                                        onKeyDown={e => {\n                                            if (e.keyCode === 13) {\n                                                this.humanSearchBtnClick();\n                                            }\n                                        }}\n                                    />\n                                )}\n                                options={this.state.humanLiveSearchResults}\n                                getOptionLabel={(option) => option.FSN ? option.FSN : this.state.humanSearchInput}\n                                renderOption={(option) => option.FSN + \" (\" + option.type + \")\"}/>\n                            <p>Search for terms with mappings to the MP ontology</p>\n                            <Button size=\"large\" color=\"primary\" variant=\"contained\" id=\"search_btn\"\n                                    onClick={this.humanSearchBtnClick}>Search</Button>\n                            {this.state.humanSearchFailed ? <p style={{color: \"red\"}}>No match found.</p> : null}\n                            {\n                                !humanTree ? null :\n                                    <OntologyTree treeID=\"humanTree\" selectedPhenotypeLabel={mappedHumanPhenotype}\n                                                  onMappingClick={this.humanSearchBtnClick} expanded={expandedHumanNodes}\n                                                  onBtnClick={this.getHumanPhenotypeBreakdown}\n                                                  selected={selectedHumanNodes} onSelect={this.handleHumanSelect}\n                                                  onToggle={this.handleHumanToggle} treeData={humanTree}\n                                                  sourceOntology={this.state.humanOntology} mappingOntology=\"MP\"/>\n                            }\n\n                        </Paper>\n                    </Grid>\n                    <Grid item xs>\n                        {\n                            this.state.isDataPresent ?\n                                <PhenotypeResultBreakdown mousePhenotype={this.state.treeData.mouseID}\n                                                          humanPhenotype={this.state.treeData.humanID}\n                                                          humanOntology={this.state.humanOntology}\n                                                          onBreakdownFinish={this.onBreakdownFinish}/>\n                                : null\n                        }\n                    </Grid>\n                    <Grid item xs>\n                        <Paper id=\"mouseTreeWrapper\" className={classes.paper}>\n                            <div className=\"ontologySearchWrapper\">\n                                <h3>Mammalian Phenotype</h3>\n                                <Autocomplete\n                                    freeSolo\n                                    className={classes.autoComplete}\n                                    id=\"mouseSearchInput\"\n                                    defaultValue={mouseSearchInput}\n                                    onInputChange={this.retrieveLiveSearch}\n                                    renderInput={(params) => (\n                                        <TextField\n                                            {...params}\n                                            label=\"Term search\"\n                                            variant=\"outlined\"\n                                            InputProps={{\n                                                ...params.InputProps,\n                                                endAdornment: (\n                                                    <React.Fragment>\n                                                        {this.mouseLiveLoading ?\n                                                            <CircularProgress color=\"inherit\" size={20}/> : null}\n                                                        {params.InputProps.endAdornment}\n                                                    </React.Fragment>\n                                                ),\n                                            }}\n                                            onKeyDown={e => {\n                                                if (e.keyCode === 13) {\n                                                    this.mouseSearchBtnClick();\n                                                }\n                                            }}\n                                        />\n                                    )}\n                                    options={this.state.mouseLiveSearchResults}\n                                    getOptionLabel={(option) => option.FSN ? option.FSN : this.state.mouseSearchInput}\n                                    renderOption={(option) => option.FSN + \" (\" + option.type + \")\"}/>\n                                <p>Search for MP terms which map to the selected human ontology.</p>\n                                <Button size=\"large\" color=\"primary\" variant=\"contained\" id=\"search_btn\"\n                                        onClick={this.mouseSearchBtnClick}>Search</Button>\n                                {this.state.mouseSearchFailed ? <p style={{color: \"red\"}}>No match found.</p> : null}\n                            </div>\n                            <LoadingSpinner loading={loading}/>\n                            {!mouseTree ? null :\n                                <OntologyTree treeID=\"mouseTree\" selectedPhenotypeLabel={mappedMousePhenotype}\n                                              onMappingClick={this.mouseSearchBtnClick} expanded={expandedMouseNodes}\n                                              onBtnClick={this.getMousePhenotypeBreakdown}\n                                              selected={selectedMouseNodes} onSelect={this.handleMouseSelect}\n                                              onToggle={this.handleMouseToggle} treeData={mouseTree}\n                                              sourceOntology=\"MP\" mappingOntology=\"HPO\"/>}\n                        </Paper>\n                    </Grid>\n\n\n                </Grid>\n            </ErrorBoundary>\n\n        </div>\n    }\n}\n\nexport default withStyles(useStyles)(OntologyHierarchy);","/var/www/testing/GC_Mouse_Integration/src/UtilityComponents/TabPanel.js",["103"],"import React, {useCallback} from 'react';\nimport Typography from \"@material-ui/core/Typography\";\nimport {Box} from \"@material-ui/core\";\n\nclass TabPanel extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {};\n    }\n\n\n    render() {\n        const {children, value, index, ...other} = this.props;\n        return (\n            <div role=\"tabpanel\"\n                 hidden={value !== index}\n                 id={`full-width-tabpanel-${index}`}\n                 aria-labelledby={`full-width-tab-${index}`}\n                 {...other}>\n                {value === index && (\n                    <Box p={3}>\n                        <Typography>{children}</Typography>\n                    </Box>\n                )}\n            </div>\n        );\n\n    }\n}\n\n\nexport default TabPanel;","/var/www/testing/GC_Mouse_Integration/src/UtilityComponents/LoadingSpinner/LoadingSpinner.js",["104"],"import React, {useCallback} from 'react';\nimport './LoadingSpinner.css';\n\nclass LoadingSpinner extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {loading: false};\n    }\n\n    render() {\n        if (this.props.loading)\n            return (\n                <div className=\"loading-container\">\n                    <div className=\"loading\">\n                        <div className=\"loader\">\n                            <div></div>\n                            <div></div>\n                            <div></div>\n                            <div></div>\n                            <div></div>\n                            <div></div>\n                            <div></div>\n                            <div></div>\n                            <div></div>\n                            <div></div>\n                            <div></div>\n                            <div></div>\n                            <div></div>\n                            <div></div>\n                            <div></div>\n                        </div>\n                        <h4>Loading...</h4>\n                    </div>\n                </div>\n            );\n        else\n            return (null);\n    }\n}\n\nexport default LoadingSpinner;","/var/www/testing/GC_Mouse_Integration/src/Genome/Components/AppIdeogram.js",[],"/var/www/testing/GC_Mouse_Integration/src/UtilityComponents/ConfigData.js",[],"/var/www/testing/GC_Mouse_Integration/src/PhenotypeSearch/Components/PhenotypeResultBreakdown.js",["105","106","107"],"import React from \"react\";\nimport './PhenotypeResultBreakdown.css';\nimport ResultTable from \"../../UtilityComponents/ResultTable\";\nimport $ from \"jquery\";\nimport axios from \"axios\";\nimport LoadingSpinner from \"../../UtilityComponents/LoadingSpinner/LoadingSpinner\";\nimport {\n    AppBar,\n    Button,\n    FormControl,\n    Grid,\n    InputLabel,\n    MenuItem,\n    Paper,\n    Select,\n    Tab,\n    Tabs,\n    withStyles\n} from \"@material-ui/core\";\nimport TabPanel from \"../../UtilityComponents/TabPanel\";\nimport api_server from \"../../UtilityComponents/ConfigData\";\nimport {Graph} from \"react-d3-graph\";\nimport _ from \"lodash\";\n\nconst useStyles = theme => ({\n    formControl: {\n        margin: theme.spacing(1),\n        minWidth: 120,\n    },\n    selectEmpty: {\n        marginTop: theme.spacing(2),\n    },\n    autoComplete: {\n        width: \"50%\",\n        marginLeft: \"auto\",\n        marginRight: \"auto\",\n    },\n    radio: {\n        width: \"50%\",\n        marginLeft: \"auto\",\n        marginRight: \"auto\"\n    },\n});\n\nclass PhenotypeResultBreakdown extends React.Component {\n// the graph configuration, just override the ones you need\n    const\n    myConfig = {\n        nodeHighlightBehavior: true,\n        directed: false,\n        staticGraphWithDragAndDrop: true,\n        d3: {\n            alphaTarget: 0.05,\n            disableLinkForce: true\n        },\n        node: {\n            color: \"blue\",\n            size: 300,\n            highlightStrokeColor: \"black\",\n            labelProperty: \"name\",\n            labelPosition: \"bottom\",\n        },\n        link: {\n            highlightColor: \"lightblue\",\n            renderLabel: true,\n            labelProperty: \"linkType\",\n            strokeWidth: 3,\n            fontSize: 10\n        },\n    };\n\n    constructor(props) {\n        super(props);\n        this.gwasStudyClicked = this.gwasStudyClicked.bind(this);\n        this.experimentClicked = this.experimentClicked.bind(this);\n        this.state = {\n            mousePhenotype: \"\",\n            humanPhenotype: \"\",\n            breakdownData: null,\n            backBtnClick: null,\n            loading: true,\n            tabValue: 0,\n            dataTabValue: 0,\n            configData: api_server,\n            mappingGraphData: null,\n            mappingGraphConfig: null,\n            humanOntology: \"\",\n            mousePval: 0,\n            humanPval: 0,\n        };\n    }\n\n    componentDidMount() {\n        this.getBreakdownData();\n    }\n\n    componentWillUpdate(nextProps, nextState) {\n        if (this.props.mousePhenotype !== nextProps.mousePhenotype || this.props.humanPhenotype !== nextProps.humanPhenotype) {\n            this.getBreakdownData();\n        }\n    }\n\n    gwasStudyClicked(study) {\n        let studyID = study.currentTarget.getAttribute(\"data-link\");\n        var win = window.open(\"https://www.gwascentral.org/study/\" + studyID, \"_blank\");\n        if (win)\n            win.focus();\n    }\n\n    experimentClicked(row) {\n        let selection = $(row.target).attr(\"data-study\");\n    }\n\n    getBreakdownData() {\n        let mousePhenotype = this.props.mousePhenotype ? this.props.mousePhenotype : \"\";\n        let humanPhenotype = this.props.humanPhenotype ? this.props.humanPhenotype : \"\";\n        let humanOntology = this.props.humanOntology ? this.props.humanOntology : \"\";\n        let url_string = this.state.configData.api_server + \"controller.php?type=study&phenotypeBreakdown=&mouseTerm=\" + mousePhenotype + \"&humanTerm=\" + humanPhenotype + \"&humanOntology=\" + humanOntology;\n        axios.get(url_string)\n            .then((response) => {\n                if (response.status === 200) {\n                    if (response.data) {\n                        let dataTabValue = response.data[\"GWAS Studies\"].length > 0 ? 0 : 1;\n                        // graph payload (with minimalist structure)\n                        if (!Array.isArray(response.data[\"Mappings\"])) {\n                            let humanTermCoords = [50, 214];\n                            let mouseTermCoords = [750, 214];\n                            let data = {\n                                nodes: [\n                                    {\n                                        id: response.data[\"Mappings\"][\"humanNodeId\"],\n                                        name: response.data[\"Mappings\"][\"humanLabel\"],\n                                        x: humanTermCoords[0],\n                                        y: humanTermCoords[1],\n                                        color: \"red\",\n                                        symbolType: \"square\"\n                                    },\n                                    {\n                                        id: response.data[\"Mappings\"][\"mouseNodeId\"],\n                                        name: response.data[\"Mappings\"][\"mouseLabel\"],\n                                        x: mouseTermCoords[0],\n                                        y: mouseTermCoords[1],\n                                        color: \"blue\",\n                                        symbolType: \"square\"\n                                    }\n                                ],\n                                links: []\n                            };\n\n                            for (var i = 0; i < response.data[\"Mappings\"][\"mouseSynonyms\"].length; i++) {\n                                let mapping = response.data[\"Mappings\"][\"mouseSynonyms\"][i];\n                                let mouseNode = {\n                                    id: mapping[\"synonymId\"],\n                                    name: mapping[\"synonymLabel\"],\n                                    x: mouseTermCoords[0] - 175,\n                                    y: mouseTermCoords[1] - 105 + (i * 65),\n                                    color: \"lightblue\"\n                                };\n                                let link = {\n                                    source: mapping[\"synonymId\"],\n                                    target: response.data[\"Mappings\"][\"mouseNodeId\"],\n                                    linkType: \"Synonym\"\n                                };\n                                if (!data.nodes.includes(mouseNode)) {\n                                    data.nodes.push(mouseNode);\n                                }\n                                if (!data.links.includes(link)) {\n                                    data.links.push(link);\n                                }\n                            }\n                            for (var i = 0; i < response.data[\"Mappings\"][\"humanSynonyms\"].length; i++) {\n                                let mapping = response.data[\"Mappings\"][\"humanSynonyms\"][i];\n                                let humanNode = {\n                                    id: mapping[\"synonymId\"],\n                                    name: mapping[\"synonymLabel\"],\n                                    x: humanTermCoords[0] + 175,\n                                    y: humanTermCoords[1] - 105 + (i * 65),\n                                    color: \"orange\"\n                                };\n                                let link = {\n                                    source: response.data[\"Mappings\"][\"humanNodeId\"],\n                                    target: mapping[\"synonymId\"],\n                                    linkType: \"Synonym\"\n                                };\n                                if (!data.nodes.includes(humanNode)) {\n                                    data.nodes.push(humanNode);\n                                }\n                                if (!data.links.includes(link)) {\n                                    data.links.push(link);\n                                }\n                            }\n                            for (var i = 0; i < response.data[\"Mappings\"][\"matches\"].length; i++) {\n                                let match = response.data[\"Mappings\"][\"matches\"][i];\n                                let source = _.find(data.nodes, function (node) {\n                                    if (node.id === match[\"humanNodeId\"])\n                                        return true;\n                                });\n                                let target = _.find(data.nodes, function (node) {\n                                    if (node.id === match[\"mouseNodeId\"])\n                                        return true;\n                                });\n                                let link = {\n                                    source: source ? match[\"humanNodeId\"] : response.data[\"Mappings\"][\"humanNodeId\"],\n                                    target: target ? match[\"mouseNodeId\"] : response.data[\"Mappings\"][\"mouseNodeId\"],\n                                    linkType: match[\"isExact\"] ? \"Exact Match\" : \"Partial Match\"\n                                }\n                                if (!data.links.includes(link)) {\n                                    data.links.push(link);\n                                }\n                            }\n                            this.setState({\n                                breakdownData: response.data,\n                                dataTabValue: dataTabValue,\n                                loading: false,\n                                mappingGraphData: data\n                            });\n                        } else {\n                            this.setState({\n                                breakdownData: response.data,\n                                dataTabValue: dataTabValue,\n                                loading: false,\n                                mappingGraphData: null\n                            });\n                        }\n                    } else {\n                        this.setState({breakdownData: null, loading: false, mappingGraphData: null});\n                    }\n                }\n                this.props.onBreakdownFinish();\n            })\n            .catch((error) => {\n                console.log(\"An error occurred retrieving phenotype data.\");\n                this.setState({loading: false, breakdownData: null, mappingGraphData: null});\n                this.props.onBreakdownFinish();\n            });\n    }\n\n    getHumanTermID(breakdownData) {\n        if (breakdownData) {\n            if (breakdownData[\"Mappings\"][\"humanID\"]) {\n                return breakdownData[\"Mappings\"][\"humanID\"];\n            } else {\n                return \"No mapping found\";\n            }\n        }\n    }\n\n    getHumanTerm(breakdownData) {\n        if (breakdownData) {\n            if (breakdownData[\"Mappings\"][\"humanLabel\"]) {\n                return breakdownData[\"Mappings\"][\"humanLabel\"];\n            } else {\n                return \"No mapping found\";\n            }\n        }\n    }\n\n    getMouseTermID(breakdownData) {\n        if (breakdownData) {\n            if (breakdownData[\"Mappings\"][\"mouseID\"]) {\n                return breakdownData[\"Mappings\"][\"mouseID\"];\n            } else {\n                return \"No mapping found\";\n            }\n        }\n    }\n\n    getMouseTerm(breakdownData) {\n        if (breakdownData) {\n            if (breakdownData[\"Mappings\"][\"mouseLabel\"]) {\n                return breakdownData[\"Mappings\"][\"mouseLabel\"];\n            } else {\n                return \"No mapping found\";\n            }\n        }\n    }\n\n    getGWASStudies(breakdownData) {\n        if (breakdownData) {\n            if (breakdownData[\"GWAS Studies\"].length > 0) {\n\n            } else {\n                return \"0\";\n            }\n        }\n    }\n\n    getGeneKnockouts(breakdownData) {\n        if (breakdownData) {\n            if (breakdownData[\"Gene Knockouts\"].length > 0) {\n\n            } else {\n                return \"0\";\n            }\n        }\n    }\n\n    getHumanSynonyms(breakdownData) {\n        if (breakdownData) {\n            if (breakdownData[\"Mappings\"][\"humanSynonyms\"] && breakdownData[\"Mappings\"][\"humanSynonyms\"].length > 0) {\n                return breakdownData[\"Mappings\"][\"humanSynonyms\"].map((synonym, index) =>\n                    <li>{synonym[\"synonymLabel\"]}</li>);\n            } else {\n                return <li>None</li>;\n            }\n        }\n    }\n\n    getMouseSynonyms(breakdownData) {\n        if (breakdownData) {\n            if (breakdownData[\"Mappings\"][\"mouseSynonyms\"] && breakdownData[\"Mappings\"][\"mouseSynonyms\"].length > 0) {\n                return breakdownData[\"Mappings\"][\"mouseSynonyms\"].map((synonym, index) =>\n                    <li>{synonym[\"synonymLabel\"]}</li>);\n            } else {\n                return <li>None</li>;\n            }\n        }\n    }\n\n    openGenePage(gene_key) {\n        gene_key = gene_key.currentTarget.getAttribute(\"data-link\");\n        window.open(\"https://www.mousephenotype.org/data/genes/\" + gene_key, \"_blank\").focus();\n    }\n\n    openProcedurePage(procedure_key) {\n        procedure_key = procedure_key.currentTarget.getAttribute(\"data-link\");\n        window.open(\"https://web.mousephenotype.org/impress/ProcedureInfo?procID=\" + procedure_key, \"_blank\").focus();\n    }\n\n    openParameterPage(parameter_key) {\n        let procedure_key = parameter_key.currentTarget.previousSibling.getAttribute(\"data-link\");\n        parameter_key = parameter_key.currentTarget.getAttribute(\"data-link\");\n        window.open(\"https://web.mousephenotype.org/impress/OntologyInfo?procID=\" + procedure_key + \"#\" + parameter_key, \"_blank\").focus();\n    }\n\n    humanPValChanged = (e) => {\n        this.setState({humanPval: e.target.value});\n    }\n\n    mousePValChanged = (e) => {\n        this.setState({mousePval: e.target.value});\n    }\n\n    getExperimentData() {\n        let data = this.state.breakdownData[\"Gene Knockouts\"];\n        let pval = this.state.mousePval;\n        let filtered = [];\n        for (var i = 0; i < data.length; i++) {\n            if (data[i][\"-log P-value\"] >= pval)\n                filtered.push(data[i]);\n        }\n        return filtered;\n    }\n\n    getGWASData() {\n        let data = this.state.breakdownData[\"GWAS Studies\"];\n        let pval = this.state.humanPval;\n        let filtered = [];\n        for (var i = 0; i < data.length; i++) {\n            if (data[i][\"-log P-value\"] >= pval)\n                filtered.push(data[i]);\n        }\n        return filtered;\n    }\n\n    render() {\n        const {breakdownData, loading, tabValue, dataTabValue, mappingGraphData} = this.state;\n        const {classes} = this.props;\n        return (\n            <Paper id=\"phenotypeResultsContainer\" className=\"container\">\n                <LoadingSpinner loading={loading}/>\n                {this.props.backBtnClick ?\n                    <Button variant=\"contained\" color=\"primary\" onClick={this.props.backBtnClick}>Back</Button> : null}\n                <div className=\"phenotype-breakdown-container\">\n                    <AppBar position=\"static\" color=\"default\">\n                        <Tabs\n                            value={tabValue}\n                            onChange={(e, val) => this.setState({tabValue: val})}\n                            indicatorColor=\"primary\"\n                            textColor=\"primary\"\n                            variant=\"fullWidth\"\n                            aria-label=\"full width tabs example\"\n                        >\n                            <Tab label=\"Data\"/>\n                            <Tab label=\"Mapping\"/>\n\n                        </Tabs>\n                    </AppBar>\n                    <TabPanel value={tabValue} index={0} className=\"subTabMenu\">\n                        <AppBar position=\"static\" color=\"default\">\n                            <Tabs\n                                value={dataTabValue}\n                                onChange={(e, val) => this.setState({dataTabValue: val})}\n                                indicatorColor=\"primary\"\n                                textColor=\"primary\"\n                                aria-label=\"full width tabs example\"\n                                variant=\"fullWidth\"\n                                centered\n                            >\n                                <Tab\n                                    label={(breakdownData ? breakdownData[\"GWAS Studies\"].length : 0) + \" Human GWAS Studies\"}\n                                    wrapped/>\n                                <Tab\n                                    label={(breakdownData ? breakdownData[\"Gene Knockouts\"].length : 0) + \" Mouse Gene Knockouts\"}\n                                    wrapped/>\n                            </Tabs>\n                        </AppBar>\n                        <TabPanel value={dataTabValue} index={0}>\n                            <div style={{width: \"100%\"}}>\n                                <FormControl style={{marginLeft:\"44%\"}} className={classes.formControl} onChange={this.humanPValChanged}>\n                                    <InputLabel shrink>Human P-value</InputLabel>\n                                    <Select value={this.state.humanPval} className={classes.selectEmpty}\n                                            id=\"human_pval_select\"\n                                            onChange={this.humanPValChanged}>\n                                        <MenuItem value={0}>0</MenuItem>\n                                        <MenuItem value={1}>1</MenuItem>\n                                        <MenuItem value={2}>2</MenuItem>\n                                        <MenuItem value={3}>3</MenuItem>\n                                        <MenuItem value={4}>4</MenuItem>\n                                        <MenuItem value={5}>5</MenuItem>\n                                        <MenuItem value={6}>6</MenuItem>\n                                        <MenuItem value={7}>7</MenuItem>\n                                        <MenuItem value={8}>8</MenuItem>\n                                        <MenuItem value={9}>9</MenuItem>\n                                        <MenuItem value={10}>10</MenuItem>\n                                    </Select>\n                                </FormControl>\n                            </div>\n\n                            {breakdownData ? <ResultTable orderBy={\"name\"} hiddenHeaders={[\"id\"]} dataHeaders={{\"name\": \"id\"}} cellClickHandlers={{\"name\": this.gwasStudyClicked}}\n                                                          tableData={this.getGWASData()}/> : null}\n                        </TabPanel>\n                        <TabPanel value={dataTabValue} index={1}>\n                            <div style={{width:\"100%\"}}>\n                                <FormControl style={{marginLeft:\"44%\"}} className={classes.formControl}>\n                                    <InputLabel shrink>Mouse P-value</InputLabel>\n                                    <Select value={this.state.mousePval} className={classes.selectEmpty} id=\"select\"\n                                            onChange={this.mousePValChanged}>\n                                        <MenuItem value={0}>0</MenuItem>\n                                        <MenuItem value={1}>1</MenuItem>\n                                        <MenuItem value={2}>2</MenuItem>\n                                        <MenuItem value={3}>3</MenuItem>\n                                        <MenuItem value={4}>4</MenuItem>\n                                        <MenuItem value={5}>5</MenuItem>\n                                        <MenuItem value={6}>6</MenuItem>\n                                        <MenuItem value={7}>7</MenuItem>\n                                        <MenuItem value={8}>8</MenuItem>\n                                        <MenuItem value={9}>9</MenuItem>\n                                        <MenuItem value={10}>10</MenuItem>\n                                    </Select>\n                                </FormControl>\n                            </div>\n\n                            {breakdownData ? <ResultTable orderBy={\"Gene\"} cellClickHandlers={{\n                                \"Gene\": this.openGenePage,\n                                \"Procedure\": this.openProcedurePage,\n                                \"Parameter\": this.openParameterPage\n                            }} dataHeaders={{\n                                \"Gene\": \"Gene Key\",\n                                \"Parameter\": \"Parameter Key\",\n                                \"Procedure\": \"Procedure Key\"\n                            }} hiddenHeaders={[\"Procedure Key\", \"Parameter Key\", \"Gene Key\"]}\n                                                          tableData={this.getExperimentData()}/> : null}\n                        </TabPanel>\n                    </TabPanel>\n                    <TabPanel value={tabValue} index={1}>\n                        {\n                            breakdownData && !Array.isArray(breakdownData[\"Mappings\"]) ? (<div>\n                                    <Grid container>\n                                        <Grid item xs>\n                                            <h4 className=\"center\">Homo Sapiens</h4>\n                                        </Grid>\n                                        <Grid item xs>\n                                            <h4 className=\"center\">Mus Musculus</h4>\n                                        </Grid>\n                                    </Grid>\n                                    <Grid container>\n                                        <Grid item xs={3} className=\"col highlight\">\n                                            <p>ID</p>\n                                        </Grid>\n                                        <Grid item xs={3}>\n                                            <p id=\"HPO-Matched-Term\">{this.getHumanTermID(breakdownData)}</p>\n                                        </Grid>\n                                        <Grid item xs={3} className=\"col highlight\">\n                                            <p>ID</p>\n                                        </Grid>\n                                        <Grid item xs={3}>\n                                            <p id=\"MP-Matched-Term\">{this.getMouseTermID(breakdownData)}</p>\n                                        </Grid>\n                                        <Grid item xs={3} className=\"col highlight\">\n                                            <p>Term</p>\n                                        </Grid>\n                                        <Grid item xs={3}>\n                                            <p id=\"HPO-Matched-Term\">{this.getHumanTerm(breakdownData)}</p>\n                                        </Grid>\n                                        <Grid item xs={3} className=\"col highlight\">\n                                            <p>Term</p>\n                                        </Grid>\n                                        <Grid item xs={3}>\n                                            <p id=\"MP-Matched-Term\">{this.getMouseTerm(breakdownData)}</p>\n                                        </Grid>\n\n                                    </Grid>\n                                    <Grid container>\n                                        <Grid item xs={3} className=\"col highlight\">\n                                            <p>Synonyms</p>\n                                        </Grid>\n                                        <Grid item xs={3} className=\"col\">\n                                            <ul>\n                                                {this.getHumanSynonyms(breakdownData)}\n                                            </ul>\n                                        </Grid>\n                                        <Grid item xs={3} className=\"col highlight\">\n                                            <p>Synonyms</p>\n                                        </Grid>\n                                        <Grid item xs={3} className=\"col\">\n                                            <ul>\n                                                {this.getMouseSynonyms(breakdownData)}\n                                            </ul>\n                                        </Grid>\n                                    </Grid>\n                                    <Grid container>\n                                        <Grid item xs={3} className=\"col\">\n                                            <svg className=\"legendIcon\" xmlns=\"http://www.w3.org/2000/svg\">\n                                                <circle cx=\"5\" cy=\"5\" r=\"10px\" fill=\"red\"/>\n                                            </svg>\n                                            {this.props.humanOntology === \"MESH\" ? \" MeSH Term\" : \" HPO Term\"}\n                                        </Grid>\n                                        <Grid item xs={3} className=\"col\">\n                                            <svg className=\"legendIcon\" xmlns=\"http://www.w3.org/2000/svg\">\n                                                <circle cx=\"5\" cy=\"5\" r=\"10px\" fill=\"blue\"/>\n                                            </svg>\n                                            {\" MP Term\"}\n                                        </Grid>\n                                    </Grid>\n                                    <Grid container>\n                                        <Grid item xs={3} className=\"col\">\n                                            <svg className=\"legendIcon\" xmlns=\"http://www.w3.org/2000/svg\">\n                                                <circle cx=\"5\" cy=\"5\" r=\"10px\" fill=\"orange\"/>\n                                            </svg>\n                                            {this.props.humanOntology === \"MESH\" ? \" MeSH Synonym\" : \" HPO Synonym\"}\n                                        </Grid>\n                                        <Grid item xs={3} className=\"col\">\n                                            <svg className=\"legendIcon\" xmlns=\"http://www.w3.org/2000/svg\">\n                                                <circle cx=\"5\" cy=\"5\" r=\"10px\" fill=\"lightblue\"/>\n                                            </svg>\n                                            {\" MP Synonym\"}\n                                        </Grid>\n                                    </Grid>\n                                    <Graph\n                                        id=\"graph-id\" // id is mandatory\n                                        data={mappingGraphData}\n                                        config={this.myConfig}\n                                    />\n                                </div>\n                            ) : <p>No mappings identified.</p>\n                        }\n\n                    </TabPanel>\n                </div>\n            </Paper>\n        );\n    }\n}\n\nexport default withStyles(useStyles)(PhenotypeResultBreakdown);","/var/www/testing/GC_Mouse_Integration/src/OntologyHierarchy/Components/OntologyTree/OntologyTree.js",["108","109","110","111","112","113"],"import {Button, Icon, Paper, SvgIcon, withStyles} from \"@material-ui/core\";\nimport {animated, useSpring} from \"react-spring/web.cjs\";\nimport Collapse from \"@material-ui/core/Collapse\";\nimport PropTypes from \"prop-types\";\nimport React from \"react\";\nimport TreeView from \"@material-ui/lab/TreeView\";\nimport ArrowDropDownIcon from \"@material-ui/icons/ArrowDropDown\";\nimport ArrowRightIcon from \"@material-ui/icons/ArrowRight\";\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\nimport StyledTreeItem from \"./Components/StyledTreeItem\";\nimport _ from 'lodash';\n\nconst useStyles = theme => ({\n    root: {\n        marginTop: 20,\n        marginLeft: 0,\n        overflowY: \"scroll\",\n        height: \"75vh\",\n    },\n    highlight: {\n        backgroundColor: \"#61aefd\",\n    },\n    btn: {\n        marginRight: 5\n    }\n});\n\nfunction TransitionComponent(props) {\n    const style = useSpring({\n        from: {opacity: 0, transform: 'translate3d(20px,0,0)'},\n        to: {opacity: props.in ? 1 : 0, transform: `translate3d(${props.in ? 0 : 20}px,0,0)`},\n    });\n    return (\n        <animated.div style={style}>\n            <Collapse {...props} />\n        </animated.div>\n    );\n}\n\nTransitionComponent.propTypes = {\n    /**\n     * Show the component; triggers the enter or exit states\n     */\n    in: PropTypes.bool,\n};\n\nclass OntologyTree extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            loading: false,\n            treeData: null,\n            expandedNodes: [''],\n            selectedNodes: [''],\n            selectedSpecies: \"Mouse\",\n            nodes: [],\n            treeOntology: \"\",\n            onToggle: null,\n            onSelect: null,\n            onMappingClick: null,\n            onBtnClick: null,\n            sourceOntology: \"\",\n            mappingOntology: \"\",\n            selectedPhenotypeLabel: \"\",\n            treeID: \"\",\n        };\n    }\n\n    getTreeNodes = (nodes, parentPath) => {\n        const {classes} = this.props;\n        const btn = nodes.hasMapping ?\n            <Button className={classes.btn} size=\"small\" onClick={() => this.props.onMappingClick(nodes.label)}\n                    color=\"primary\" variant=\"outlined\" id={nodes.id}\n            ><img width=\"50px\" src={\"/images/MappingIcon.svg\"}/></Button>\n            : nodes.hasData ? <Button className={classes.btn} size=\"small\" onClick={() => this.props.onBtnClick(nodes.id)}\n                    color=\"primary\" variant=\"outlined\" id={nodes.id}\n            ><img width=\"50px\" src={this.props.treeID === \"humanTree\" ? \"/images/GWASDataIcon.svg\" : \"/images/KnockoutDataIcon.svg\"}/></Button> : null;\n        const tempChildNode = (nodes.hasChildren === true) && (_.isEmpty(nodes.children)) ?\n            <StyledTreeItem labelText={<CircularProgress color=\"inherit\" size={15}/>}/> : null;\n        if (!_.isEmpty(nodes.children)) {\n            nodes.children = _.orderBy(nodes.children, ['label'], ['asc']); // all nodes must be sorted alphabetically!\n        }\n        let path = null;\n        if (parentPath !== undefined)\n            path = parentPath + \"-\" + nodes.id;\n        else\n            path = nodes.id;\n        let id = this.props.treeID + \"-\" + path;\n        return (\n            <StyledTreeItem id={id} onLabelClick={(e) => e.preventDefault()} key={nodes.id} nodeId={id}\n                            data-term={nodes.id} labelText={nodes.label} labelIcon={btn}>\n                {!_.isEmpty(nodes.children) ? Object.keys(nodes.children).map((key, index) => this.getTreeNodes(nodes.children[key], path)) : tempChildNode}\n            </StyledTreeItem>\n        );\n    }\n\n    getExpandedNodeIDs = () => {\n        let terms = this.props.expanded;\n        let result = [];\n        terms.forEach(term => function() {\n            // result.push($())\n        });\n        return result;\n    }\n\n\n    render() {\n        const {classes} = this.props;\n        const {\n            loading,\n        } = this.state;\n        if (this.props.treeData === null || this.props.treeData === undefined) {\n            throw new Error('No ontology data received.');\n        }\n        return (\n            <TreeView id={this.props.treeID} className={classes.root} expanded={this.props.expanded}\n                      selected={this.props.selected}\n                      defaultCollapseIcon={<ArrowDropDownIcon/>} defaultExpandIcon={<ArrowRightIcon/>}\n                      defaultEndIcon={<div style={{width: 24}}/>} onNodeToggle={this.props.onToggle}\n                      onNodeSelect={this.props.onSelect}>\n                {this.getTreeNodes(this.props.treeData)}\n            </TreeView>\n        );\n\n    }\n\n}\n\nexport default withStyles(useStyles)(OntologyTree);\n\n","/var/www/testing/GC_Mouse_Integration/src/UtilityComponents/ResultTable.js",["114","115","116","117","118"],"import React, {useCallback} from 'react';\nimport './ResultTable.css';\nimport $ from 'jquery';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\nimport {Button, TablePagination, TableSortLabel, Tooltip} from \"@material-ui/core\";\n\nclass ResultTable extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            tableData: {},\n            onRowClick: null,\n            onCellClick: null,\n            rowsPerPage: 10,\n            page: 0,\n            order: this.props.order ? this.props.order : \"asc\",\n            orderBy: this.props.orderBy ? this.props.orderBy : \"Gene\",\n            cellClickHandlers: null,\n            hiddenHeaders: null,\n            hoverDataMap: null,\n            dataHeaders: null,\n        }\n    }\n\n    handleChangePage = (event, newPage) => {\n        this.setState({page: newPage});\n    }\n\n    handleChangeRowsPerPage = (event) => {\n        this.setState({rowsPerPage: parseInt(event.target.value, 10), page: 0});\n    }\n\n    handleRequestSort = (property) => {\n        const isAsc = this.state.orderBy === property && this.state.order === 'asc';\n        this.setState({order: isAsc ? 'desc' : 'asc', orderBy: property});\n    }\n\n    descendingComparator = (a, b, orderBy) => {\n        if (!isNaN(a[orderBy])) { // numeric values must be converted from a string first.\n            if (+b[orderBy] < +a[orderBy]) {\n                return -1;\n            }\n            if (+b[orderBy] > +a[orderBy]) {\n                return 1;\n            }\n        } else {\n            if (b[orderBy] < a[orderBy]) {\n                return -1;\n            }\n            if (b[orderBy] > a[orderBy]) {\n                return 1;\n            }\n        }\n\n        return 0;\n    }\n\n    getComparator = (order, orderBy) => {\n        return order === 'desc'\n            ? (a, b) => this.descendingComparator(a, b, orderBy)\n            : (a, b) => -this.descendingComparator(a, b, orderBy);\n    }\n\n    stableSort = (array, comparator) => {\n        const stabilizedThis = array.map((el, index) => [el, index]);\n        stabilizedThis.sort((a, b) => {\n            const order = comparator(a[0], b[0]);\n            if (order !== 0) return order;\n            return a[1] - b[1];\n        });\n        return stabilizedThis.map((el) => el[0]);\n    }\n\n    viewButtonHeader = () => {\n        if (this.props.isSearchResult) {\n            return (\n                <TableCell align=\"center\" padding=\"default\"/>\n            );\n        } else\n            return null;\n    }\n\n    getCellClickHandler = (header) => {\n        if (this.props.cellClickHandlers) {\n            return this.props.cellClickHandlers[header];\n        }\n    }\n\n    getTableCell = (row, key) => {\n        let clickFunc = this.getCellClickHandler(key);\n        let dataLink = this.props.dataHeaders ? row[this.props.dataHeaders[key]] : null\n        if (dataLink)\n            return (<TableCell align=\"center\" data-link={dataLink} onClick={clickFunc} data-study={row[\"ID\"]} style={{textDecoration: 'underline blue'}}>{row[key]}</TableCell>);\n        else\n            return (<TableCell align=\"center\" data-study={row[\"ID\"]} style={{textDecoration: 'none'}}>{row[key]}</TableCell>);\n    }\n\n    getCellHoverContent = (row, key) => {\n        if (this.props.hoverDataMap[key]) {\n            let content = row[this.props.hoverDataMap[key]];\n            let tooltipBody = null;\n            if (Array.isArray(content)) {\n                tooltipBody = (\n                    <div>\n                        <div style={{textAlign: \"center\", fontWeight: \"bold\"}}>{this.props.hoverDataMap[key]}</div> <br />\n                    {\n                        content.map(syn => {\n                            return <div>-{syn}</div>;\n                        })\n                    }\n                    </div>\n\n                );\n                content = tooltipBody;\n            }\n            return content;\n        } else\n            return null;\n    }\n\n    getSearchTableCell = (row, key) => {\n        let clickFunc = this.getCellClickHandler(key);\n        let hoverText = this.getCellHoverContent(row, key);\n        if (hoverText)\n            return (\n                <Tooltip title={hoverText} arrow>\n                    <TableCell align=\"center\"\n                               onClick={clickFunc}\n                               data-human-ont={row[\"Human Ontology\"]}\n                               data-human-term={row[\"ID\"]}\n                               data-mouse-term={row[\"MP ID\"]}>{row[key] || row[key] === 0 ? row[key] : \"-\"}</TableCell>\n                </Tooltip>\n            );\n        else\n            return (\n                <TableCell align=\"center\"\n                           onClick={clickFunc}\n                           data-human-ont={row[\"Human Ontology\"]}\n                           data-human-term={row[\"ID\"]}\n                           data-mouse-term={row[\"MP ID\"]}>{row[key] || row[key] === 0 ? row[key] : \"-\"}</TableCell>\n            );\n    }\n\n    render() {\n        const paddingHeaders = [\"Gene\", \"Procedure Parameter\", \"Sex\"];\n        let hiddenHeaders = this.props.hiddenHeaders || [];\n        if (typeof this.props.tableData != \"undefined\" && this.props.tableData !== null)\n            if (this.props.tableData.length > 0) {\n                return (<div className=\"container\">\n                        <TableContainer component={Paper} className=\"info\" id=\"searchResults\">\n                            <Table size=\"small\" aria-label=\"a dense table\">\n                                <TableHead>\n                                    <TableRow>\n                                        {Object.keys(this.props.tableData[0]).map((header, index) => {\n                                            if (!hiddenHeaders.includes(header))\n                                                return (<TableCell align=\"center\"\n                                                                   padding={paddingHeaders.includes(header) ? \"none\" : \"default\"}\n                                                                   sortDirection={this.state.orderBy === header ? this.state.order : false}\n                                                                   key={index}\n                                                                   onClick={() => this.handleRequestSort(header)}>{header}\n                                                    <TableSortLabel active={this.state.orderBy === header}\n                                                                    direction={this.state.orderBy === header ? this.state.order : \"asc\"}\n                                                                    onClick={() => this.handleRequestSort(header)}>\n                                                    </TableSortLabel>\n                                                </TableCell>)\n                                        })}\n                                        {this.viewButtonHeader()}\n\n                                    </TableRow>\n                                </TableHead>\n                                <TableBody>\n                                    {this.stableSort(this.props.tableData, this.getComparator(this.state.order, this.state.orderBy)).slice(this.state.page * this.state.rowsPerPage,\n                                        this.state.page * this.state.rowsPerPage + this.state.rowsPerPage).map((row, index) => {\n                                        if (this.props.isSearchResult)\n                                            return (\n                                                <TableRow data-human-ont={row[\"Human Ontology\"]}\n                                                          data-human-term={row[\"ID\"]} data-mouse-term={row[\"MP ID\"]}\n                                                          key={index}>\n                                                    {Object.keys(row).map((key) => {\n                                                        if (!hiddenHeaders.includes(key))\n                                                            return this.getSearchTableCell(row, key);\n                                                    })}<TableCell align=\"center\"><Button size=\"small\" color=\"primary\"\n                                                                                         variant=\"contained\"\n                                                                                         data-human-ont={row[\"Human Ontology\"]}\n                                                                                         data-human-term={row[\"ID\"]}\n                                                                                         data-mouse-term={row[\"MP ID\"]}\n                                                                                         onClick={() => this.props.viewBtnClicked ? this.props.viewBtnClicked(row[\"MP ID\"], row[\"ID\"], row[\"Human Ontology\"]) : null}>View</Button></TableCell>\n                                                </TableRow>)\n                                        else\n                                            return (\n                                                <TableRow data-study={row[\"ID\"]} key={index}>\n                                                    {Object.keys(row).map((key) => {\n                                                        if (!hiddenHeaders.includes(key))\n                                                            return this.getTableCell(row, key);\n                                                    })}\n                                                </TableRow>\n                                            )\n                                    })}\n                                </TableBody>\n                            </Table>\n                        </TableContainer>\n                        <TablePagination\n                            rowsPerPageOptions={[10, 25, 50]}\n                            component=\"div\"\n                            count={this.props.tableData.length}\n                            rowsPerPage={this.state.rowsPerPage}\n                            page={this.state.page}\n                            onChangePage={this.handleChangePage}\n                            onChangeRowsPerPage={this.handleChangeRowsPerPage}\n                        />\n                    </div>\n                );\n            } else {\n                return (\n                    <span className=\"center\">No results found.</span>\n                );\n            }\n        else\n            return null;\n\n    }\n}\n\n\nexport default ResultTable;","/var/www/testing/GC_Mouse_Integration/src/Home/Components/MainMenuItem.js",["119","120"],"import React, {useCallback} from 'react';\nimport {Paper, withStyles} from \"@material-ui/core\";\nimport './MainMenuItem.css';\nimport Typography from \"@material-ui/core/Typography\";\n\nconst useStyles = theme => ({\n    paper: {\n        padding: theme.spacing(2),\n        textAlign: 'center',\n        color: theme.palette.text.secondary,\n        height: 500,\n        zIndex: 1,\n        position: 'relative',\n        border: \"solid 1px black\",\n        width: \"100%\",\n    },\n    img: {\n        width: 100,\n        marginTop: \"10%\",\n    },\n    header: {\n        textDecoration: \"none\",\n        marginTop: \"5%\",\n        position: \"absolute\",\n        textAlign: \"center\",\n        width: \"90%\",\n    },\n    text: {\n        textDecoration: 'none',\n        marginTop: \"30%\",\n        position: \"absolute\",\n    }\n});\n\nclass MainMenuItem extends React.Component {\n\n    state = {isZoomed: false};\n\n    toggle = () => {\n        this.setState({\n            isZoomed: !this.state.isZoomed\n        });\n    }\n\n    render() {\n        const {classes} = this.props;\n        const {isZoomed} = this.state;\n\n        return (\n            <Paper style={{transform: this.state.isZoomed ? 'scale(1.1)' : 'scale(1)',\n                transition: this.state.isZoomed ? '0.3s' :  '0.3s', zIndex: this.state.isZoomed ? 99 :  1}}\n                   onMouseEnter={() => this.toggle()}\n                   onMouseLeave={() => this.toggle()} className={classes.paper}>\n                <img className={classes.img} src={this.props.image} alt={this.props.alt}/>\n                <Typography className={classes.header} variant='h5' gutterBottom>{this.props.heading}</Typography>\n                <Typography className={classes.text} variant='body1' gutterBottom>{this.props.body}</Typography>\n            </Paper>);\n    }\n}\n\nexport default withStyles(useStyles)(MainMenuItem);","/var/www/testing/GC_Mouse_Integration/src/OntologyHierarchy/Components/OntologyTree/Components/StyledTreeItem.js",["121"],"import React from 'react';\nimport Typography from '@material-ui/core/Typography';\nimport {withStyles} from '@material-ui/core';\nimport TreeItem from '@material-ui/lab/TreeItem';\nimport SearchIcon from '@material-ui/icons/Search';\n\nconst useTreeItemStyles = theme => ({\n  root: {\n    color: theme.palette.text.secondary,\n    '&:hover > $content': {\n      // backgroundColor: theme.palette.action.hover,\n    },\n    '&:focus > $content, &$selected > $content': {\n      // backgroundColor: `var(--tree-view-bg-color, ${theme.palette.grey[400]})`,\n      color: 'var(--tree-view-color)',\n    },\n    '&:focus > $content $label, &:hover > $content $label, &$selected > $content $label': {\n      // backgroundColor: theme.palette.action.hover,\n    },\n  },\n  content: {\n    color: theme.palette.text.secondary,\n    borderTopRightRadius: theme.spacing(2),\n    borderBottomRightRadius: theme.spacing(2),\n    paddingRight: theme.spacing(1),\n    fontWeight: theme.typography.fontWeightBold,\n    '$expanded > &': {\n      fontWeight: theme.typography.fontWeightRegular,\n    },\n  },\n  group: {\n    '& $content': {\n      // paddingLeft: theme.spacing(2),\n    },\n  },\n  expanded: {},\n  selected: {},\n  label: {\n    fontWeight: 'inherit',\n    color: 'inherit',\n      textAlign: 'left',\n      wordWrap: \"normal\"\n  },\n});\n\nclass StyledTreeItem extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {label: \"\", color: \"\", bgColor: \"\",};\n    }\n\n\n\n    render() {\n        const {classes} = this.props;\n        const {labelText, labelIcon, labelInfo, color, bgColor,key, ...other} = this.props;\n\n        return (\n            <TreeItem\n                label={\n                    <div className={classes.label}>\n                        <Typography variant=\"body2\" className={classes.content} component=\"span\">\n                            {this.props.labelText}\n                        </Typography>\n                        <Typography variant=\"caption\" color=\"inherit\">\n                            {this.props.labelInfo}\n                        </Typography>\n                        <div className={classes.labelIcon} style={{float: 'right'}}>\n                            {labelIcon}\n                        </div>\n                    </div>\n                }\n                style={{\n                    '--tree-view-color': color,\n                    '--tree-view-bg-color': bgColor,\n                }}\n                key={this.props.key}\n             nodeId={this.props.nodeId}\n            classes={{\n        root: classes.root,\n        content: classes.content,\n        expanded: classes.expanded,\n        selected: classes.selected,\n        group: classes.group,\n        label: classes.label,\n            }}\n                {...other}\n            />\n        );\n    }\n}\nexport default withStyles(useTreeItemStyles)(StyledTreeItem);\n\n","/var/www/testing/GC_Mouse_Integration/src/Genome/Components/GenomeBrowser.js",["122"],{"ruleId":"123","replacedBy":"124"},{"ruleId":"125","replacedBy":"126"},{"ruleId":"123","replacedBy":"124"},{"ruleId":"125","replacedBy":"126"},{"ruleId":"127","severity":1,"message":"128","line":8,"column":9,"nodeType":"129","messageId":"130","endLine":8,"endColumn":24},{"ruleId":"127","severity":1,"message":"131","line":8,"column":26,"nodeType":"129","messageId":"130","endLine":8,"endColumn":39},{"ruleId":"132","severity":1,"message":"133","line":55,"column":77,"nodeType":"134","endLine":57,"endColumn":78},{"ruleId":"132","severity":1,"message":"133","line":68,"column":75,"nodeType":"134","endLine":69,"endColumn":107},{"ruleId":"132","severity":1,"message":"133","line":79,"column":75,"nodeType":"134","endLine":80,"endColumn":107},{"ruleId":"132","severity":1,"message":"133","line":90,"column":75,"nodeType":"134","endLine":91,"endColumn":107},{"ruleId":"132","severity":1,"message":"133","line":101,"column":75,"nodeType":"134","endLine":102,"endColumn":107},{"ruleId":"132","severity":1,"message":"133","line":112,"column":75,"nodeType":"134","endLine":114,"endColumn":78},{"ruleId":"132","severity":1,"message":"133","line":124,"column":75,"nodeType":"134","endLine":126,"endColumn":78},{"ruleId":"135","severity":1,"message":"136","line":300,"column":57,"nodeType":"137","messageId":"138","endLine":300,"endColumn":90},{"ruleId":"139","severity":1,"message":"140","line":313,"column":38,"nodeType":"129","messageId":"141","endLine":313,"endColumn":39},{"ruleId":"135","severity":1,"message":"142","line":321,"column":57,"nodeType":"137","messageId":"138","endLine":321,"endColumn":90},{"ruleId":"127","severity":1,"message":"143","line":501,"column":13,"nodeType":"129","messageId":"130","endLine":501,"endColumn":19},{"ruleId":"127","severity":1,"message":"143","line":516,"column":13,"nodeType":"129","messageId":"130","endLine":516,"endColumn":19},{"ruleId":"127","severity":1,"message":"144","line":1,"column":16,"nodeType":"129","messageId":"130","endLine":1,"endColumn":27},{"ruleId":"127","severity":1,"message":"144","line":1,"column":16,"nodeType":"129","messageId":"130","endLine":1,"endColumn":27},{"ruleId":"127","severity":1,"message":"145","line":111,"column":13,"nodeType":"129","messageId":"130","endLine":111,"endColumn":22},{"ruleId":"139","severity":1,"message":"140","line":171,"column":38,"nodeType":"129","messageId":"141","endLine":171,"endColumn":39},{"ruleId":"139","severity":1,"message":"140","line":192,"column":38,"nodeType":"129","messageId":"141","endLine":192,"endColumn":39},{"ruleId":"127","severity":1,"message":"146","line":1,"column":17,"nodeType":"129","messageId":"130","endLine":1,"endColumn":21},{"ruleId":"127","severity":1,"message":"147","line":1,"column":23,"nodeType":"129","messageId":"130","endLine":1,"endColumn":28},{"ruleId":"127","severity":1,"message":"148","line":1,"column":30,"nodeType":"129","messageId":"130","endLine":1,"endColumn":37},{"ruleId":"149","severity":1,"message":"150","line":75,"column":14,"nodeType":"134","endLine":75,"endColumn":65},{"ruleId":"149","severity":1,"message":"150","line":78,"column":14,"nodeType":"134","endLine":78,"endColumn":135},{"ruleId":"127","severity":1,"message":"151","line":111,"column":13,"nodeType":"129","messageId":"130","endLine":111,"endColumn":20},{"ruleId":"127","severity":1,"message":"144","line":1,"column":16,"nodeType":"129","messageId":"130","endLine":1,"endColumn":27},{"ruleId":"127","severity":1,"message":"152","line":3,"column":8,"nodeType":"129","messageId":"130","endLine":3,"endColumn":9},{"ruleId":"153","severity":1,"message":"154","line":161,"column":99,"nodeType":"137","messageId":"155","endLine":161,"endColumn":101},{"ruleId":"153","severity":1,"message":"154","line":186,"column":81,"nodeType":"137","messageId":"155","endLine":186,"endColumn":83},{"ruleId":"153","severity":1,"message":"154","line":199,"column":81,"nodeType":"137","messageId":"155","endLine":199,"endColumn":83},{"ruleId":"127","severity":1,"message":"144","line":1,"column":16,"nodeType":"129","messageId":"130","endLine":1,"endColumn":27},{"ruleId":"127","severity":1,"message":"156","line":47,"column":16,"nodeType":"129","messageId":"130","endLine":47,"endColumn":24},{"ruleId":"127","severity":1,"message":"157","line":5,"column":8,"nodeType":"129","messageId":"130","endLine":5,"endColumn":18},{"ruleId":"127","severity":1,"message":"158","line":2,"column":13,"nodeType":"129","messageId":"130","endLine":2,"endColumn":15},"no-native-reassign",["159"],"no-negated-in-lhs",["160"],"no-unused-vars","'TransitionGroup' is defined but never used.","Identifier","unusedVar","'CSSTransition' is defined but never used.","jsx-a11y/anchor-has-content","Anchors must have content and the content must be accessible by a screen reader.","JSXOpeningElement","no-loop-func","Function declared in a loop contains unsafe references to variable(s) 'expandedMouseNodes'.","ArrowFunctionExpression","unsafeRefs","no-redeclare","'i' is already defined.","redeclared","Function declared in a loop contains unsafe references to variable(s) 'expandedHumanNodes'.","'nodeID' is assigned a value but never used.","'useCallback' is defined but never used.","'selection' is assigned a value but never used.","'Icon' is defined but never used.","'Paper' is defined but never used.","'SvgIcon' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","'loading' is assigned a value but never used.","'$' is defined but never used.","array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","expectedAtEnd","'isZoomed' is assigned a value but never used.","'SearchIcon' is defined but never used.","'qs' is defined but never used.","no-global-assign","no-unsafe-negation"]