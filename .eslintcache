[{"C:\\Users\\Thomas\\Github Repos\\GC_Mouse_Integration\\src\\index.tsx":"1","C:\\Users\\Thomas\\Github Repos\\GC_Mouse_Integration\\src\\UtilityComponents\\ErrorBoundary.js":"2","C:\\Users\\Thomas\\Github Repos\\GC_Mouse_Integration\\src\\reportWebVitals.ts":"3","C:\\Users\\Thomas\\Github Repos\\GC_Mouse_Integration\\src\\Home\\App.tsx":"4","C:\\Users\\Thomas\\Github Repos\\GC_Mouse_Integration\\src\\Home\\Home.js":"5","C:\\Users\\Thomas\\Github Repos\\GC_Mouse_Integration\\src\\PhenotypeSearch\\PhenotypeSearch.js":"6","C:\\Users\\Thomas\\Github Repos\\GC_Mouse_Integration\\src\\Genome\\Genome.js":"7","C:\\Users\\Thomas\\Github Repos\\GC_Mouse_Integration\\src\\OntologyHierarchy\\OntologyHierarchy.js":"8","C:\\Users\\Thomas\\Github Repos\\GC_Mouse_Integration\\src\\Home\\Components\\MainMenuItem.js":"9","C:\\Users\\Thomas\\Github Repos\\GC_Mouse_Integration\\src\\UtilityComponents\\ConfigData.js":"10","C:\\Users\\Thomas\\Github Repos\\GC_Mouse_Integration\\src\\UtilityComponents\\ResultTable.js":"11","C:\\Users\\Thomas\\Github Repos\\GC_Mouse_Integration\\src\\UtilityComponents\\LoadingSpinner\\LoadingSpinner.js":"12","C:\\Users\\Thomas\\Github Repos\\GC_Mouse_Integration\\src\\PhenotypeSearch\\Components\\PhenotypeResultBreakdown.js":"13","C:\\Users\\Thomas\\Github Repos\\GC_Mouse_Integration\\src\\Genome\\Components\\assembly.js":"14","C:\\Users\\Thomas\\Github Repos\\GC_Mouse_Integration\\src\\OntologyHierarchy\\Components\\OntologyTree\\OntologyTree.js":"15","C:\\Users\\Thomas\\Github Repos\\GC_Mouse_Integration\\src\\UtilityComponents\\TabPanel.js":"16","C:\\Users\\Thomas\\Github Repos\\GC_Mouse_Integration\\src\\OntologyHierarchy\\Components\\OntologyTree\\Components\\StyledTreeItem.js":"17"},{"size":739,"mtime":1615395058086,"results":"18","hashOfConfig":"19"},{"size":1016,"mtime":1614615374946,"results":"20","hashOfConfig":"19"},{"size":440,"mtime":1612365407714,"results":"21","hashOfConfig":"19"},{"size":1209,"mtime":1615576633103,"results":"22","hashOfConfig":"19"},{"size":2514,"mtime":1621195501249,"results":"23","hashOfConfig":"19"},{"size":12768,"mtime":1621097742053,"results":"24","hashOfConfig":"19"},{"size":3173,"mtime":1620657005263,"results":"25","hashOfConfig":"19"},{"size":31818,"mtime":1621023502510,"results":"26","hashOfConfig":"19"},{"size":1887,"mtime":1621196178624,"results":"27","hashOfConfig":"19"},{"size":93,"mtime":1621098740567,"results":"28","hashOfConfig":"19"},{"size":4428,"mtime":1621097698324,"results":"29","hashOfConfig":"19"},{"size":1288,"mtime":1612565100863,"results":"30","hashOfConfig":"19"},{"size":18066,"mtime":1621097857558,"results":"31","hashOfConfig":"19"},{"size":576,"mtime":1620239555393,"results":"32","hashOfConfig":"19"},{"size":4476,"mtime":1621006539735,"results":"33","hashOfConfig":"19"},{"size":843,"mtime":1617037919169,"results":"34","hashOfConfig":"19"},{"size":2917,"mtime":1617134905785,"results":"35","hashOfConfig":"19"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},"3xmwnr",{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"38"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"41"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"41"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"41"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"41"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"41"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"41"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"41"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78","usedDeprecatedRules":"41"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"41"},"C:\\Users\\Thomas\\Github Repos\\GC_Mouse_Integration\\src\\index.tsx",[],["82","83"],"C:\\Users\\Thomas\\Github Repos\\GC_Mouse_Integration\\src\\UtilityComponents\\ErrorBoundary.js",[],["84","85"],"C:\\Users\\Thomas\\Github Repos\\GC_Mouse_Integration\\src\\reportWebVitals.ts",[],"C:\\Users\\Thomas\\Github Repos\\GC_Mouse_Integration\\src\\Home\\App.tsx",["86","87"],"import React from 'react';\r\nimport './App.css';\r\n// @ts-ignore\r\nimport Home from \"./Home.js\";\r\n// @ts-ignore\r\nimport {TransitionGroup, CSSTransition} from \"react-transition-group\";\r\n// @ts-ignore\r\nimport {HashRouter, Route, Switch} from \"react-router-dom\";\r\nimport PhenotypeSearch from \"../PhenotypeSearch/PhenotypeSearch\";\r\nimport OntologyHierarchy from \"../OntologyHierarchy/OntologyHierarchy\";\r\nimport Genome from \"../Genome/Genome\";\r\n\r\nfunction App() {\r\n    return (<div className=\"App\">\r\n            <header className=\"App-header\">\r\n            </header>\r\n            <HashRouter>\r\n                <Switch>\r\n                    <Route exact path=\"/\">\r\n                        <Home/>\r\n                    </Route>\r\n                    <Route exact path=\"/PhenotypeSearch\">\r\n                        <PhenotypeSearch/>\r\n                    </Route>\r\n                    <Route exact path=\"/OntologyHierarchy\">\r\n                        <OntologyHierarchy/>\r\n                    </Route>\r\n                    <Route exact path=\"/Genome\">\r\n                        <Genome/>\r\n                    </Route>\r\n                </Switch>\r\n            </HashRouter>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","C:\\Users\\Thomas\\Github Repos\\GC_Mouse_Integration\\src\\Home\\Home.js",[],"C:\\Users\\Thomas\\Github Repos\\GC_Mouse_Integration\\src\\PhenotypeSearch\\PhenotypeSearch.js",[],"C:\\Users\\Thomas\\Github Repos\\GC_Mouse_Integration\\src\\Genome\\Genome.js",["88"],"import React from \"react\";\r\nimport {withStyles} from \"@material-ui/core\";\r\nimport {\r\n    createViewState,\r\n    createJBrowseTheme,\r\n    JBrowseLinearGenomeView,\r\n    ThemeProvider,\r\n} from '@jbrowse/react-linear-genome-view';\r\nimport assembly from './Components/assembly';\r\n\r\nconst theme = createJBrowseTheme();\r\n\r\nconst useStyles = theme => ({\r\n    formControl: {\r\n        margin: theme.spacing(1),\r\n        minWidth: 120,\r\n    },\r\n    selectEmpty: {\r\n        marginTop: theme.spacing(2),\r\n    },\r\n    autoComplete: {\r\n        width: \"50%\",\r\n        marginLeft: \"auto\",\r\n        marginRight: \"auto\",\r\n    },\r\n    radio: {\r\n        width: \"50%\",\r\n        marginLeft: \"auto\",\r\n        marginRight: \"auto\"\r\n    },\r\n});\r\n\r\nconst tracks = [\r\n    {\r\n        type: 'FeatureTrack',\r\n        trackId: 'gc_variants_hg38',\r\n        name: 'Human Variants',\r\n        assemblyNames: ['GRCh38'],\r\n        category: ['Annotation'],\r\n        adapter: {\r\n            type: 'Gff3TabixAdapter',\r\n            gffGzLocation: {\r\n                uri:\r\n                    'JBrowseData/tracks/tracks.conf',\r\n            },\r\n            index: {\r\n                location: {\r\n                    uri:\r\n                        '',\r\n                },\r\n            },\r\n        },\r\n    },\r\n]\r\n\r\nconst defaultSession = {\r\n    name: 'My session',\r\n    view: {\r\n        id: 'linearGenomeView',\r\n        type: 'LinearGenomeView',\r\n        tracks: [\r\n            {\r\n                type: 'ReferenceSequenceTrack',\r\n                configuration: 'GRCh38-ReferenceSequenceTrack',\r\n                displays: [\r\n                    {\r\n                        type: 'LinearReferenceSequenceDisplay',\r\n                        configuration:\r\n                            'GRCh38-ReferenceSequenceTrack-LinearReferenceSequenceDisplay',\r\n                    },\r\n                ],\r\n            },\r\n            {\r\n                type: 'FeatureTrack',\r\n                configuration: 'ncbi_refseq_109_hg38',\r\n                displays: [\r\n                    {\r\n                        type: 'LinearBasicDisplay',\r\n                        configuration: 'ncbi_refseq_109_hg38-LinearBasicDisplay',\r\n                    },\r\n                ],\r\n            },\r\n        ],\r\n    },\r\n}\r\n\r\n\r\nclass Genome extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            loading: false,\r\n        };\r\n\r\n    }\r\n\r\n    static get theme() {\r\n        return theme;\r\n    }\r\n\r\n    static get defaultSession() {\r\n        return defaultSession;\r\n    }\r\n\r\n    static get tracks() {\r\n        return tracks;\r\n    }\r\n\r\n    static get assembly() {\r\n        return assembly;\r\n    }\r\n\r\n    render() {\r\n        const tracks = Genome.tracks;\r\n        const defaultSession = Genome.defaultSession;\r\n        const viewState = createViewState({assembly, location: '10:29,838,737..29,838,819', defaultSession,});\r\n        return (\r\n            <div>\r\n                <ThemeProvider theme={Genome.theme}>\r\n                    <JBrowseLinearGenomeView viewState={viewState}/>\r\n                </ThemeProvider>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withStyles(useStyles)(Genome);","C:\\Users\\Thomas\\Github Repos\\GC_Mouse_Integration\\src\\OntologyHierarchy\\OntologyHierarchy.js",["89","90","91","92","93"],"import React from 'react';\r\nimport $ from 'jquery';\r\nimport axios from \"axios\";\r\nimport {Button, Grid, InputLabel, MenuItem, Paper, Select, TextField, withStyles} from '@material-ui/core';\r\nimport LoadingSpinner from \"../UtilityComponents/LoadingSpinner/LoadingSpinner\";\r\nimport './OntologyHierarchy.css';\r\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\r\nimport ErrorBoundary from \"../UtilityComponents/ErrorBoundary\";\r\nimport OntologyTree from \"./Components/OntologyTree/OntologyTree\";\r\nimport _ from \"lodash\";\r\nimport PhenotypeResultBreakdown from \"../PhenotypeSearch/Components/PhenotypeResultBreakdown\";\r\nimport api_server from \"../UtilityComponents/ConfigData\";\r\n\r\nconst useStyles = theme => ({\r\n    formControl: {\r\n        margin: theme.spacing(1),\r\n        minWidth: 120,\r\n    },\r\n    selectEmpty: {\r\n        marginTop: theme.spacing(2),\r\n    },\r\n    autoComplete: {\r\n        width: \"75%\",\r\n        marginLeft: \"auto\",\r\n        marginRight: \"auto\",\r\n        paddingBottom: 5,\r\n    },\r\n    paper: {\r\n        padding: theme.spacing(1),\r\n        textAlign: 'center',\r\n        color: theme.palette.text.secondary,\r\n    },\r\n});\r\n\r\nclass OntologyHierarchy extends React.Component {\r\n\r\n    function\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            loading: true,\r\n            treeData: null,\r\n            expandedMouseNodes: [''],\r\n            expandedHumanNodes: [''],\r\n            selectedMouseNodes: [''],\r\n            selectedHumanNodes: [''],\r\n            selectedSpecies: \"Mouse\",\r\n            isMappingPresent: false,\r\n            conErrorStatus: false,\r\n            configData: api_server,\r\n            searchInput: \"\",\r\n            humanLiveSearchResults: [],\r\n            mouseLiveSearchResults: [],\r\n            humanOntology: \"HPO\",\r\n        };\r\n        this.tempExpandedmouseIds = [];\r\n        this.tempExpandedhumanIds = [];\r\n        this.liveCancelToken = null;\r\n        this.mouseLiveLoading = false;\r\n        this.humanLiveLoading = false;\r\n        this.searchInput = \"\";\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.getRootTrees(this.state.humanOntology);\r\n    }\r\n\r\n    retrieveLiveSearch = (e, x) => {\r\n        let input = x;\r\n        let ontology = e.target.id === \"mouseSearchInput\" ? \"MP\" : this.state.humanOntology;\r\n        if (this.liveCancelToken)\r\n            this.liveCancelToken.cancel();\r\n        if (input.length < 1) {\r\n            $(\"#live-search\").hide();\r\n            if (ontology === \"MP\") {\r\n                this.mouseLiveLoading = false;\r\n                this.setState({mouseLiveSearchResults: []});\r\n            } else {\r\n                this.humanLiveLoading = false;\r\n                this.setState({humanLiveSearchResults: []});\r\n            }\r\n            return;\r\n        }\r\n        if (ontology === \"MP\")\r\n            this.mouseLiveLoading = true;\r\n        else\r\n            this.humanLiveLoading = true;\r\n        this.searchInput = input;\r\n        this.liveCancelToken = axios.CancelToken.source();\r\n        let url_string = this.state.configData.api_server + \"livesearch.php?entry=\" + encodeURIComponent(input) + \"&ontology=\" + ontology;\r\n\r\n        if (input.length > 0) {\r\n            axios.get(url_string, {cancelToken: this.liveCancelToken.token})\r\n                .then((response) => {\r\n                    if (response.status === 200) {\r\n                        if (response.data.length === 0) {\r\n                            if (ontology === \"MP\") {\r\n                                this.mouseLiveLoading = false;\r\n                                this.setState({mouseLiveSearchResults: []});\r\n                            } else {\r\n                                this.humanLiveLoading = false;\r\n                                this.setState({humanLiveSearchResults: []});\r\n                            }\r\n                        } else {\r\n                            if (ontology === \"MP\") {\r\n                                this.mouseLiveLoading = false;\r\n                                this.setState({mouseLiveSearchResults: response.data});\r\n                            } else {\r\n                                this.humanLiveLoading = false;\r\n                                this.setState({humanLiveSearchResults: response.data});\r\n                            }\r\n                        }\r\n                    }\r\n                })\r\n                .catch((error) => {\r\n                    if (!axios.isCancel(error)) {\r\n                        console.log(\"An error occurred retrieving live search results.\");\r\n                    } else {\r\n                        if (ontology === \"MP\") {\r\n                            this.mouseLiveSearchResults = [];\r\n                            this.mouseLiveLoading = false;\r\n                        } else {\r\n                            this.humanLiveSearchResults = [];\r\n                            this.humanLiveLoading = false;\r\n                        }\r\n                    }\r\n\r\n\r\n                });\r\n        }\r\n    }\r\n\r\n    appendSearchResult = (objValue, srcValue) => {\r\n        if (_.isArray(objValue)) {\r\n            for (var i = 0; i < objValue.length; i++) {\r\n                if (objValue[i].FSN === srcValue[0].FSN) {\r\n                    objValue[i] = _.merge(objValue[i], srcValue[0]);\r\n                    return objValue;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    isNodeDuplicate = (source, newItem) => {\r\n        for (var i = 0; i < source.length; i++) {\r\n            if (source[i].id === newItem.id) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    findPath = (a, obj) => {\r\n        for (var key in obj) {                                         // for each key in the object obj\r\n            if (obj.hasOwnProperty(key)) {                             // if it's an owned key\r\n                if (a === obj[key]) return key;                        // if the item beign searched is at this key then return this key as the path\r\n                else if (obj[key] && typeof obj[key] === \"object\") {   // otherwise if the item at this key is also an object\r\n                    var path = this.findPath(a, obj[key]);                 // search for the item a in that object\r\n                    if (path) return key + \".\" + path;                 // if found then the path is this key followed by the result of the search\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    getAllPaths = (obj, key, prev = '') => {\r\n        const result = [];\r\n\r\n        for (let k in obj) {\r\n            let path = prev + (prev ? '.' : '') + k;\r\n\r\n            if (obj[k] === key) {\r\n                result.push(path);\r\n            } else if (typeof obj[k] == 'object') {\r\n                result.push(...this.getAllPaths(obj[k], key, path));\r\n            }\r\n        }\r\n\r\n        return result\r\n    }\r\n\r\n    pathToIdArray = (path, tree) => {\r\n        var result = [];\r\n        for (var i = 2; i < path.length; i += 2) {\r\n            result.push(tree.children[path[i]].id);\r\n            tree = tree.children[path[i]];\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Simple object check.\r\n     * @param item\r\n     * @returns {boolean}\r\n     */\r\n    isObject = (item) => {\r\n        return (item && typeof item === 'object' && !Array.isArray(item));\r\n    }\r\n\r\n    /**\r\n     * Deep merge two objects.\r\n     * @param target\r\n     * @param ...sources\r\n     */\r\n    mergeDeep = (target, ...sources) => {\r\n        if (!sources.length) return target;\r\n        const source = sources.shift();\r\n\r\n        if (this.isObject(target) && this.isObject(source)) {\r\n            for (const key in source) {\r\n                if (this.isObject(source[key])) {\r\n                    if (!target[key]) Object.assign(target, {[key]: {}});\r\n                    this.mergeDeep(target[key], source[key]);\r\n                } else {\r\n                    Object.assign(target, {[key]: source[key]});\r\n                }\r\n            }\r\n        }\r\n        return this.mergeDeep(target, ...sources);\r\n    }\r\n\r\n    objectToPaths = (data, target) => {\r\n        var result = [];\r\n        var matched_paths = [];\r\n        doIt(data, \"\");\r\n        return matched_paths;\r\n\r\n        function doIt(data, s) {\r\n            if (data && typeof data === \"object\") {\r\n                if (Array.isArray(data)) {\r\n                    for (var i = 0; i < data.length; i++) {\r\n                        if (data[i] === target) {\r\n                            matched_paths.push(s + \".\" + i);\r\n                        }\r\n                        doIt(data[i], s + \".\" + i);\r\n                    }\r\n                } else {\r\n                    for (var p in data) {\r\n                        if (data[p] === target) {\r\n                            matched_paths.push(s + \".\" + p);\r\n                        }\r\n                        doIt(data[p], s + \".\" + p);\r\n                    }\r\n                }\r\n            } else {\r\n                result.push(s);\r\n            }\r\n        }\r\n    }\r\n\r\n    convertNodesToNodeIDs = (nodeList, isHuman = false) => {\r\n        let tempFilteredNodes = [];\r\n        let tree = isHuman ? \"humanTree\" : \"mouseTree\";\r\n        for (var i = 0; i < nodeList.length; i++) {\r\n            var nodeID = tree;\r\n            if (i !== 0)\r\n                for (var l = 0; l <= i; l++) {\r\n                    nodeID += \"-\" + nodeList[l];\r\n                }\r\n            else\r\n                nodeID += \"-\" + nodeList[0];\r\n            tempFilteredNodes.push(nodeID);\r\n        }\r\n        return tempFilteredNodes;\r\n    }\r\n\r\n    search = (searchInput, ontology) => {\r\n        this.setState({loading: true, isMappingPresent: false});\r\n        if (searchInput === undefined || searchInput === \"\") {\r\n            this.getRootTrees(this.state.humanOntology);\r\n            return;\r\n        }\r\n        let humanOnt = this.state.humanOntology;\r\n        let mouseOnt = \"MP\";\r\n        let searchOnt = ontology;\r\n        let url_string = this.state.configData.api_server + \"controller.php?type=ontology&search&term=\" + searchInput + \"&humanOntology=\" + humanOnt + \"&mouseOntology=\" + mouseOnt + \"&searchOntology=\" + searchOnt;\r\n        axios.get(url_string)\r\n            .then((response) => {\r\n                if (response.status === 200) {\r\n                    if (response.data) {\r\n                        let tree = this.state.treeData;\r\n                        let expandedMouseNodes = [];\r\n                        let expandedHumanNodes = [];\r\n                        tree[\"humanID\"] = response.data.humanID;\r\n                        tree[\"mouseID\"] = response.data.mouseID;\r\n                        tree[\"isExactMatch\"] = response.data.isExactMatch;\r\n                        tree[\"mouseTree\"] = response.data.mouseTree;\r\n                        tree[\"humanTree\"] = response.data.humanTree;\r\n                        let mousePaths = this.objectToPaths(tree[\"mouseTree\"], tree[\"mouseID\"]);\r\n                        if (mousePaths.length > 1) {\r\n                            for (var i = 0; i < mousePaths.length; i++) {\r\n                                let mousePath = mousePaths[i];\r\n                                let tempPathIdArray = this.pathToIdArray(mousePath.split(\".\"), tree[\"mouseTree\"]);\r\n                                tempPathIdArray.unshift(\"MP:0000001\");\r\n                                tempPathIdArray = this.convertNodesToNodeIDs(tempPathIdArray, false);\r\n                                tempPathIdArray.forEach(id => expandedMouseNodes.push(id));\r\n                            }\r\n                            // mousePaths.forEach(mousePath => this.pathToIdArray(mousePath.split(\".\"), tree[\"mouseTree\"]).forEach(id => expandedMouseNodes.push(id)));\r\n                        } else {\r\n                            expandedMouseNodes = this.pathToIdArray(mousePaths[0].split(\".\"), tree[\"mouseTree\"]);\r\n                            expandedMouseNodes.unshift(\"MP:0000001\");\r\n                            expandedMouseNodes = this.convertNodesToNodeIDs(expandedMouseNodes, false);\r\n                        }\r\n                        var selectedMouseNodes = expandedMouseNodes.filter(term => term.endsWith(tree[\"mouseID\"]));\r\n                        expandedMouseNodes = expandedMouseNodes.filter(node => node.endsWith(tree[\"mouseID\"]) === false);\r\n\r\n                        let humanPaths = this.objectToPaths(tree[\"humanTree\"], tree[\"humanID\"]);\r\n                        if (humanPaths.length > 1) {\r\n                            for (var i = 0; i < humanPaths.length; i++) {\r\n                                let humanPath = humanPaths[i];\r\n                                let tempPathIdArray = this.pathToIdArray(humanPath.split(\".\"), tree[\"humanTree\"]);\r\n                                if (humanOnt === \"MESH\")\r\n                                    tempPathIdArray.unshift(\"mesh\");\r\n                                else\r\n                                    tempPathIdArray.unshift(\"HP:0000001\");\r\n                                tempPathIdArray = this.convertNodesToNodeIDs(tempPathIdArray, true);\r\n                                tempPathIdArray.forEach(id => expandedHumanNodes.push(id));\r\n                            }\r\n                            // mousePaths.forEach(mousePath => this.pathToIdArray(mousePath.split(\".\"), tree[\"mouseTree\"]).forEach(id => expandedMouseNodes.push(id)));\r\n                        } else {\r\n                            expandedHumanNodes = this.pathToIdArray(humanPaths[0].split(\".\"), tree[\"humanTree\"]);\r\n                            if (humanOnt === \"MESH\")\r\n                                expandedHumanNodes.unshift(\"mesh\");\r\n                            else\r\n                                expandedHumanNodes.unshift(\"HP:0000001\");\r\n                            expandedHumanNodes = this.convertNodesToNodeIDs(expandedHumanNodes, true);\r\n                        }\r\n\r\n                        var selectedHumanNodes = expandedHumanNodes.filter(term => term.endsWith(tree[\"humanID\"]));\r\n                        expandedHumanNodes = expandedHumanNodes.filter(node => node.endsWith(tree[\"humanID\"]) === false);\r\n\r\n\r\n                        this.setState({\r\n                            treeData: tree,\r\n                            loading: false,\r\n                            isMappingPresent: true,\r\n                            expandedMouseNodes: expandedMouseNodes,\r\n                            selectedMouseNodes: selectedMouseNodes,\r\n                            expandedHumanNodes: expandedHumanNodes,\r\n                            selectedHumanNodes: selectedHumanNodes,\r\n                            mappedMousePhenotype: response.data.mouseID,\r\n                            mappedHumanPhenotype: response.data.humanID,\r\n                            humanSearchFailed: false,\r\n                            mouseSearchFailed: false\r\n                        }, () => this.scrollTrees());\r\n                    } else {\r\n                        this.setState({\r\n                            loading: false,\r\n                            isMappingPresent: false,\r\n                            humanSearchFailed: searchOnt !== \"MP\",\r\n                            mouseSearchFailed: searchOnt === \"MP\"\r\n                        });\r\n                    }\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                this.setState({loading: false, searchOpen: true});\r\n                console.log(\"An error occurred searching for ontology mappings.\");\r\n            });\r\n    }\r\n\r\n    updateTree = (id, children) => obj => {\r\n        if (obj.id === id) {\r\n            obj.children = children;\r\n        } else if (!_.isEmpty(obj.children))\r\n            return obj.children.some(this.updateTree(id, children));\r\n    }\r\n\r\n    getRootTrees = (ontology = null) => {\r\n        this.setState({loading: true});\r\n        let ont = ontology ? ontology : \"HPO\";\r\n        let url_string = this.state.configData.api_server + \"controller.php?type=ontology&getRoots&ontology=\" + ont;\r\n        axios.get(url_string)\r\n            .then((response) => {\r\n                if (response.status === 200) {\r\n                    if (response.data) {\r\n                        let expandedMouseNodes = [\"mouseTree-\" + response.data.mouseID];\r\n                        let expandedHumanNodes = [\"humanTree-\" + response.data.humanID];\r\n                        this.setState({\r\n                            treeData: response.data,\r\n                            loading: false,\r\n                            expandedMouseNodes: expandedMouseNodes,\r\n                            expandedHumanNodes: expandedHumanNodes,\r\n                        });\r\n                    } else {\r\n\r\n                    }\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                console.log(\"An error occurred retrieving root tree data.\");\r\n                this.setState({conErrorStatus: true, loading: false});\r\n            });\r\n    }\r\n\r\n    getRootTree = (ontology, species) => {\r\n        this.setState({loading: true});\r\n        let mappingOnt = ontology === \"MP\" ? this.state.humanOntology : \"MP\";\r\n        let url_string = this.state.configData.api_server + \"controller.php?type=ontology&getRoot&ontology=\" + ontology + \"&mappingOnt=\" + mappingOnt;\r\n        axios.get(url_string)\r\n            .then((response) => {\r\n                if (response.status === 200) {\r\n                    if (response.data) {\r\n                        if (species === \"human\") {\r\n                            let expandedHumanNodes = [\"humanTree-term-1\"];\r\n                            let tree = this.state.treeData;\r\n                            tree[\"humanTree\"] = response.data.tree;\r\n                            this.setState({treeData: tree, loading: false, expandedHumanNodes: expandedHumanNodes});\r\n                        } else {\r\n                            let expandedMouseNodes = [\"mouseTree-term-1\"];\r\n                            let tree = this.state.treeData;\r\n                            tree[\"mouseTree\"] = response.data.tree;\r\n                            this.setState({treeData: tree, loading: false, expandedMouseNodes: expandedMouseNodes});\r\n                        }\r\n                    }\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                console.log(\"An error occurred retrieving root tree data.\");\r\n                this.setState({conErrorStatus: true, loading: false});\r\n            });\r\n    }\r\n\r\n    getTermChildren = (e, tree, ont) => {\r\n        let url_string = this.state.configData.api_server + \"/controller.php?type=ontology&childSearch&term=\" + e + \"&ontology=\" + ont + \"&mappingOntology=\" + this.state.humanOntology;\r\n        axios.get(url_string)\r\n            .then((response) => {\r\n                if (response.status === 200) {\r\n                    if (response.data) {\r\n                        if (tree === \"mouse\") {\r\n                            let tree = this.state.treeData;\r\n                            [tree[\"mouseTree\"]].forEach(this.updateTree(e, response.data));\r\n                            this.setState({treeData: tree});\r\n                        } else {\r\n                            let tree = this.state.treeData;\r\n                            [tree[\"humanTree\"]].forEach(this.updateTree(e, response.data));\r\n                            this.setState({treeData: tree});\r\n                        }\r\n\r\n                    }\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                this.setState({loading: false, searchOpen: true, tableData: null});\r\n                console.log(\"An error occurred searching for ontology mappings.\");\r\n            });\r\n    }\r\n\r\n    termSearchBtnClick = (term) => {\r\n        this.setState({searchInput: term});\r\n        this.search();\r\n    }\r\n\r\n    mouseSearchBtnClick = (e) => {\r\n        let input = typeof e === \"string\" ? e : document.getElementById(\"mouseSearchInput\").value;\r\n        this.search(input, \"MP\");\r\n    }\r\n\r\n    humanSearchBtnClick = (e) => {\r\n        let input = typeof e === \"string\" ? e : document.getElementById(\"humanSearchInput\").value;\r\n        this.search(input, this.state.humanOntology);\r\n    }\r\n\r\n    setexpandedMouseNodes = (nodes, ids) => {\r\n        if (Array.isArray(ids[0]))\r\n            ids = ids[0];\r\n        ids.push(nodes.id);\r\n        this.tempExpandedmouseIds = ids;\r\n        return Array.isArray(nodes.isa) ? nodes.isa.map((node) => this.setexpandedMouseNodes(node, ids)) : ids;\r\n    }\r\n    setexpandedHumanNodes = (nodes, ids) => {\r\n        if (Array.isArray(ids[0]))\r\n            ids = ids[0];\r\n        ids.push(nodes.id);\r\n        this.tempExpandedhumanIds = ids;\r\n        return Array.isArray(nodes.isa) ? nodes.isa.map((node) => this.setexpandedHumanNodes(node, ids)) : ids;\r\n    }\r\n\r\n    isLoadingRequired = (id, obj) => {\r\n        if (obj.id === id && _.isEmpty(obj.children)) {\r\n            return true;\r\n        } else if (!_.isEmpty(obj.children)) {\r\n            for (var i = 0; i < Object.keys(obj.children).length; i++) {\r\n                if (this.isLoadingRequired(id, obj.children[i]))\r\n                    return true;\r\n            }\r\n        }\r\n    }\r\n\r\n    handleMouseToggle = (event, nodeIds) => {\r\n        let tree = this.state.treeData.mouseTree;\r\n        let termID = event.currentTarget.parentNode.dataset[\"term\"];\r\n        let nodeID = event.currentTarget.parentNode.id;\r\n        var loadingRequired = this.isLoadingRequired(termID, tree);\r\n        if (loadingRequired) {\r\n            this.getTermChildren(termID, \"mouse\", \"mp\");\r\n        }\r\n        this.setState({expandedMouseNodes: nodeIds});\r\n    }\r\n\r\n    handleMouseSelect = (event, nodeIds) => {\r\n        this.setState({selectedMouseNodes: nodeIds});\r\n    }\r\n\r\n    handleHumanToggle = (event, nodeIds) => {\r\n        let tree = this.state.treeData.humanTree;\r\n        let termID = event.currentTarget.parentNode.dataset[\"term\"];\r\n        let nodeID = event.currentTarget.parentNode.id;\r\n        var loadingRequired = this.isLoadingRequired(termID, tree);\r\n        if (loadingRequired) {\r\n            this.getTermChildren(termID, \"human\", this.state.humanOntology);\r\n        }\r\n        this.setState({expandedHumanNodes: nodeIds});\r\n    }\r\n\r\n    handleHumanSelect = (event, nodeIds) => {\r\n        this.setState({selectedHumanNodes: nodeIds});\r\n    }\r\n\r\n    scrollTrees = () => {\r\n        if (this.state.mappedMousePhenotype && this.state.isMappingPresent) {\r\n            var obj = this;\r\n            window.setTimeout(function () {\r\n                let humanPhenotype = obj.state.mappedHumanPhenotype;\r\n                let mousePhenotype = obj.state.mappedMousePhenotype;\r\n                let mouseElement = document.getElementById($(\"#mouseTree li[data-term='\" + mousePhenotype + \"']\")[0].id);\r\n                let humanElement = document.getElementById($(\"#humanTree li[data-term='\" + humanPhenotype + \"']\")[0].id);\r\n                $(\"#humanTree\").scrollTop(0);\r\n                $(\"#mouseTree\").scrollTop(0);\r\n                $('#humanTree').animate({\r\n                    scrollTop: $(humanElement).offset().top - ($(\"#humanTree\").position().top + 90)\r\n                }, 1500);\r\n                $('#mouseTree').animate({\r\n                    scrollTop: $(mouseElement).offset().top - ($(\"#mouseTree\").position().top + 90)\r\n                }, 1500);\r\n                obj.setState({mappedMousePhenotype: null, mappedHumanPhenotype: null});\r\n            }, 500);\r\n\r\n        }\r\n\r\n    }\r\n\r\n    changeHumanOntology = (e) => {\r\n        this.setState({\r\n            humanOntology: e.target.value,\r\n            selectedHumanNodes: [''],\r\n            expandedHumanNodes: [''],\r\n            selectedMouseNodes: [''],\r\n            expandedMouseNodes: [''],\r\n            isMappingPresent: false,\r\n        });\r\n        this.getRootTrees(e.target.value);\r\n    }\r\n\r\n    render() {\r\n        const {classes} = this.props;\r\n        const {\r\n            loading,\r\n            treeData,\r\n            conErrorStatus,\r\n            selectedMouseNodes,\r\n            selectedHumanNodes,\r\n            expandedMouseNodes,\r\n            expandedHumanNodes,\r\n            mappedMousePhenotype,\r\n            mappedHumanPhenotype,\r\n        } = this.state;\r\n        const mouseTree = treeData ? treeData.mouseTree : null;\r\n        const humanTree = treeData ? treeData.humanTree : null;\r\n\r\n        if (conErrorStatus)\r\n            throw new Error(\"A connection error occurred retrieving ontology trees.\");\r\n\r\n        return <div>\r\n            <ErrorBoundary>\r\n                <Grid container spacing={2}>\r\n                    <Grid item xs>\r\n                        <Paper id=\"humanTreeWrapper\" className={classes.paper}>\r\n                            <InputLabel id=\"human-ont-input-label\">Human Ontology</InputLabel>\r\n                            <Select\r\n                                labelId=\"human-ont-input-label\"\r\n                                id=\"human-ont-input-select\"\r\n                                value={this.state.humanOntology}\r\n                                onChange={this.changeHumanOntology}\r\n                                label=\"Age\"\r\n                            >\r\n                                <MenuItem value={\"HPO\"}>Human Phenotype Ontology</MenuItem>\r\n                                <MenuItem value={\"MESH\"}>Medical Subject Headings</MenuItem>\r\n                            </Select>\r\n                            <br/><br/>\r\n                            <Autocomplete\r\n                                freeSolo\r\n                                id=\"humanSearchInput\"\r\n                                className={classes.autoComplete}\r\n                                onInputChange={this.retrieveLiveSearch}\r\n                                renderInput={(params) => (\r\n                                    <TextField\r\n                                        {...params}\r\n                                        label=\"Term search\"\r\n                                        variant=\"outlined\"\r\n                                        InputProps={{\r\n                                            ...params.InputProps,\r\n                                            endAdornment: (\r\n                                                <React.Fragment>\r\n                                                    {this.humanLiveLoading ?\r\n                                                        <CircularProgress color=\"inherit\" size={20}/> : null}\r\n                                                    {params.InputProps.endAdornment}\r\n                                                </React.Fragment>\r\n                                            ),\r\n                                        }}\r\n                                    />\r\n                                )}\r\n                                options={this.state.humanLiveSearchResults}\r\n                                getOptionLabel={(option) => option.FSN}\r\n                                renderOption={(option) => option.FSN + \" (\" + option.type + \")\"}/>\r\n                            <p>Search for terms with mappings to the MP ontology</p>\r\n                            <Button size=\"large\" color=\"primary\" variant=\"contained\" id=\"search_btn\"\r\n                                    onClick={this.humanSearchBtnClick}>Search</Button>\r\n                            {this.state.humanSearchFailed ? <p style={{color: \"red\"}}>No match found.</p> : null}\r\n                            {\r\n                                !humanTree ? null :\r\n                                    <OntologyTree treeID=\"humanTree\" selectedPhenotypeLabel={mappedHumanPhenotype}\r\n                                                  onBtnClick={this.humanSearchBtnClick} expanded={expandedHumanNodes}\r\n                                                  selected={selectedHumanNodes} onSelect={this.handleHumanSelect}\r\n                                                  onToggle={this.handleHumanToggle} treeData={humanTree}\r\n                                                  sourceOntology={this.state.humanOntology} mappingOntology=\"MP\"/>\r\n                            }\r\n\r\n                        </Paper>\r\n                    </Grid>\r\n                    <Grid item xs>\r\n                        {\r\n                            this.state.isMappingPresent ?\r\n                                <PhenotypeResultBreakdown mousePhenotype={this.state.treeData.mouseID}\r\n                                                          humanPhenotype={this.state.treeData.humanID}\r\n                                                          humanOntology={this.state.humanOntology}/>\r\n                                : null\r\n                        }\r\n                    </Grid>\r\n                    <Grid item xs>\r\n                        <Paper id=\"mouseTreeWrapper\" className={classes.paper}>\r\n                            <div className=\"ontologySearchWrapper\">\r\n                                <h3>Mammalian Phenotype</h3>\r\n                                <Autocomplete\r\n                                    freeSolo\r\n                                    className={classes.autoComplete}\r\n                                    id=\"mouseSearchInput\"\r\n                                    onInputChange={this.retrieveLiveSearch}\r\n                                    renderInput={(params) => (\r\n                                        <TextField\r\n                                            {...params}\r\n                                            label=\"Term search\"\r\n                                            variant=\"outlined\"\r\n                                            InputProps={{\r\n                                                ...params.InputProps,\r\n                                                endAdornment: (\r\n                                                    <React.Fragment>\r\n                                                        {this.mouseLiveLoading ?\r\n                                                            <CircularProgress color=\"inherit\" size={20}/> : null}\r\n                                                        {params.InputProps.endAdornment}\r\n                                                    </React.Fragment>\r\n                                                ),\r\n                                            }}\r\n                                        />\r\n                                    )}\r\n                                    options={this.state.mouseLiveSearchResults}\r\n                                    getOptionLabel={(option) => option.FSN}\r\n                                    renderOption={(option) => option.FSN + \" (\" + option.type + \")\"}/>\r\n                                <p>Search for MP terms which map to the selected human ontology.</p>\r\n                                <Button size=\"large\" color=\"primary\" variant=\"contained\" id=\"search_btn\"\r\n                                        onClick={this.mouseSearchBtnClick}>Search</Button>\r\n                                {this.state.mouseSearchFailed ? <p style={{color: \"red\"}}>No match found.</p> : null}\r\n                            </div>\r\n                            <LoadingSpinner loading={loading}/>\r\n                            {!mouseTree ? null :\r\n                                <OntologyTree treeID=\"mouseTree\" selectedPhenotypeLabel={mappedMousePhenotype}\r\n                                              onBtnClick={this.mouseSearchBtnClick} expanded={expandedMouseNodes}\r\n                                              selected={selectedMouseNodes} onSelect={this.handleMouseSelect}\r\n                                              onToggle={this.handleMouseToggle} treeData={mouseTree}\r\n                                              sourceOntology=\"MP\" mappingOntology=\"HPO\"/>}\r\n                        </Paper>\r\n                    </Grid>\r\n\r\n\r\n                </Grid>\r\n            </ErrorBoundary>\r\n\r\n        </div>\r\n    }\r\n}\r\n\r\nexport default withStyles(useStyles)(OntologyHierarchy);","C:\\Users\\Thomas\\Github Repos\\GC_Mouse_Integration\\src\\Home\\Components\\MainMenuItem.js",["94","95"],"C:\\Users\\Thomas\\Github Repos\\GC_Mouse_Integration\\src\\UtilityComponents\\ConfigData.js",[],"C:\\Users\\Thomas\\Github Repos\\GC_Mouse_Integration\\src\\UtilityComponents\\ResultTable.js",["96","97"],"import React, {useCallback} from 'react';\r\nimport './ResultTable.css';\r\nimport $ from 'jquery';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport {TablePagination} from \"@material-ui/core\";\r\n\r\nclass ResultTable extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {tableData: {}, onRowClick: null, rowsPerPage:5, page:0};\r\n    }\r\n\r\n    handleChangePage = (event, newPage) => {\r\n        this.setState({page: newPage});\r\n    }\r\n\r\n    handleChangeRowsPerPage = (event) => {\r\n        this.setState({rowsPerPage: parseInt(event.target.value, 10), page: 0});\r\n    }\r\n\r\n    render() {\r\n        if (typeof this.props.tableData != \"undefined\" && this.props.tableData !== null)\r\n            if (this.props.tableData.length > 0) {\r\n                return (<div className=\"container\">\r\n                        <TableContainer component={Paper} className=\"info\" id=\"searchResults\">\r\n                            <Table size=\"small\" aria-label=\"a dense table\">\r\n                                <TableHead>\r\n                                    <TableRow>\r\n                                        {Object.keys(this.props.tableData[0]).map((header, index) => {\r\n                                            return (<TableCell align=\"center\" key={index}>{header}</TableCell>)\r\n                                        })}\r\n                                    </TableRow>\r\n                                </TableHead>\r\n                                <TableBody>\r\n                                    {this.props.tableData.slice(this.state.page * this.state.rowsPerPage,\r\n                                        this.state.page * this.state.rowsPerPage + this.state.rowsPerPage).map((row, index) => {\r\n                                            if (this.props.isSearchResult)\r\n                                                return (\r\n                                                    <TableRow data-human-ont={row[\"Human Ontology\"]} data-human-term={row[\"ID\"]} data-mouse-term={row[\"MP ID\"]} key={index} onClick={this.props.onRowClick}>\r\n                                                        {Object.keys(row).map((key) => {\r\n                                                            return (<TableCell align=\"left\" data-human-ont={row[\"Human Ontology\"]} data-human-term={row[\"ID\"]} data-mouse-term={row[\"MP ID\"]}>{row[key]}</TableCell>)\r\n                                                        })}\r\n                                                    </TableRow>)\r\n                                            else\r\n                                                return (\r\n                                                    <TableRow data-study={row[\"ID\"]} key={index} onClick={this.props.onRowClick}>\r\n                                                        {Object.keys(row).map((key) => {\r\n                                                            return (<TableCell align=\"left\" data-study={row[\"ID\"]}>{row[key]}</TableCell>)\r\n                                                        })}\r\n                                                    </TableRow>\r\n                                                )\r\n                                    })}\r\n                                </TableBody>\r\n                            </Table>\r\n                        </TableContainer>\r\n                        <TablePagination\r\n                            rowsPerPageOptions={[5, 10, 25]}\r\n                            component=\"div\"\r\n                            count={this.props.tableData.length}\r\n                            rowsPerPage={this.state.rowsPerPage}\r\n                            page={this.state.page}\r\n                            onChangePage={this.handleChangePage}\r\n                            onChangeRowsPerPage={this.handleChangeRowsPerPage}\r\n                        />\r\n                    </div>\r\n                );\r\n            } else {\r\n                return (\r\n                    <span className=\"center\">No results found.</span>\r\n                );\r\n            }\r\n        else\r\n            return null;\r\n\r\n    }\r\n}\r\n\r\n\r\nexport default ResultTable;","C:\\Users\\Thomas\\Github Repos\\GC_Mouse_Integration\\src\\UtilityComponents\\LoadingSpinner\\LoadingSpinner.js",["98"],"import React, {useCallback} from 'react';\r\nimport './LoadingSpinner.css';\r\n\r\nclass LoadingSpinner extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {loading: false};\r\n    }\r\n\r\n    render() {\r\n        if (this.props.loading)\r\n            return (\r\n                <div className=\"loading-container\">\r\n                    <div className=\"loading\">\r\n                        <div className=\"loader\">\r\n                            <div></div>\r\n                            <div></div>\r\n                            <div></div>\r\n                            <div></div>\r\n                            <div></div>\r\n                            <div></div>\r\n                            <div></div>\r\n                            <div></div>\r\n                            <div></div>\r\n                            <div></div>\r\n                            <div></div>\r\n                            <div></div>\r\n                            <div></div>\r\n                            <div></div>\r\n                            <div></div>\r\n                        </div>\r\n                        <h4>Loading...</h4>\r\n                    </div>\r\n                </div>\r\n            );\r\n        else\r\n            return (null);\r\n    }\r\n}\r\n\r\nexport default LoadingSpinner;","C:\\Users\\Thomas\\Github Repos\\GC_Mouse_Integration\\src\\PhenotypeSearch\\Components\\PhenotypeResultBreakdown.js",["99","100","101"],"import React from \"react\";\r\nimport './PhenotypeResultBreakdown.css';\r\nimport ResultTable from \"../../UtilityComponents/ResultTable\";\r\nimport $ from \"jquery\";\r\nimport axios from \"axios\";\r\nimport LoadingSpinner from \"../../UtilityComponents/LoadingSpinner/LoadingSpinner\";\r\nimport {AppBar, Button, Grid, Paper, Tab, Tabs} from \"@material-ui/core\";\r\nimport TabPanel from \"../../UtilityComponents/TabPanel\";\r\nimport api_server from \"../../UtilityComponents/ConfigData\";\r\nimport {Graph} from \"react-d3-graph\";\r\nimport _ from \"lodash\";\r\n\r\nclass PhenotypeResultBreakdown extends React.Component {\r\n// the graph configuration, just override the ones you need\r\n    const\r\n    myConfig = {\r\n        nodeHighlightBehavior: true,\r\n        directed: false,\r\n        staticGraphWithDragAndDrop: true,\r\n        d3: {\r\n            alphaTarget: 0.05,\r\n            disableLinkForce: true\r\n        },\r\n        node: {\r\n            color: \"blue\",\r\n            size: 300,\r\n            highlightStrokeColor: \"black\",\r\n            labelProperty: \"name\",\r\n            labelPosition: \"bottom\",\r\n        },\r\n        link: {\r\n            highlightColor: \"lightblue\",\r\n            renderLabel: true,\r\n            labelProperty: \"linkType\",\r\n            strokeWidth: 3,\r\n            fontSize: 10\r\n        },\r\n    };\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.gwasStudyClicked = this.gwasStudyClicked.bind(this);\r\n        this.experimentClicked = this.experimentClicked.bind(this);\r\n        this.state = {\r\n            mousePhenotype: \"\",\r\n            humanPhenotype: \"\",\r\n            breakdownData: null,\r\n            backBtnClick: null,\r\n            loading: true,\r\n            tabValue: 0,\r\n            dataTabValue: 0,\r\n            configData: api_server,\r\n            mappingGraphData: null,\r\n            mappingGraphConfig: null,\r\n            humanOntology: \"\",\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.getBreakdownData();\r\n    }\r\n\r\n    gwasStudyClicked(row) {\r\n        let studyID = $(row.currentTarget).attr(\"data-study\");\r\n        var win = window.open(\"https://www.gwascentral.org/study/\" + studyID, \"_blank\");\r\n        if (win)\r\n            win.focus();\r\n    }\r\n\r\n    experimentClicked(row) {\r\n        let selection = $(row.target).attr(\"data-study\");\r\n    }\r\n\r\n    getBreakdownData() {\r\n        let url_string = this.state.configData.api_server + \"controller.php?type=study&phenotypeBreakdown=&mouseTerm=\" + this.props.mousePhenotype + \"&humanTerm=\" + this.props.humanPhenotype + \"&humanOntology=\" + this.props.humanOntology;\r\n        axios.get(url_string)\r\n            .then((response) => {\r\n                if (response.status === 200) {\r\n                    if (response.data) {\r\n                        // graph payload (with minimalist structure)\r\n                        let humanTermCoords = [50, 214];\r\n                        let mouseTermCoords = [750, 214];\r\n                        let data = {\r\n                            nodes: [\r\n                                {\r\n                                    id: response.data[\"Mappings\"][\"humanNodeId\"],\r\n                                    name: response.data[\"Mappings\"][\"humanLabel\"],\r\n                                    x: humanTermCoords[0],\r\n                                    y: humanTermCoords[1],\r\n                                    color: \"red\",\r\n                                    symbolType: \"square\"\r\n                                },\r\n                                {\r\n                                    id: response.data[\"Mappings\"][\"mouseNodeId\"],\r\n                                    name: response.data[\"Mappings\"][\"mouseLabel\"],\r\n                                    x: mouseTermCoords[0],\r\n                                    y: mouseTermCoords[1],\r\n                                    color: \"blue\",\r\n                                    symbolType: \"square\"\r\n                                }\r\n                            ],\r\n                            links: []\r\n                        };\r\n\r\n                        for (var i = 0; i < response.data[\"Mappings\"][\"mouseSynonyms\"].length; i++) {\r\n                            let mapping = response.data[\"Mappings\"][\"mouseSynonyms\"][i];\r\n                            let mouseNode = {\r\n                                id: mapping[\"synonymId\"],\r\n                                name: mapping[\"synonymLabel\"],\r\n                                x: mouseTermCoords[0] - 175,\r\n                                y: mouseTermCoords[1] - 105 + (i * 65),\r\n                                color: \"lightblue\"\r\n                            };\r\n                            let link = {\r\n                                source: mapping[\"synonymId\"],\r\n                                target: response.data[\"Mappings\"][\"mouseNodeId\"],\r\n                                linkType: \"Synonym\"\r\n                            };\r\n                            if (!data.nodes.includes(mouseNode)) {\r\n                                data.nodes.push(mouseNode);\r\n                            }\r\n                            if (!data.links.includes(link)) {\r\n                                data.links.push(link);\r\n                            }\r\n                        }\r\n                        for (var i = 0; i < response.data[\"Mappings\"][\"humanSynonyms\"].length; i++) {\r\n                            let mapping = response.data[\"Mappings\"][\"humanSynonyms\"][i];\r\n                            let humanNode = {\r\n                                id: mapping[\"synonymId\"],\r\n                                name: mapping[\"synonymLabel\"],\r\n                                x: humanTermCoords[0] + 175,\r\n                                y: humanTermCoords[1] - 105 + (i * 65),\r\n                                color: \"orange\"\r\n                            };\r\n                            let link = {\r\n                                source: response.data[\"Mappings\"][\"humanNodeId\"],\r\n                                target: mapping[\"synonymId\"],\r\n                                linkType: \"Synonym\"\r\n                            };\r\n                            if (!data.nodes.includes(humanNode)) {\r\n                                data.nodes.push(humanNode);\r\n                            }\r\n                            if (!data.links.includes(link)) {\r\n                                data.links.push(link);\r\n                            }\r\n                        }\r\n                        for (var i = 0; i < response.data[\"Mappings\"][\"matches\"].length; i++) {\r\n                            let match = response.data[\"Mappings\"][\"matches\"][i];\r\n                            let source = _.find(data.nodes, function (node) {\r\n                                if (node.id === match[\"humanNodeId\"])\r\n                                    return true;\r\n                            });\r\n                            let target = _.find(data.nodes, function (node) {\r\n                                if (node.id === match[\"mouseNodeId\"])\r\n                                    return true;\r\n                            });\r\n                            let link = {\r\n                                source: source ? match[\"humanNodeId\"] : response.data[\"Mappings\"][\"humanNodeId\"],\r\n                                target: target ? match[\"mouseNodeId\"] : response.data[\"Mappings\"][\"mouseNodeId\"],\r\n                                linkType: match[\"isExact\"] ? \"Exact Match\" : \"Partial Match\"\r\n                            }\r\n                            if (!data.links.includes(link)) {\r\n                                data.links.push(link);\r\n                            }\r\n                        }\r\n                        this.setState({breakdownData: response.data, loading: false, mappingGraphData: data});\r\n                    } else {\r\n\r\n                    }\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                console.log(\"An error occurred retrieving phenotype data.\");\r\n            });\r\n    }\r\n\r\n    getHumanTermID(breakdownData) {\r\n        if (breakdownData) {\r\n            if (breakdownData[\"Mappings\"]) {\r\n                return breakdownData[\"Mappings\"][\"humanID\"];\r\n            } else {\r\n                return \"No mapping found\";\r\n            }\r\n        }\r\n    }\r\n\r\n    getHumanTerm(breakdownData) {\r\n        if (breakdownData) {\r\n            if (breakdownData[\"Mappings\"]) {\r\n                return breakdownData[\"Mappings\"][\"humanLabel\"];\r\n            } else {\r\n                return \"No mapping found\";\r\n            }\r\n        }\r\n    }\r\n\r\n    getMouseTermID(breakdownData) {\r\n        if (breakdownData) {\r\n            if (breakdownData[\"Mappings\"]) {\r\n                return breakdownData[\"Mappings\"][\"mouseID\"];\r\n            } else {\r\n                return \"No mapping found\";\r\n            }\r\n        }\r\n    }\r\n\r\n    getMouseTerm(breakdownData) {\r\n        if (breakdownData) {\r\n            if (breakdownData[\"Mappings\"]) {\r\n                return breakdownData[\"Mappings\"][\"mouseLabel\"];\r\n            } else {\r\n                return \"No mapping found\";\r\n            }\r\n        }\r\n    }\r\n\r\n    getGWASStudies(breakdownData) {\r\n        if (breakdownData) {\r\n            if (breakdownData[\"GWAS Studies\"].length > 0) {\r\n\r\n            } else {\r\n                return \"0\";\r\n            }\r\n        }\r\n    }\r\n\r\n    getGeneKnockouts(breakdownData) {\r\n        if (breakdownData) {\r\n            if (breakdownData[\"Gene Knockouts\"].length > 0) {\r\n\r\n            } else {\r\n                return \"0\";\r\n            }\r\n        }\r\n    }\r\n\r\n    getHumanSynonyms(breakdownData) {\r\n        if (breakdownData) {\r\n            if (breakdownData[\"Mappings\"][\"humanSynonyms\"].length > 0) {\r\n                return breakdownData[\"Mappings\"][\"humanSynonyms\"].map((synonym, index) =>\r\n                    <li>{synonym[\"synonymLabel\"]}</li>);\r\n            } else {\r\n                return <li>None</li>;\r\n            }\r\n        }\r\n    }\r\n\r\n    getMouseSynonyms(breakdownData) {\r\n        if (breakdownData) {\r\n            if (breakdownData[\"Mappings\"][\"mouseSynonyms\"].length > 0) {\r\n                return breakdownData[\"Mappings\"][\"mouseSynonyms\"].map((synonym, index) =>\r\n                    <li>{synonym[\"synonymLabel\"]}</li>);\r\n            } else {\r\n                return <li>None</li>;\r\n            }\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const {breakdownData, loading, tabValue, dataTabValue, mappingGraphData} = this.state;\r\n        return (\r\n            <Paper id=\"phenotypeResultsContainer\" className=\"container\">\r\n                <LoadingSpinner loading={loading}/>\r\n                {this.props.backBtnClick ?\r\n                    <Button variant=\"contained\" color=\"primary\" onClick={this.props.backBtnClick}>Back</Button> : null}\r\n                <div className=\"phenotype-breakdown-container\">\r\n                    <AppBar position=\"static\" color=\"default\">\r\n                        <Tabs\r\n                            value={tabValue}\r\n                            onChange={(e, val) => this.setState({tabValue: val})}\r\n                            indicatorColor=\"primary\"\r\n                            textColor=\"primary\"\r\n                            variant=\"fullWidth\"\r\n                            aria-label=\"full width tabs example\"\r\n                        >\r\n                            <Tab label=\"Data\"/>\r\n                            <Tab label=\"Mapping\"/>\r\n\r\n                        </Tabs>\r\n                    </AppBar>\r\n                    <TabPanel value={tabValue} index={0} className=\"subTabMenu\">\r\n                        <AppBar position=\"static\" color=\"default\">\r\n                            <Tabs\r\n                                value={dataTabValue}\r\n                                onChange={(e, val) => this.setState({dataTabValue: val})}\r\n                                indicatorColor=\"primary\"\r\n                                textColor=\"primary\"\r\n                                aria-label=\"full width tabs example\"\r\n                                variant=\"fullWidth\"\r\n                                centered\r\n                            >\r\n                                <Tab\r\n                                    label={(breakdownData ? breakdownData[\"GWAS Studies\"].length : 0) + \" Human GWAS Studies\"}\r\n                                    wrapped/>\r\n                                <Tab\r\n                                    label={(breakdownData ? breakdownData[\"Gene Knockouts\"].length : 0) + \" Mouse Gene Knockouts\"}\r\n                                    wrapped/>\r\n\r\n                            </Tabs>\r\n                        </AppBar>\r\n                        <TabPanel value={dataTabValue} index={0}>\r\n                            {breakdownData ? <ResultTable tableData={breakdownData[\"GWAS Studies\"]}\r\n                                                          onRowClick={this.gwasStudyClicked}/> : null}\r\n                        </TabPanel>\r\n                        <TabPanel value={dataTabValue} index={1}>\r\n                            {breakdownData ? <ResultTable tableData={breakdownData[\"Gene Knockouts\"]}\r\n                                                          onRowClick={this.experimentClicked}/> : null}\r\n                        </TabPanel>\r\n\r\n                    </TabPanel>\r\n                    <TabPanel value={tabValue} index={1}>\r\n                        <Grid container>\r\n                            <Grid item xs>\r\n                                <h4 className=\"center\">Homo Sapiens</h4>\r\n                            </Grid>\r\n                            <Grid item xs>\r\n                                <h4 className=\"center\">Mus Musculus</h4>\r\n                            </Grid>\r\n\r\n                        </Grid>\r\n                        <Grid container>\r\n                            <Grid item xs={3} className=\"col highlight\">\r\n                                <p>ID</p>\r\n                            </Grid>\r\n                            <Grid item xs={3}>\r\n                                <p id=\"HPO-Matched-Term\">{this.getHumanTermID(breakdownData)}</p>\r\n                            </Grid>\r\n                            <Grid item xs={3} className=\"col highlight\">\r\n                                <p>ID</p>\r\n                            </Grid>\r\n                            <Grid item xs={3}>\r\n                                <p id=\"MP-Matched-Term\">{this.getMouseTermID(breakdownData)}</p>\r\n                            </Grid>\r\n                            <Grid item xs={3} className=\"col highlight\">\r\n                                <p>Term</p>\r\n                            </Grid>\r\n                            <Grid item xs={3}>\r\n                                <p id=\"HPO-Matched-Term\">{this.getHumanTerm(breakdownData)}</p>\r\n                            </Grid>\r\n                            <Grid item xs={3} className=\"col highlight\">\r\n                                <p>Term</p>\r\n                            </Grid>\r\n                            <Grid item xs={3}>\r\n                                <p id=\"MP-Matched-Term\">{this.getMouseTerm(breakdownData)}</p>\r\n                            </Grid>\r\n\r\n                        </Grid>\r\n                        <Grid container>\r\n                            <Grid item xs={3} className=\"col highlight\">\r\n                                <p>Synonyms</p>\r\n                            </Grid>\r\n                            <Grid item xs={3} className=\"col\">\r\n                                <ul>\r\n                                    {this.getHumanSynonyms(breakdownData)}\r\n                                </ul>\r\n                            </Grid>\r\n                            <Grid item xs={3} className=\"col highlight\">\r\n                                <p>Synonyms</p>\r\n                            </Grid>\r\n                            <Grid item xs={3} className=\"col\">\r\n                                <ul>\r\n                                    {this.getMouseSynonyms(breakdownData)}\r\n                                </ul>\r\n                            </Grid>\r\n                        </Grid>\r\n                        <Grid container>\r\n                            <Grid item xs={3} className=\"col\">\r\n                                <svg className=\"legendIcon\" xmlns=\"http://www.w3.org/2000/svg\">\r\n                                    <circle cx=\"5\" cy=\"5\" r=\"10px\" fill=\"red\"/>\r\n                                </svg>\r\n                                {this.props.humanOntology === \"MESH\" ? \" MeSH Term\" : \" HPO Term\"}\r\n                            </Grid>\r\n                            <Grid item xs={3} className=\"col\">\r\n                                <svg className=\"legendIcon\" xmlns=\"http://www.w3.org/2000/svg\">\r\n                                    <circle cx=\"5\" cy=\"5\" r=\"10px\" fill=\"blue\"/>\r\n                                </svg>\r\n                                {\" MP Term\"}\r\n                            </Grid>\r\n                        </Grid>\r\n                        <Grid container>\r\n                            <Grid item xs={3} className=\"col\">\r\n                                <svg className=\"legendIcon\" xmlns=\"http://www.w3.org/2000/svg\">\r\n                                    <circle cx=\"5\" cy=\"5\" r=\"10px\" fill=\"orange\"/>\r\n                                </svg>\r\n                                {this.props.humanOntology === \"MESH\" ? \" MeSH Synonym\" : \" HPO Synonym\"}\r\n                            </Grid>\r\n                            <Grid item xs={3} className=\"col\">\r\n                                <svg className=\"legendIcon\" xmlns=\"http://www.w3.org/2000/svg\">\r\n                                    <circle cx=\"5\" cy=\"5\" r=\"10px\" fill=\"lightblue\"/>\r\n                                </svg>\r\n                                {\" MP Synonym\"}\r\n                            </Grid>\r\n                        </Grid>\r\n                        <Graph\r\n                            id=\"graph-id\" // id is mandatory\r\n                            data={mappingGraphData}\r\n                            config={this.myConfig}\r\n                        />\r\n                    </TabPanel>\r\n                </div>\r\n            </Paper>\r\n        );\r\n    }\r\n}\r\n\r\nexport default PhenotypeResultBreakdown;","C:\\Users\\Thomas\\Github Repos\\GC_Mouse_Integration\\src\\Genome\\Components\\assembly.js",["102"],"    export default {\r\n      \"name\": \"Homo_sapiens.GRCh38.dna\",\r\n      \"sequence\": {\r\n        \"type\": \"ReferenceSequenceTrack\",\r\n        \"trackId\": \"Homo_sapiens.GRCh38.dna-ReferenceSequenceTrack\",\r\n        \"adapter\": {\r\n          \"type\": \"BgzipFastaAdapter\",\r\n          \"fastaLocation\": {\r\n            \"uri\": \"Homo_sapiens.GRCh38.dna.fa.gz\"\r\n          },\r\n          \"faiLocation\": {\r\n            \"uri\": \"Homo_sapiens.GRCh38.dna.fa.gz.fai\"\r\n          },\r\n          \"gziLocation\": {\r\n            \"uri\": \"Homo_sapiens.GRCh38.dna.fa.gz.gzi\"\r\n          }\r\n        }\r\n      }\r\n    }","C:\\Users\\Thomas\\Github Repos\\GC_Mouse_Integration\\src\\OntologyHierarchy\\Components\\OntologyTree\\OntologyTree.js",["103","104"],"import {Button, Paper, withStyles} from \"@material-ui/core\";\r\nimport {animated, useSpring} from \"react-spring/web.cjs\";\r\nimport Collapse from \"@material-ui/core/Collapse\";\r\nimport PropTypes from \"prop-types\";\r\nimport React from \"react\";\r\nimport TreeView from \"@material-ui/lab/TreeView\";\r\nimport ArrowDropDownIcon from \"@material-ui/icons/ArrowDropDown\";\r\nimport ArrowRightIcon from \"@material-ui/icons/ArrowRight\";\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\r\nimport StyledTreeItem from \"./Components/StyledTreeItem\";\r\nimport _ from 'lodash';\r\n\r\nconst useStyles = theme => ({\r\n    root: {\r\n        marginTop: 20,\r\n        marginLeft: 5,\r\n        overflowY: \"scroll\",\r\n        height: \"75vh\",\r\n    },\r\n    highlight: {\r\n        backgroundColor: \"#61aefd\",\r\n    },\r\n    btn: {\r\n        marginRight: 20,\r\n    }\r\n});\r\n\r\nfunction TransitionComponent(props) {\r\n    const style = useSpring({\r\n        from: {opacity: 0, transform: 'translate3d(20px,0,0)'},\r\n        to: {opacity: props.in ? 1 : 0, transform: `translate3d(${props.in ? 0 : 20}px,0,0)`},\r\n    });\r\n    return (\r\n        <animated.div style={style}>\r\n            <Collapse {...props} />\r\n        </animated.div>\r\n    );\r\n}\r\n\r\nTransitionComponent.propTypes = {\r\n    /**\r\n     * Show the component; triggers the enter or exit states\r\n     */\r\n    in: PropTypes.bool,\r\n};\r\n\r\nclass OntologyTree extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            loading: false,\r\n            treeData: null,\r\n            expandedNodes: [''],\r\n            selectedNodes: [''],\r\n            selectedSpecies: \"Mouse\",\r\n            nodes: [],\r\n            treeOntology: \"\",\r\n            onToggle: null,\r\n            onSelect: null,\r\n            onBtnClick: null,\r\n            sourceOntology: \"\",\r\n            mappingOntology: \"\",\r\n            selectedPhenotypeLabel: \"\",\r\n            treeID: \"\",\r\n        };\r\n    }\r\n\r\n    getTreeNodes = (nodes, parentPath) => {\r\n        const {classes} = this.props;\r\n        const btn = nodes.hasMapping ?\r\n            <Button className={classes.btn} size=\"small\" onClick={() => this.props.onBtnClick(nodes.label)}\r\n                   style={{margin: 0}} color=\"primary\" variant=\"outlined\" id={nodes.id}\r\n            ><SearchIcon fontSize=\"small\"/></Button> : null;\r\n        const tempChildNode = (nodes.hasChildren === true) && (_.isEmpty(nodes.children)) ?\r\n            <StyledTreeItem labelText={<CircularProgress color=\"inherit\" size={15}/>}/> : null;\r\n        if (!_.isEmpty(nodes.children)) {\r\n            nodes.children = _.orderBy(nodes.children, ['label'], ['asc']); // all nodes must be sorted alphabetically!\r\n        }\r\n        let path = null;\r\n        if (parentPath !== undefined)\r\n            path = parentPath + \"-\" + nodes.id;\r\n        else\r\n            path = nodes.id;\r\n        let id = this.props.treeID + \"-\" + path;\r\n        return (\r\n            <StyledTreeItem id={id} onLabelClick={(e) => e.preventDefault()} key={nodes.id} nodeId={id}\r\n                            data-term={nodes.id} labelText={nodes.label} labelIcon={btn}>\r\n                {!_.isEmpty(nodes.children) ? Object.keys(nodes.children).map((key, index) => this.getTreeNodes(nodes.children[key], path)) : tempChildNode}\r\n            </StyledTreeItem>\r\n        );\r\n    }\r\n\r\n    getExpandedNodeIDs = () => {\r\n        let terms = this.props.expanded;\r\n        let result = [];\r\n        terms.forEach(term => function() {\r\n            // result.push($())\r\n        });\r\n        return result;\r\n    }\r\n\r\n\r\n    render() {\r\n        const {classes} = this.props;\r\n        const {\r\n            loading,\r\n        } = this.state;\r\n        if (this.props.treeData === null || this.props.treeData === undefined) {\r\n            throw new Error('No ontology data received.');\r\n        }\r\n        return (\r\n            <TreeView id={this.props.treeID} className={classes.root} expanded={this.props.expanded}\r\n                      selected={this.props.selected}\r\n                      defaultCollapseIcon={<ArrowDropDownIcon/>} defaultExpandIcon={<ArrowRightIcon/>}\r\n                      defaultEndIcon={<div style={{width: 24}}/>} onNodeToggle={this.props.onToggle}\r\n                      onNodeSelect={this.props.onSelect}>\r\n                {this.getTreeNodes(this.props.treeData)}\r\n            </TreeView>\r\n        );\r\n\r\n    }\r\n\r\n}\r\n\r\nexport default withStyles(useStyles)(OntologyTree);\r\n\r\n","C:\\Users\\Thomas\\Github Repos\\GC_Mouse_Integration\\src\\UtilityComponents\\TabPanel.js",["105"],"import React, {useCallback} from 'react';\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport {Box} from \"@material-ui/core\";\r\n\r\nclass TabPanel extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {};\r\n    }\r\n\r\n\r\n    render() {\r\n        const {children, value, index, ...other} = this.props;\r\n        return (\r\n            <div role=\"tabpanel\"\r\n                 hidden={value !== index}\r\n                 id={`full-width-tabpanel-${index}`}\r\n                 aria-labelledby={`full-width-tab-${index}`}\r\n                 {...other}>\r\n                {value === index && (\r\n                    <Box p={3}>\r\n                        <Typography>{children}</Typography>\r\n                    </Box>\r\n                )}\r\n            </div>\r\n        );\r\n\r\n    }\r\n}\r\n\r\n\r\nexport default TabPanel;","C:\\Users\\Thomas\\Github Repos\\GC_Mouse_Integration\\src\\OntologyHierarchy\\Components\\OntologyTree\\Components\\StyledTreeItem.js",["106"],"import React from 'react';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport {withStyles} from '@material-ui/core';\r\nimport TreeItem from '@material-ui/lab/TreeItem';\r\nimport SearchIcon from '@material-ui/icons/Search';\r\n\r\nconst useTreeItemStyles = theme => ({\r\n  root: {\r\n    color: theme.palette.text.secondary,\r\n    '&:hover > $content': {\r\n      // backgroundColor: theme.palette.action.hover,\r\n    },\r\n    '&:focus > $content, &$selected > $content': {\r\n      // backgroundColor: `var(--tree-view-bg-color, ${theme.palette.grey[400]})`,\r\n      color: 'var(--tree-view-color)',\r\n    },\r\n    '&:focus > $content $label, &:hover > $content $label, &$selected > $content $label': {\r\n      // backgroundColor: theme.palette.action.hover,\r\n    },\r\n  },\r\n  content: {\r\n    color: theme.palette.text.secondary,\r\n    borderTopRightRadius: theme.spacing(2),\r\n    borderBottomRightRadius: theme.spacing(2),\r\n    paddingRight: theme.spacing(1),\r\n    fontWeight: theme.typography.fontWeightBold,\r\n    '$expanded > &': {\r\n      fontWeight: theme.typography.fontWeightRegular,\r\n    },\r\n  },\r\n  group: {\r\n    '& $content': {\r\n      // paddingLeft: theme.spacing(2),\r\n    },\r\n  },\r\n  expanded: {},\r\n  selected: {},\r\n  label: {\r\n    fontWeight: 'inherit',\r\n    color: 'inherit',\r\n      textAlign: 'left',\r\n  },\r\n});\r\n\r\nclass StyledTreeItem extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {label: \"\", color: \"\", bgColor: \"\",};\r\n    }\r\n\r\n\r\n\r\n    render() {\r\n        const {classes} = this.props;\r\n        const {labelText, labelIcon, labelInfo, color, bgColor,key, ...other} = this.props;\r\n\r\n        return (\r\n            <TreeItem\r\n                label={\r\n                    <div className={classes.label}>\r\n                        <Typography variant=\"body2\" className={classes.content} component=\"span\">\r\n                            {this.props.labelText}\r\n                        </Typography>\r\n                        <Typography variant=\"caption\" color=\"inherit\">\r\n                            {this.props.labelInfo}\r\n                        </Typography>\r\n                        <div className={classes.labelIcon} style={{float: 'right'}}>\r\n                            {labelIcon}\r\n                        </div>\r\n                    </div>\r\n                }\r\n                style={{\r\n                    '--tree-view-color': color,\r\n                    '--tree-view-bg-color': bgColor,\r\n                }}\r\n                key={this.props.key}\r\n             nodeId={this.props.nodeId}\r\n            classes={{\r\n        root: classes.root,\r\n        content: classes.content,\r\n        expanded: classes.expanded,\r\n        selected: classes.selected,\r\n        group: classes.group,\r\n        label: classes.label,\r\n            }}\r\n                {...other}\r\n            />\r\n        );\r\n    }\r\n}\r\nexport default withStyles(useTreeItemStyles)(StyledTreeItem);\r\n\r\n",{"ruleId":"107","replacedBy":"108"},{"ruleId":"109","replacedBy":"110"},{"ruleId":"107","replacedBy":"108"},{"ruleId":"109","replacedBy":"110"},{"ruleId":"111","severity":1,"message":"112","line":6,"column":9,"nodeType":"113","messageId":"114","endLine":6,"endColumn":24},{"ruleId":"111","severity":1,"message":"115","line":6,"column":26,"nodeType":"113","messageId":"114","endLine":6,"endColumn":39},{"ruleId":"116","severity":1,"message":"117","line":115,"column":15,"nodeType":"113","messageId":"114","endLine":115,"endColumn":21},{"ruleId":"118","severity":1,"message":"119","line":297,"column":57,"nodeType":"120","messageId":"121","endLine":297,"endColumn":90},{"ruleId":"122","severity":1,"message":"123","line":310,"column":38,"nodeType":"113","messageId":"124","endLine":310,"endColumn":39},{"ruleId":"118","severity":1,"message":"125","line":318,"column":57,"nodeType":"120","messageId":"121","endLine":318,"endColumn":90},{"ruleId":"116","severity":1,"message":"126","line":494,"column":13,"nodeType":"113","messageId":"114","endLine":494,"endColumn":19},{"ruleId":"116","severity":1,"message":"126","line":509,"column":13,"nodeType":"113","messageId":"114","endLine":509,"endColumn":19},{"ruleId":"116","severity":1,"message":"127","line":1,"column":16,"nodeType":"113","messageId":"114","endLine":1,"endColumn":27},{"ruleId":"116","severity":1,"message":"128","line":47,"column":16,"nodeType":"113","messageId":"114","endLine":47,"endColumn":24},{"ruleId":"116","severity":1,"message":"127","line":1,"column":16,"nodeType":"113","messageId":"114","endLine":1,"endColumn":27},{"ruleId":"116","severity":1,"message":"129","line":3,"column":8,"nodeType":"113","messageId":"114","endLine":3,"endColumn":9},{"ruleId":"116","severity":1,"message":"127","line":1,"column":16,"nodeType":"113","messageId":"114","endLine":1,"endColumn":27},{"ruleId":"116","severity":1,"message":"130","line":71,"column":13,"nodeType":"113","messageId":"114","endLine":71,"endColumn":22},{"ruleId":"122","severity":1,"message":"123","line":126,"column":34,"nodeType":"113","messageId":"124","endLine":126,"endColumn":35},{"ruleId":"122","severity":1,"message":"123","line":147,"column":34,"nodeType":"113","messageId":"124","endLine":147,"endColumn":35},{"ruleId":"131","severity":1,"message":"132","line":1,"column":5,"nodeType":"133","endLine":19,"endColumn":6},{"ruleId":"116","severity":1,"message":"134","line":1,"column":17,"nodeType":"113","messageId":"114","endLine":1,"endColumn":22},{"ruleId":"116","severity":1,"message":"135","line":108,"column":13,"nodeType":"113","messageId":"114","endLine":108,"endColumn":20},{"ruleId":"116","severity":1,"message":"127","line":1,"column":16,"nodeType":"113","messageId":"114","endLine":1,"endColumn":27},{"ruleId":"116","severity":1,"message":"136","line":5,"column":8,"nodeType":"113","messageId":"114","endLine":5,"endColumn":18},"no-native-reassign",["137"],"no-negated-in-lhs",["138"],"@typescript-eslint/no-unused-vars","'TransitionGroup' is defined but never used.","Identifier","unusedVar","'CSSTransition' is defined but never used.","no-unused-vars","'tracks' is assigned a value but never used.","no-loop-func","Function declared in a loop contains unsafe references to variable(s) 'expandedMouseNodes'.","ArrowFunctionExpression","unsafeRefs","no-redeclare","'i' is already defined.","redeclared","Function declared in a loop contains unsafe references to variable(s) 'expandedHumanNodes'.","'nodeID' is assigned a value but never used.","'useCallback' is defined but never used.","'isZoomed' is assigned a value but never used.","'$' is defined but never used.","'selection' is assigned a value but never used.","import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","'Paper' is defined but never used.","'loading' is assigned a value but never used.","'SearchIcon' is defined but never used.","no-global-assign","no-unsafe-negation"]