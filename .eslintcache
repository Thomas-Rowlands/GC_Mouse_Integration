[{"/var/www/testing/GC_Mouse_Integration/src/index.tsx":"1","/var/www/testing/GC_Mouse_Integration/src/UtilityComponents/ErrorBoundary.js":"2","/var/www/testing/GC_Mouse_Integration/src/reportWebVitals.ts":"3","/var/www/testing/GC_Mouse_Integration/src/Home/App.tsx":"4","/var/www/testing/GC_Mouse_Integration/src/Home/Home.js":"5","/var/www/testing/GC_Mouse_Integration/src/Genome/Genome.js":"6","/var/www/testing/GC_Mouse_Integration/src/PhenotypeSearch/PhenotypeSearch.js":"7","/var/www/testing/GC_Mouse_Integration/src/OntologyHierarchy/OntologyHierarchy.js":"8","/var/www/testing/GC_Mouse_Integration/src/Home/Components/MainMenuItem.js":"9","/var/www/testing/GC_Mouse_Integration/src/UtilityComponents/ConfigData.js":"10","/var/www/testing/GC_Mouse_Integration/src/UtilityComponents/ResultTable.js":"11","/var/www/testing/GC_Mouse_Integration/src/UtilityComponents/LoadingSpinner/LoadingSpinner.js":"12","/var/www/testing/GC_Mouse_Integration/src/PhenotypeSearch/Components/PhenotypeResultBreakdown.js":"13","/var/www/testing/GC_Mouse_Integration/src/OntologyHierarchy/Components/OntologyTree/OntologyTree.js":"14","/var/www/testing/GC_Mouse_Integration/src/UtilityComponents/TabPanel.js":"15","/var/www/testing/GC_Mouse_Integration/src/OntologyHierarchy/Components/OntologyTree/Components/StyledTreeItem.js":"16","/var/www/testing/GC_Mouse_Integration/src/Genome/Components/assembly.js":"17"},{"size":716,"mtime":1615368326644,"results":"18","hashOfConfig":"19"},{"size":982,"mtime":1614770802348,"results":"20","hashOfConfig":"19"},{"size":425,"mtime":1611918828934,"results":"21","hashOfConfig":"19"},{"size":1172,"mtime":1615561689341,"results":"22","hashOfConfig":"19"},{"size":2306,"mtime":1620211071650,"results":"23","hashOfConfig":"19"},{"size":3046,"mtime":1620639898424,"results":"24","hashOfConfig":"19"},{"size":11547,"mtime":1620982525700,"results":"25","hashOfConfig":"19"},{"size":30932,"mtime":1620993977692,"results":"26","hashOfConfig":"19"},{"size":1526,"mtime":1617194213941,"results":"27","hashOfConfig":"19"},{"size":91,"mtime":1620992482755,"results":"28","hashOfConfig":"19"},{"size":3501,"mtime":1618399521382,"results":"29","hashOfConfig":"19"},{"size":1248,"mtime":1614770802348,"results":"30","hashOfConfig":"19"},{"size":17655,"mtime":1619788820200,"results":"31","hashOfConfig":"19"},{"size":4348,"mtime":1620982761378,"results":"32","hashOfConfig":"19"},{"size":812,"mtime":1617194213973,"results":"33","hashOfConfig":"19"},{"size":2825,"mtime":1617194213941,"results":"34","hashOfConfig":"19"},{"size":558,"mtime":1620224068452,"results":"35","hashOfConfig":"19"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},"751hkj",{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"38"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"41"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"41"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"57","messages":"58","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"41"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"62","messages":"63","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"41"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"41"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"41"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"41"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"41"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"41"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82","usedDeprecatedRules":"41"},"/var/www/testing/GC_Mouse_Integration/src/index.tsx",[],["83","84"],"/var/www/testing/GC_Mouse_Integration/src/UtilityComponents/ErrorBoundary.js",[],["85","86"],"/var/www/testing/GC_Mouse_Integration/src/reportWebVitals.ts",[],"/var/www/testing/GC_Mouse_Integration/src/Home/App.tsx",["87","88"],"import React from 'react';\nimport './App.css';\n// @ts-ignore\nimport Home from \"./Home.js\";\n// @ts-ignore\nimport {TransitionGroup, CSSTransition} from \"react-transition-group\";\n// @ts-ignore\nimport {HashRouter, Route, Switch} from \"react-router-dom\";\nimport PhenotypeSearch from \"../PhenotypeSearch/PhenotypeSearch\";\nimport OntologyHierarchy from \"../OntologyHierarchy/OntologyHierarchy\";\nimport Genome from \"../Genome/Genome\";\n\nfunction App() {\n    return (<div className=\"App\">\n            <header className=\"App-header\">\n            </header>\n            <HashRouter>\n                <Switch>\n                    <Route exact path=\"/\">\n                        <Home/>\n                    </Route>\n                    <Route exact path=\"/PhenotypeSearch\">\n                        <PhenotypeSearch/>\n                    </Route>\n                    <Route exact path=\"/OntologyHierarchy\">\n                        <OntologyHierarchy/>\n                    </Route>\n                    <Route exact path=\"/Genome\">\n                        <Genome/>\n                    </Route>\n                </Switch>\n            </HashRouter>\n        </div>\n    );\n}\n\nexport default App;\n","/var/www/testing/GC_Mouse_Integration/src/Home/Home.js",[],"/var/www/testing/GC_Mouse_Integration/src/Genome/Genome.js",["89"],"import React from \"react\";\nimport {withStyles} from \"@material-ui/core\";\nimport {\n    createViewState,\n    createJBrowseTheme,\n    JBrowseLinearGenomeView,\n    ThemeProvider,\n} from '@jbrowse/react-linear-genome-view';\nimport assembly from './Components/assembly';\n\nconst theme = createJBrowseTheme();\n\nconst useStyles = theme => ({\n    formControl: {\n        margin: theme.spacing(1),\n        minWidth: 120,\n    },\n    selectEmpty: {\n        marginTop: theme.spacing(2),\n    },\n    autoComplete: {\n        width: \"50%\",\n        marginLeft: \"auto\",\n        marginRight: \"auto\",\n    },\n    radio: {\n        width: \"50%\",\n        marginLeft: \"auto\",\n        marginRight: \"auto\"\n    },\n});\n\nconst tracks = [\n    {\n        type: 'FeatureTrack',\n        trackId: 'gc_variants_hg38',\n        name: 'Human Variants',\n        assemblyNames: ['GRCh38'],\n        category: ['Annotation'],\n        adapter: {\n            type: 'Gff3TabixAdapter',\n            gffGzLocation: {\n                uri:\n                    'JBrowseData/tracks/tracks.conf',\n            },\n            index: {\n                location: {\n                    uri:\n                        '',\n                },\n            },\n        },\n    },\n]\n\nconst defaultSession = {\n    name: 'My session',\n    view: {\n        id: 'linearGenomeView',\n        type: 'LinearGenomeView',\n        tracks: [\n            {\n                type: 'ReferenceSequenceTrack',\n                configuration: 'GRCh38-ReferenceSequenceTrack',\n                displays: [\n                    {\n                        type: 'LinearReferenceSequenceDisplay',\n                        configuration:\n                            'GRCh38-ReferenceSequenceTrack-LinearReferenceSequenceDisplay',\n                    },\n                ],\n            },\n            {\n                type: 'FeatureTrack',\n                configuration: 'ncbi_refseq_109_hg38',\n                displays: [\n                    {\n                        type: 'LinearBasicDisplay',\n                        configuration: 'ncbi_refseq_109_hg38-LinearBasicDisplay',\n                    },\n                ],\n            },\n        ],\n    },\n}\n\n\nclass Genome extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            loading: false,\n        };\n\n    }\n\n    static get theme() {\n        return theme;\n    }\n\n    static get defaultSession() {\n        return defaultSession;\n    }\n\n    static get tracks() {\n        return tracks;\n    }\n\n    static get assembly() {\n        return assembly;\n    }\n\n    render() {\n        const tracks = Genome.tracks;\n        const defaultSession = Genome.defaultSession;\n        const viewState = createViewState({assembly, location: '10:29,838,737..29,838,819', defaultSession,});\n        return (\n            <div>\n                <ThemeProvider theme={Genome.theme}>\n                    <JBrowseLinearGenomeView viewState={viewState}/>\n                </ThemeProvider>\n            </div>\n        );\n    }\n}\n\nexport default withStyles(useStyles)(Genome);","/var/www/testing/GC_Mouse_Integration/src/PhenotypeSearch/PhenotypeSearch.js",["90"],"import React from 'react';\nimport './PhenotypeSearch.css';\nimport $ from 'jquery';\nimport {\n    Button,\n    Dialog,\n    DialogActions,\n    DialogContent,\n    FormControl,\n    FormControlLabel,\n    InputLabel,\n    MenuItem,\n    Radio,\n    RadioGroup,\n    Select,\n    TextField,\n    withStyles\n} from '@material-ui/core';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport CircularProgress from '@material-ui/core/CircularProgress'\nimport ResultTable from \"../UtilityComponents/ResultTable\";\nimport PhenotypeResultBreakdown from \"./Components/PhenotypeResultBreakdown\";\nimport axios from \"axios\";\nimport LoadingSpinner from \"../UtilityComponents/LoadingSpinner/LoadingSpinner\";\nimport api_server from \"../UtilityComponents/ConfigData\";\n\nconst useStyles = theme => ({\n    formControl: {\n        margin: theme.spacing(1),\n        minWidth: 120,\n    },\n    selectEmpty: {\n        marginTop: theme.spacing(2),\n    },\n    autoComplete: {\n        width: \"50%\",\n        marginLeft: \"auto\",\n        marginRight: \"auto\",\n    },\n    radio: {\n        width: \"50%\",\n        marginLeft: \"auto\",\n        marginRight: \"auto\"\n    },\n});\n\n\nclass PhenotypeSearch extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            selectedSpecies: \"Mouse\",\n            loading: false,\n            tableData: null,\n            liveSearchResults: [],\n            selectedPhenotype: null,\n            searchOpen: true,\n            breakdownData: null,\n            humanPval: 0,\n            mousePval: 0,\n            searchInput: \"\",\n            configData: api_server,\n        };\n        this.page_num = 1;\n        this.liveCancelToken = null;\n    }\n\n    componentDidMount() {\n\n    }\n\n    getPreviousResults = () => {\n        if (this.page_num > 1) {\n            this.page_num -= 1;\n            this.search();\n        }\n    }\n\n    humanPValChanged = (e) => {\n        this.setState({humanPval: e.target.value});\n    }\n\n    mousePValChanged = (e) => {\n        this.setState({mousePval: e.target.value});\n    }\n\n    getNextResults = () => {\n        this.page_num += 1;\n        this.search();\n    }\n\n    searchRowClicked = (row) => {\n        let selection = $(row.target).attr(\"data-id\");\n        this.setState({selectedPhenotype: selection, searchOpen: false});\n    }\n\n    retrieveLiveSearch = (e, x) => {\n        let input = x;\n        if (this.liveCancelToken)\n            this.liveCancelToken.cancel();\n        this.setState({searchInput: input});\n        if (input.length < 1) {\n            $(\"#live-search\").hide();\n            this.setState({liveLoading: false, liveSearchResults: [], inputErrorText: \"Input cannot be empty.\"});\n            return;\n        }\n        this.liveCancelToken = axios.CancelToken.source();\n        this.setState({liveLoading: true});\n        let ontology = this.state.selectedSpecies === \"Human\" ? \"HPO\" : \"MP\"\n        let url_string = this.state.configData.api_server + \"livesearch.php?entry=\" + encodeURIComponent(input) + \"&ontology=\" + ontology;\n        if (input.length > 0) {\n            axios.get(url_string, {cancelToken: this.liveCancelToken.token})\n                .then((response) => {\n                    if (response.status === 200) {\n                        if (response.data.length == 0) {\n                            this.setState({liveSearchResults: [], liveLoading: false});\n                        } else {\n                            this.setState({liveSearchResults: response.data, liveLoading: false});\n                        }\n                    }\n                })\n                .catch((error) => {\n                    console.log(\"An error occurred retrieving live search results.\");\n                });\n        }\n    }\n\n    search = () => {\n        this.setState({loading: true});\n        let search_input = this.state.searchInput;\n        let human_pval = this.state.humanPval;\n        let mouse_pval = this.state.mousePval;\n\n        let url_string = this.state.configData.api_server + \"/controller.php?type=study&search=\" + encodeURIComponent(search_input) + \"&page=\" + this.page_num + \"&human_pval=\" + human_pval + \"&mouse_pval=\" + mouse_pval + \"&species=\" + this.state.selectedSpecies;\n        axios.get(url_string)\n            .then((response) => {\n                if (response.status === 200) {\n                    if (response.data) {\n                        var result_total = response.data[1];\n                        if (result_total > 0) {\n                            this.setState({tableData: response.data[0], loading: false, searchOpen: true});\n                        } else {\n                            this.setState({tableData: \"No results found.\", loading: false, searchOpen: true});\n                        }\n                    } else {\n                        this.setState({loading: false, searchOpen: true, tableData: null});\n                    }\n                }\n            })\n            .catch((error) => {\n                this.setState({loading: false, searchOpen: true, tableData: null});\n                console.log(\"An error occurred searching for phenotype results.\");\n            });\n    }\n\n    searchClick = () => {\n        this.page_num = 1;\n        this.search();\n    }\n\n    speciesRadioChanged = (e) => {\n        this.setState({selectedSpecies: e.target.value});\n    }\n\n    displayTable = (tableData) => {\n        if (tableData === \"No results found.\")\n            return <p className=\"center\"><br/>{tableData}</p>\n        else\n            return <ResultTable tableData={tableData} onRowClick={this.searchRowClicked}/>\n\n    }\n\n    render() {\n        const {tableData, liveLoading, loading, searchOpen, liveSearchResults} = this.state;\n        const {classes} = this.props;\n        return (<div className=\"PhenotypeSearch\">\n                <LoadingSpinner loading={loading}/>\n                <div className=\"searchResultsContainer\">\n                    {/* Orthology Selection */}\n                    <div className=\"orthology-menu\">\n                        <h4>Comparative data on human-mouse orthologues.</h4>\n                        <Autocomplete\n                            freeSolo\n                            className={classes.autoComplete}\n                            onInputChange={this.retrieveLiveSearch}\n                            renderInput={(params) => (\n                                <TextField\n                                    {...params}\n                                    label=\"Phenotype search\"\n                                    variant=\"outlined\"\n                                    helperText={this.state.inputErrorText}\n                                    InputProps={{\n                                        ...params.InputProps,\n                                        endAdornment: (\n                                            <React.Fragment>\n                                                {liveLoading ? <CircularProgress color=\"inherit\" size={20}/> : null}\n                                                {params.InputProps.endAdornment}\n                                            </React.Fragment>\n                                        ),\n                                    }}\n                                />\n                            )}\n                            options={liveSearchResults.map((option) => option.FSN)}/>\n                        <RadioGroup row className={classes.radio} name=\"speciesRadio\" value={this.state.selectedSpecies}\n                                    onChange={this.speciesRadioChanged}>\n                            <FormControlLabel value=\"Human\" label=\"Human\" control={<Radio/>} id=\"human-radio\"/>\n                            <FormControlLabel value=\"Mouse\" label=\"Mouse\" control={<Radio/>} id=\"mouse-radio\"/>\n                        </RadioGroup>\n                        <FormControl className={classes.formControl} onChange={this.humanPValChanged}>\n                            <InputLabel shrink>Human P-value</InputLabel>\n                            <Select value={this.state.humanPval} className={classes.selectEmpty} id=\"human_pval_select\"\n                                    onChange={this.humanPValChanged}>\n                                <MenuItem value={0}>0</MenuItem>\n                                <MenuItem value={1}>1</MenuItem>\n                                <MenuItem value={2}>2</MenuItem>\n                                <MenuItem value={3}>3</MenuItem>\n                                <MenuItem value={4}>4</MenuItem>\n                                <MenuItem value={5}>5</MenuItem>\n                                <MenuItem value={6}>6</MenuItem>\n                                <MenuItem value={7}>7</MenuItem>\n                                <MenuItem value={8}>8</MenuItem>\n                                <MenuItem value={9}>9</MenuItem>\n                                <MenuItem value={10}>10</MenuItem>\n                            </Select>\n                        </FormControl>\n                        <FormControl className={classes.formControl}>\n                            <InputLabel shrink>Mouse P-value</InputLabel>\n                            <Select value={this.state.mousePval} className={classes.selectEmpty} id=\"select\"\n                                    onChange={this.mousePValChanged}>\n                                <MenuItem value={0}>0</MenuItem>\n                                <MenuItem value={1}>1</MenuItem>\n                                <MenuItem value={2}>2</MenuItem>\n                                <MenuItem value={3}>3</MenuItem>\n                                <MenuItem value={4}>4</MenuItem>\n                                <MenuItem value={5}>5</MenuItem>\n                                <MenuItem value={6}>6</MenuItem>\n                                <MenuItem value={7}>7</MenuItem>\n                                <MenuItem value={8}>8</MenuItem>\n                                <MenuItem value={9}>9</MenuItem>\n                                <MenuItem value={1}>10</MenuItem>\n                            </Select>\n                        </FormControl>\n                        <div className=\"input-group-inline\">\n                            <Button size=\"large\" color=\"primary\" variant=\"contained\" id=\"search_btn\"\n                                    onClick={this.searchClick}>Search</Button>\n                        </div>\n                    </div>\n                    <div className=\"table-container\">\n                        {tableData ? this.displayTable(tableData) : null}\n                    </div>\n\n\n                </div>\n                {/*Phenotype selection results drill down*/\n                }\n                <Dialog\n                    fullWidth={true}\n                    maxWidth=\"lg\"\n                    open={!searchOpen}\n                    aria-labelledby=\"max-width-dialog-title\"\n                >\n                    <DialogContent>\n\n                        <div className=\"table-container\">\n                            <PhenotypeResultBreakdown selectedPhenotype={this.state.selectedPhenotype}\n                                                      breakdownData={this.state.breakdownData}/>\n                        </div>\n                    </DialogContent>\n                    <DialogActions>\n                        <Button onClick={() => this.setState({searchOpen: true})} color=\"primary\">\n                            Close\n                        </Button>\n                    </DialogActions>\n                </Dialog>\n            </div>\n        )\n            ;\n    }\n}\n\nexport default withStyles(useStyles)(PhenotypeSearch);","/var/www/testing/GC_Mouse_Integration/src/OntologyHierarchy/OntologyHierarchy.js",["91","92","93","94","95","96"],"/var/www/testing/GC_Mouse_Integration/src/Home/Components/MainMenuItem.js",["97","98"],"import React, {useCallback} from 'react';\nimport {Paper, withStyles} from \"@material-ui/core\";\nimport './MainMenuItem.css';\nimport Typography from \"@material-ui/core/Typography\";\n\nconst useStyles = theme => ({\n    paper: {\n        padding: theme.spacing(2),\n        textAlign: 'center',\n        color: theme.palette.text.secondary,\n        height: 500,\n        zIndex: 1,\n        position: 'relative'\n    },\n    img: {\n        width: 100,\n    },\n    text: {\n        textDecoration: 'none',\n    }\n});\n\nclass MainMenuItem extends React.Component {\n\n    state = {isZoomed: false};\n\n    toggle = () => {\n        this.setState({\n            isZoomed: !this.state.isZoomed\n        });\n    }\n\n    render() {\n        const {classes} = this.props;\n        const {isZoomed} = this.state;\n\n        return (\n            <Paper style={{transform: this.state.isZoomed ? 'scale(1.1)' : 'scale(1)',\n                transition: this.state.isZoomed ? '0.3s' :  '0.3s', zIndex: this.state.isZoomed ? 99 :  1}}\n                   onMouseEnter={() => this.toggle()}\n                   onMouseLeave={() => this.toggle()} className={classes.paper}>\n                <img className={classes.img} src={this.props.image} alt={this.props.alt}/>\n                <Typography className={classes.text} variant='h5' gutterBottom>{this.props.heading}</Typography>\n                <Typography className={classes.text} variant='body1' gutterBottom>{this.props.body}</Typography>\n            </Paper>);\n    }\n}\n\nexport default withStyles(useStyles)(MainMenuItem);","/var/www/testing/GC_Mouse_Integration/src/UtilityComponents/ConfigData.js",[],"/var/www/testing/GC_Mouse_Integration/src/UtilityComponents/ResultTable.js",["99","100"],"import React, {useCallback} from 'react';\nimport './ResultTable.css';\nimport $ from 'jquery';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\nimport {TablePagination} from \"@material-ui/core\";\n\nclass ResultTable extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {tableData: {}, onRowClick: null, rowsPerPage:5, page:0};\n    }\n\n    handleChangePage = (event, newPage) => {\n        this.setState({page: newPage});\n    }\n\n    handleChangeRowsPerPage = (event) => {\n        this.setState({rowsPerPage: parseInt(event.target.value, 10), page: 0});\n    }\n\n    render() {\n        if (typeof this.props.tableData != \"undefined\" && this.props.tableData !== null)\n            if (this.props.tableData.length > 0) {\n                return (<div className=\"container\">\n                        <TableContainer component={Paper} className=\"info\" id=\"searchResults\">\n                            <Table size=\"small\" aria-label=\"a dense table\">\n                                <TableHead>\n                                    <TableRow>\n                                        {Object.keys(this.props.tableData[0]).map((header, index) => {\n                                            return (<TableCell align=\"center\" key={index}>{header}</TableCell>)\n                                        })}\n                                    </TableRow>\n                                </TableHead>\n                                <TableBody>\n                                    {this.props.tableData.slice(this.state.page * this.state.rowsPerPage,\n                                        this.state.page * this.state.rowsPerPage + this.state.rowsPerPage).map((row, index) => {\n                                        return (\n                                            <TableRow data-id={row[\"ID\"]} key={index} onClick={this.props.onRowClick}>\n                                                {Object.keys(row).map((key) => {\n                                                    return (<TableCell align=\"left\"\n                                                                       data-id={row[\"MP ID\"]}>{row[key]}</TableCell>)\n                                                })}\n                                            </TableRow>)\n                                    })}\n                                </TableBody>\n                            </Table>\n                        </TableContainer>\n                        <TablePagination\n                            rowsPerPageOptions={[5, 10, 25]}\n                            component=\"div\"\n                            count={this.props.tableData.length}\n                            rowsPerPage={this.state.rowsPerPage}\n                            page={this.state.page}\n                            onChangePage={this.handleChangePage}\n                            onChangeRowsPerPage={this.handleChangeRowsPerPage}\n                        />\n                    </div>\n                );\n            } else {\n                return (\n                    <span className=\"center\">No results found.</span>\n                );\n            }\n        else\n            return null;\n\n    }\n}\n\n\nexport default ResultTable;","/var/www/testing/GC_Mouse_Integration/src/UtilityComponents/LoadingSpinner/LoadingSpinner.js",["101"],"import React, {useCallback} from 'react';\nimport './LoadingSpinner.css';\n\nclass LoadingSpinner extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {loading: false};\n    }\n\n    render() {\n        if (this.props.loading)\n            return (\n                <div className=\"loading-container\">\n                    <div className=\"loading\">\n                        <div className=\"loader\">\n                            <div></div>\n                            <div></div>\n                            <div></div>\n                            <div></div>\n                            <div></div>\n                            <div></div>\n                            <div></div>\n                            <div></div>\n                            <div></div>\n                            <div></div>\n                            <div></div>\n                            <div></div>\n                            <div></div>\n                            <div></div>\n                            <div></div>\n                        </div>\n                        <h4>Loading...</h4>\n                    </div>\n                </div>\n            );\n        else\n            return (null);\n    }\n}\n\nexport default LoadingSpinner;","/var/www/testing/GC_Mouse_Integration/src/PhenotypeSearch/Components/PhenotypeResultBreakdown.js",["102","103","104"],"import React from \"react\";\nimport './PhenotypeResultBreakdown.css';\nimport ResultTable from \"../../UtilityComponents/ResultTable\";\nimport $ from \"jquery\";\nimport axios from \"axios\";\nimport LoadingSpinner from \"../../UtilityComponents/LoadingSpinner/LoadingSpinner\";\nimport {AppBar, Button, Grid, Paper, Tab, Tabs} from \"@material-ui/core\";\nimport TabPanel from \"../../UtilityComponents/TabPanel\";\nimport api_server from \"../../UtilityComponents/ConfigData\";\nimport {Graph} from \"react-d3-graph\";\nimport _ from \"lodash\";\n\nclass PhenotypeResultBreakdown extends React.Component {\n// the graph configuration, just override the ones you need\n    const\n    myConfig = {\n        nodeHighlightBehavior: true,\n        directed: false,\n        staticGraphWithDragAndDrop: true,\n        d3: {\n            alphaTarget: 0.05,\n            disableLinkForce: true\n        },\n        node: {\n            color: \"blue\",\n            size: 300,\n            highlightStrokeColor: \"black\",\n            labelProperty: \"name\",\n            labelPosition: \"bottom\",\n        },\n        link: {\n            highlightColor: \"lightblue\",\n            renderLabel: true,\n            labelProperty: \"linkType\",\n            strokeWidth: 3,\n            fontSize: 10\n        },\n    };\n\n    constructor(props) {\n        super(props);\n        this.gwasStudyClicked = this.gwasStudyClicked.bind(this);\n        this.experimentClicked = this.experimentClicked.bind(this);\n        this.state = {\n            mousePhenotype: \"\",\n            humanPhenotype: \"\",\n            breakdownData: null,\n            backBtnClick: null,\n            loading: true,\n            tabValue: 0,\n            dataTabValue: 0,\n            configData: api_server,\n            mappingGraphData: null,\n            mappingGraphConfig: null,\n            humanOntology: \"\",\n        };\n    }\n\n    componentDidMount() {\n        this.getBreakdownData();\n    }\n\n    gwasStudyClicked(row) {\n        let studyID = $(row.currentTarget).attr(\"data-id\");\n        var win = window.open(\"https://www.gwascentral.org/study/\" + studyID, \"_blank\");\n        if (win)\n            win.focus();\n    }\n\n    experimentClicked(row) {\n        let selection = $(row.target).attr(\"data-id\");\n    }\n\n    getBreakdownData() {\n        let url_string = this.state.configData.api_server + \"controller.php?type=study&phenotypeBreakdown=&mouseTerm=\" + this.props.mousePhenotype + \"&humanTerm=\" + this.props.humanPhenotype + \"&humanOntology=\" + this.props.humanOntology;\n        axios.get(url_string)\n            .then((response) => {\n                if (response.status === 200) {\n                    if (response.data) {\n                        // graph payload (with minimalist structure)\n                        let humanTermCoords = [50, 214];\n                        let mouseTermCoords = [750, 214];\n                        let data = {\n                            nodes: [\n                                {\n                                    id: response.data[\"Mappings\"][\"humanNodeId\"],\n                                    name: response.data[\"Mappings\"][\"humanLabel\"],\n                                    x: humanTermCoords[0],\n                                    y: humanTermCoords[1],\n                                    color: \"red\",\n                                    symbolType: \"square\"\n                                },\n                                {\n                                    id: response.data[\"Mappings\"][\"mouseNodeId\"],\n                                    name: response.data[\"Mappings\"][\"mouseLabel\"],\n                                    x: mouseTermCoords[0],\n                                    y: mouseTermCoords[1],\n                                    color: \"blue\",\n                                    symbolType: \"square\"\n                                }\n                            ],\n                            links: []\n                        };\n\n                        for (var i = 0; i < response.data[\"Mappings\"][\"mouseSynonyms\"].length; i++) {\n                            let mapping = response.data[\"Mappings\"][\"mouseSynonyms\"][i];\n                            let mouseNode = {\n                                id: mapping[\"synonymId\"],\n                                name: mapping[\"synonymLabel\"],\n                                x: mouseTermCoords[0] - 175,\n                                y: mouseTermCoords[1] - 105 + (i * 65),\n                                color: \"lightblue\"\n                            };\n                            let link = {\n                                source: mapping[\"synonymId\"],\n                                target: response.data[\"Mappings\"][\"mouseNodeId\"],\n                                linkType: \"Synonym\"\n                            };\n                            if (!data.nodes.includes(mouseNode)) {\n                                data.nodes.push(mouseNode);\n                            }\n                            if (!data.links.includes(link)) {\n                                data.links.push(link);\n                            }\n                        }\n                        for (var i = 0; i < response.data[\"Mappings\"][\"humanSynonyms\"].length; i++) {\n                            let mapping = response.data[\"Mappings\"][\"humanSynonyms\"][i];\n                            let humanNode = {\n                                id: mapping[\"synonymId\"],\n                                name: mapping[\"synonymLabel\"],\n                                x: humanTermCoords[0] + 175,\n                                y: humanTermCoords[1] - 105 + (i * 65),\n                                color: \"orange\"\n                            };\n                            let link = {\n                                source: response.data[\"Mappings\"][\"humanNodeId\"],\n                                target: mapping[\"synonymId\"],\n                                linkType: \"Synonym\"\n                            };\n                            if (!data.nodes.includes(humanNode)) {\n                                data.nodes.push(humanNode);\n                            }\n                            if (!data.links.includes(link)) {\n                                data.links.push(link);\n                            }\n                        }\n                        for (var i = 0; i < response.data[\"Mappings\"][\"matches\"].length; i++) {\n                            let match = response.data[\"Mappings\"][\"matches\"][i];\n                            let source = _.find(data.nodes, function (node) {\n                                if (node.id === match[\"humanNodeId\"])\n                                    return true;\n                            });\n                            let target = _.find(data.nodes, function (node) {\n                                if (node.id === match[\"mouseNodeId\"])\n                                    return true;\n                            });\n                            let link = {\n                                source: source ? match[\"humanNodeId\"] : response.data[\"Mappings\"][\"humanNodeId\"],\n                                target: target ? match[\"mouseNodeId\"] : response.data[\"Mappings\"][\"mouseNodeId\"],\n                                linkType: match[\"isExact\"] ? \"Exact Match\" : \"Partial Match\"\n                            }\n                            if (!data.links.includes(link)) {\n                                data.links.push(link);\n                            }\n                        }\n                        this.setState({breakdownData: response.data, loading: false, mappingGraphData: data});\n                    } else {\n\n                    }\n                }\n            })\n            .catch((error) => {\n                console.log(\"An error occurred retrieving phenotype data.\");\n            });\n    }\n\n    getHumanTermID(breakdownData) {\n        if (breakdownData) {\n            if (breakdownData[\"Mappings\"]) {\n                return breakdownData[\"Mappings\"][\"humanID\"];\n            } else {\n                return \"No mapping found\";\n            }\n        }\n    }\n\n    getHumanTerm(breakdownData) {\n        if (breakdownData) {\n            if (breakdownData[\"Mappings\"]) {\n                return breakdownData[\"Mappings\"][\"humanLabel\"];\n            } else {\n                return \"No mapping found\";\n            }\n        }\n    }\n\n    getMouseTermID(breakdownData) {\n        if (breakdownData) {\n            if (breakdownData[\"Mappings\"]) {\n                return breakdownData[\"Mappings\"][\"mouseID\"];\n            } else {\n                return \"No mapping found\";\n            }\n        }\n    }\n\n    getMouseTerm(breakdownData) {\n        if (breakdownData) {\n            if (breakdownData[\"Mappings\"]) {\n                return breakdownData[\"Mappings\"][\"mouseLabel\"];\n            } else {\n                return \"No mapping found\";\n            }\n        }\n    }\n\n    getGWASStudies(breakdownData) {\n        if (breakdownData) {\n            if (breakdownData[\"GWAS Studies\"].length > 0) {\n\n            } else {\n                return \"0\";\n            }\n        }\n    }\n\n    getGeneKnockouts(breakdownData) {\n        if (breakdownData) {\n            if (breakdownData[\"Gene Knockouts\"].length > 0) {\n\n            } else {\n                return \"0\";\n            }\n        }\n    }\n\n    getHumanSynonyms(breakdownData) {\n        if (breakdownData) {\n            if (breakdownData[\"Mappings\"][\"humanSynonyms\"].length > 0) {\n                return breakdownData[\"Mappings\"][\"humanSynonyms\"].map((synonym, index) =>\n                    <li>{synonym[\"synonymLabel\"]}</li>);\n            } else {\n                return <li>None</li>;\n            }\n        }\n    }\n\n    getMouseSynonyms(breakdownData) {\n        if (breakdownData) {\n            if (breakdownData[\"Mappings\"][\"mouseSynonyms\"].length > 0) {\n                return breakdownData[\"Mappings\"][\"mouseSynonyms\"].map((synonym, index) =>\n                    <li>{synonym[\"synonymLabel\"]}</li>);\n            } else {\n                return <li>None</li>;\n            }\n        }\n    }\n\n    render() {\n        const {breakdownData, loading, tabValue, dataTabValue, mappingGraphData} = this.state;\n        return (\n            <Paper id=\"phenotypeResultsContainer\" className=\"container\">\n                <LoadingSpinner loading={loading}/>\n                {this.props.backBtnClick ?\n                    <Button variant=\"contained\" color=\"primary\" onClick={this.props.backBtnClick}>Back</Button> : null}\n                <div className=\"phenotype-breakdown-container\">\n                    <AppBar position=\"static\" color=\"default\">\n                        <Tabs\n                            value={tabValue}\n                            onChange={(e, val) => this.setState({tabValue: val})}\n                            indicatorColor=\"primary\"\n                            textColor=\"primary\"\n                            variant=\"fullWidth\"\n                            aria-label=\"full width tabs example\"\n                        >\n                            <Tab label=\"Data\"/>\n                            <Tab label=\"Mapping\"/>\n\n                        </Tabs>\n                    </AppBar>\n                    <TabPanel value={tabValue} index={0} className=\"subTabMenu\">\n                        <AppBar position=\"static\" color=\"default\">\n                            <Tabs\n                                value={dataTabValue}\n                                onChange={(e, val) => this.setState({dataTabValue: val})}\n                                indicatorColor=\"primary\"\n                                textColor=\"primary\"\n                                aria-label=\"full width tabs example\"\n                                variant=\"fullWidth\"\n                                centered\n                            >\n                                <Tab\n                                    label={(breakdownData ? breakdownData[\"GWAS Studies\"].length : 0) + \" Human GWAS Studies\"}\n                                    wrapped/>\n                                <Tab\n                                    label={(breakdownData ? breakdownData[\"Gene Knockouts\"].length : 0) + \" Mouse Gene Knockouts\"}\n                                    wrapped/>\n\n                            </Tabs>\n                        </AppBar>\n                        <TabPanel value={dataTabValue} index={0}>\n                            {breakdownData ? <ResultTable tableData={breakdownData[\"GWAS Studies\"]}\n                                                          onRowClick={this.gwasStudyClicked}/> : null}\n                        </TabPanel>\n                        <TabPanel value={dataTabValue} index={1}>\n                            {breakdownData ? <ResultTable tableData={breakdownData[\"Gene Knockouts\"]}\n                                                          onRowClick={this.experimentClicked}/> : null}\n                        </TabPanel>\n\n                    </TabPanel>\n                    <TabPanel value={tabValue} index={1}>\n                        <Grid container>\n                            <Grid item xs>\n                                <h4 className=\"center\">Homo Sapiens</h4>\n                            </Grid>\n                            <Grid item xs>\n                                <h4 className=\"center\">Mus Musculus</h4>\n                            </Grid>\n\n                        </Grid>\n                        <Grid container>\n                            <Grid item xs={3} className=\"col highlight\">\n                                <p>ID</p>\n                            </Grid>\n                            <Grid item xs={3}>\n                                <p id=\"HPO-Matched-Term\">{this.getHumanTermID(breakdownData)}</p>\n                            </Grid>\n                            <Grid item xs={3} className=\"col highlight\">\n                                <p>ID</p>\n                            </Grid>\n                            <Grid item xs={3}>\n                                <p id=\"MP-Matched-Term\">{this.getMouseTermID(breakdownData)}</p>\n                            </Grid>\n                            <Grid item xs={3} className=\"col highlight\">\n                                <p>Term</p>\n                            </Grid>\n                            <Grid item xs={3}>\n                                <p id=\"HPO-Matched-Term\">{this.getHumanTerm(breakdownData)}</p>\n                            </Grid>\n                            <Grid item xs={3} className=\"col highlight\">\n                                <p>Term</p>\n                            </Grid>\n                            <Grid item xs={3}>\n                                <p id=\"MP-Matched-Term\">{this.getMouseTerm(breakdownData)}</p>\n                            </Grid>\n\n                        </Grid>\n                        <Grid container>\n                            <Grid item xs={3} className=\"col highlight\">\n                                <p>Synonyms</p>\n                            </Grid>\n                            <Grid item xs={3} className=\"col\">\n                                <ul>\n                                    {this.getHumanSynonyms(breakdownData)}\n                                </ul>\n                            </Grid>\n                            <Grid item xs={3} className=\"col highlight\">\n                                <p>Synonyms</p>\n                            </Grid>\n                            <Grid item xs={3} className=\"col\">\n                                <ul>\n                                    {this.getMouseSynonyms(breakdownData)}\n                                </ul>\n                            </Grid>\n                        </Grid>\n                        <Grid container>\n                            <Grid item xs={3} className=\"col\">\n                                <svg className=\"legendIcon\" xmlns=\"http://www.w3.org/2000/svg\">\n                                    <circle cx=\"5\" cy=\"5\" r=\"10px\" fill=\"red\"/>\n                                </svg>\n                                {this.props.humanOntology === \"MESH\" ? \" MeSH Term\" : \" HPO Term\"}\n                            </Grid>\n                            <Grid item xs={3} className=\"col\">\n                                <svg className=\"legendIcon\" xmlns=\"http://www.w3.org/2000/svg\">\n                                    <circle cx=\"5\" cy=\"5\" r=\"10px\" fill=\"blue\"/>\n                                </svg>\n                                {\" MP Term\"}\n                            </Grid>\n                        </Grid>\n                        <Grid container>\n                            <Grid item xs={3} className=\"col\">\n                                <svg className=\"legendIcon\" xmlns=\"http://www.w3.org/2000/svg\">\n                                    <circle cx=\"5\" cy=\"5\" r=\"10px\" fill=\"orange\"/>\n                                </svg>\n                                {this.props.humanOntology === \"MESH\" ? \" MeSH Synonym\" : \" HPO Synonym\"}\n                            </Grid>\n                            <Grid item xs={3} className=\"col\">\n                                <svg className=\"legendIcon\" xmlns=\"http://www.w3.org/2000/svg\">\n                                    <circle cx=\"5\" cy=\"5\" r=\"10px\" fill=\"lightblue\"/>\n                                </svg>\n                                {\" MP Synonym\"}\n                            </Grid>\n                        </Grid>\n                        <Graph\n                            id=\"graph-id\" // id is mandatory\n                            data={mappingGraphData}\n                            config={this.myConfig}\n                        />\n                    </TabPanel>\n                </div>\n            </Paper>\n        );\n    }\n}\n\nexport default PhenotypeResultBreakdown;","/var/www/testing/GC_Mouse_Integration/src/OntologyHierarchy/Components/OntologyTree/OntologyTree.js",["105","106"],"import {Button, Paper, withStyles} from \"@material-ui/core\";\nimport {animated, useSpring} from \"react-spring/web.cjs\";\nimport Collapse from \"@material-ui/core/Collapse\";\nimport PropTypes from \"prop-types\";\nimport React from \"react\";\nimport TreeView from \"@material-ui/lab/TreeView\";\nimport ArrowDropDownIcon from \"@material-ui/icons/ArrowDropDown\";\nimport ArrowRightIcon from \"@material-ui/icons/ArrowRight\";\nimport SearchIcon from '@material-ui/icons/Search';\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\nimport StyledTreeItem from \"./Components/StyledTreeItem\";\nimport _ from 'lodash';\n\nconst useStyles = theme => ({\n    root: {\n        marginTop: 20,\n        marginLeft: 5,\n        overflowY: \"scroll\",\n        height: \"75vh\",\n    },\n    highlight: {\n        backgroundColor: \"#61aefd\",\n    },\n    btn: {\n        marginRight: 20,\n    }\n});\n\nfunction TransitionComponent(props) {\n    const style = useSpring({\n        from: {opacity: 0, transform: 'translate3d(20px,0,0)'},\n        to: {opacity: props.in ? 1 : 0, transform: `translate3d(${props.in ? 0 : 20}px,0,0)`},\n    });\n    return (\n        <animated.div style={style}>\n            <Collapse {...props} />\n        </animated.div>\n    );\n}\n\nTransitionComponent.propTypes = {\n    /**\n     * Show the component; triggers the enter or exit states\n     */\n    in: PropTypes.bool,\n};\n\nclass OntologyTree extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            loading: false,\n            treeData: null,\n            expandedNodes: [''],\n            selectedNodes: [''],\n            selectedSpecies: \"Mouse\",\n            nodes: [],\n            treeOntology: \"\",\n            onToggle: null,\n            onSelect: null,\n            onBtnClick: null,\n            sourceOntology: \"\",\n            mappingOntology: \"\",\n            selectedPhenotypeLabel: \"\",\n            treeID: \"\",\n        };\n    }\n\n    getTreeNodes = (nodes, parentPath) => {\n        const {classes} = this.props;\n        const btn = nodes.hasMapping ?\n            <Button className={classes.btn} size=\"small\" onClick={() => this.props.onBtnClick(nodes.label)}\n                   style={{margin: 0}} color=\"primary\" variant=\"outlined\" id={nodes.id}\n            ><SearchIcon fontSize=\"small\"/></Button> : null;\n        const tempChildNode = (nodes.hasChildren === true) && (_.isEmpty(nodes.children)) ?\n            <StyledTreeItem labelText={<CircularProgress color=\"inherit\" size={15}/>}/> : null;\n        if (!_.isEmpty(nodes.children)) {\n            nodes.children = _.orderBy(nodes.children, ['label'], ['asc']); // all nodes must be sorted alphabetically!\n        }\n        let path = null;\n        if (parentPath !== undefined)\n            path = parentPath + \"-\" + nodes.id;\n        else\n            path = nodes.id;\n        let id = this.props.treeID + \"-\" + path;\n        return (\n            <StyledTreeItem id={id} onLabelClick={(e) => e.preventDefault()} key={nodes.id} nodeId={id}\n                            data-term={nodes.id} labelText={nodes.label} labelIcon={btn}>\n                {!_.isEmpty(nodes.children) ? Object.keys(nodes.children).map((key, index) => this.getTreeNodes(nodes.children[key], path)) : tempChildNode}\n            </StyledTreeItem>\n        );\n    }\n\n    getExpandedNodeIDs = () => {\n        let terms = this.props.expanded;\n        let result = [];\n        terms.forEach(term => function() {\n            // result.push($())\n        });\n        return result;\n    }\n\n\n    render() {\n        const {classes} = this.props;\n        const {\n            loading,\n        } = this.state;\n        if (this.props.treeData === null || this.props.treeData === undefined) {\n            throw new Error('No ontology data received.');\n        }\n        return (\n            <TreeView id={this.props.treeID} className={classes.root} expanded={this.props.expanded}\n                      selected={this.props.selected}\n                      defaultCollapseIcon={<ArrowDropDownIcon/>} defaultExpandIcon={<ArrowRightIcon/>}\n                      defaultEndIcon={<div style={{width: 24}}/>} onNodeToggle={this.props.onToggle}\n                      onNodeSelect={this.props.onSelect}>\n                {this.getTreeNodes(this.props.treeData)}\n            </TreeView>\n        );\n\n    }\n\n}\n\nexport default withStyles(useStyles)(OntologyTree);\n\n","/var/www/testing/GC_Mouse_Integration/src/UtilityComponents/TabPanel.js",["107"],"import React, {useCallback} from 'react';\nimport Typography from \"@material-ui/core/Typography\";\nimport {Box} from \"@material-ui/core\";\n\nclass TabPanel extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {};\n    }\n\n\n    render() {\n        const {children, value, index, ...other} = this.props;\n        return (\n            <div role=\"tabpanel\"\n                 hidden={value !== index}\n                 id={`full-width-tabpanel-${index}`}\n                 aria-labelledby={`full-width-tab-${index}`}\n                 {...other}>\n                {value === index && (\n                    <Box p={3}>\n                        <Typography>{children}</Typography>\n                    </Box>\n                )}\n            </div>\n        );\n\n    }\n}\n\n\nexport default TabPanel;","/var/www/testing/GC_Mouse_Integration/src/OntologyHierarchy/Components/OntologyTree/Components/StyledTreeItem.js",["108"],"import React from 'react';\nimport Typography from '@material-ui/core/Typography';\nimport {withStyles} from '@material-ui/core';\nimport TreeItem from '@material-ui/lab/TreeItem';\nimport SearchIcon from '@material-ui/icons/Search';\n\nconst useTreeItemStyles = theme => ({\n  root: {\n    color: theme.palette.text.secondary,\n    '&:hover > $content': {\n      // backgroundColor: theme.palette.action.hover,\n    },\n    '&:focus > $content, &$selected > $content': {\n      // backgroundColor: `var(--tree-view-bg-color, ${theme.palette.grey[400]})`,\n      color: 'var(--tree-view-color)',\n    },\n    '&:focus > $content $label, &:hover > $content $label, &$selected > $content $label': {\n      // backgroundColor: theme.palette.action.hover,\n    },\n  },\n  content: {\n    color: theme.palette.text.secondary,\n    borderTopRightRadius: theme.spacing(2),\n    borderBottomRightRadius: theme.spacing(2),\n    paddingRight: theme.spacing(1),\n    fontWeight: theme.typography.fontWeightBold,\n    '$expanded > &': {\n      fontWeight: theme.typography.fontWeightRegular,\n    },\n  },\n  group: {\n    '& $content': {\n      // paddingLeft: theme.spacing(2),\n    },\n  },\n  expanded: {},\n  selected: {},\n  label: {\n    fontWeight: 'inherit',\n    color: 'inherit',\n      textAlign: 'left',\n  },\n});\n\nclass StyledTreeItem extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {label: \"\", color: \"\", bgColor: \"\",};\n    }\n\n\n\n    render() {\n        const {classes} = this.props;\n        const {labelText, labelIcon, labelInfo, color, bgColor,key, ...other} = this.props;\n\n        return (\n            <TreeItem\n                label={\n                    <div className={classes.label}>\n                        <Typography variant=\"body2\" className={classes.content} component=\"span\">\n                            {this.props.labelText}\n                        </Typography>\n                        <Typography variant=\"caption\" color=\"inherit\">\n                            {this.props.labelInfo}\n                        </Typography>\n                        <div className={classes.labelIcon} style={{float: 'right'}}>\n                            {labelIcon}\n                        </div>\n                    </div>\n                }\n                style={{\n                    '--tree-view-color': color,\n                    '--tree-view-bg-color': bgColor,\n                }}\n                key={this.props.key}\n             nodeId={this.props.nodeId}\n            classes={{\n        root: classes.root,\n        content: classes.content,\n        expanded: classes.expanded,\n        selected: classes.selected,\n        group: classes.group,\n        label: classes.label,\n            }}\n                {...other}\n            />\n        );\n    }\n}\nexport default withStyles(useTreeItemStyles)(StyledTreeItem);\n\n","/var/www/testing/GC_Mouse_Integration/src/Genome/Components/assembly.js",["109"],"    export default {\n      \"name\": \"Homo_sapiens.GRCh38.dna\",\n      \"sequence\": {\n        \"type\": \"ReferenceSequenceTrack\",\n        \"trackId\": \"Homo_sapiens.GRCh38.dna-ReferenceSequenceTrack\",\n        \"adapter\": {\n          \"type\": \"BgzipFastaAdapter\",\n          \"fastaLocation\": {\n            \"uri\": \"Homo_sapiens.GRCh38.dna.fa.gz\"\n          },\n          \"faiLocation\": {\n            \"uri\": \"Homo_sapiens.GRCh38.dna.fa.gz.fai\"\n          },\n          \"gziLocation\": {\n            \"uri\": \"Homo_sapiens.GRCh38.dna.fa.gz.gzi\"\n          }\n        }\n      }\n    }",{"ruleId":"110","replacedBy":"111"},{"ruleId":"112","replacedBy":"113"},{"ruleId":"110","replacedBy":"111"},{"ruleId":"112","replacedBy":"113"},{"ruleId":"114","severity":1,"message":"115","line":6,"column":9,"nodeType":"116","messageId":"117","endLine":6,"endColumn":24},{"ruleId":"114","severity":1,"message":"118","line":6,"column":26,"nodeType":"116","messageId":"117","endLine":6,"endColumn":39},{"ruleId":"119","severity":1,"message":"120","line":115,"column":15,"nodeType":"116","messageId":"117","endLine":115,"endColumn":21},{"ruleId":"121","severity":1,"message":"122","line":116,"column":50,"nodeType":"123","messageId":"124","endLine":116,"endColumn":52},{"ruleId":"125","severity":1,"message":"126","line":299,"column":57,"nodeType":"127","messageId":"128","endLine":299,"endColumn":90},{"ruleId":"129","severity":1,"message":"130","line":312,"column":38,"nodeType":"116","messageId":"131","endLine":312,"endColumn":39},{"ruleId":"125","severity":1,"message":"132","line":320,"column":57,"nodeType":"127","messageId":"128","endLine":320,"endColumn":90},{"ruleId":"119","severity":1,"message":"133","line":496,"column":13,"nodeType":"116","messageId":"117","endLine":496,"endColumn":19},{"ruleId":"119","severity":1,"message":"133","line":511,"column":13,"nodeType":"116","messageId":"117","endLine":511,"endColumn":19},{"ruleId":"119","severity":1,"message":"134","line":570,"column":13,"nodeType":"116","messageId":"117","endLine":570,"endColumn":35},{"ruleId":"119","severity":1,"message":"135","line":1,"column":16,"nodeType":"116","messageId":"117","endLine":1,"endColumn":27},{"ruleId":"119","severity":1,"message":"136","line":35,"column":16,"nodeType":"116","messageId":"117","endLine":35,"endColumn":24},{"ruleId":"119","severity":1,"message":"135","line":1,"column":16,"nodeType":"116","messageId":"117","endLine":1,"endColumn":27},{"ruleId":"119","severity":1,"message":"137","line":3,"column":8,"nodeType":"116","messageId":"117","endLine":3,"endColumn":9},{"ruleId":"119","severity":1,"message":"135","line":1,"column":16,"nodeType":"116","messageId":"117","endLine":1,"endColumn":27},{"ruleId":"119","severity":1,"message":"138","line":71,"column":13,"nodeType":"116","messageId":"117","endLine":71,"endColumn":22},{"ruleId":"129","severity":1,"message":"130","line":126,"column":34,"nodeType":"116","messageId":"131","endLine":126,"endColumn":35},{"ruleId":"129","severity":1,"message":"130","line":147,"column":34,"nodeType":"116","messageId":"131","endLine":147,"endColumn":35},{"ruleId":"119","severity":1,"message":"139","line":1,"column":17,"nodeType":"116","messageId":"117","endLine":1,"endColumn":22},{"ruleId":"119","severity":1,"message":"140","line":108,"column":13,"nodeType":"116","messageId":"117","endLine":108,"endColumn":20},{"ruleId":"119","severity":1,"message":"135","line":1,"column":16,"nodeType":"116","messageId":"117","endLine":1,"endColumn":27},{"ruleId":"119","severity":1,"message":"141","line":5,"column":8,"nodeType":"116","messageId":"117","endLine":5,"endColumn":18},{"ruleId":"142","severity":1,"message":"143","line":1,"column":5,"nodeType":"144","endLine":19,"endColumn":6},"no-native-reassign",["145"],"no-negated-in-lhs",["146"],"@typescript-eslint/no-unused-vars","'TransitionGroup' is defined but never used.","Identifier","unusedVar","'CSSTransition' is defined but never used.","no-unused-vars","'tracks' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-loop-func","Function declared in a loop contains unsafe references to variable(s) 'expandedMouseNodes'.","ArrowFunctionExpression","unsafeRefs","no-redeclare","'i' is already defined.","redeclared","Function declared in a loop contains unsafe references to variable(s) 'expandedHumanNodes'.","'nodeID' is assigned a value but never used.","'humanLiveSearchResults' is assigned a value but never used.","'useCallback' is defined but never used.","'isZoomed' is assigned a value but never used.","'$' is defined but never used.","'selection' is assigned a value but never used.","'Paper' is defined but never used.","'loading' is assigned a value but never used.","'SearchIcon' is defined but never used.","import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","no-global-assign","no-unsafe-negation"]